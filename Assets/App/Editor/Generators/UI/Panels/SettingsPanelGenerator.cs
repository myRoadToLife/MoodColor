using UnityEngine;
using UnityEditor;
using TMPro;
using UnityEngine.UI;
using System.Reflection;
using App.Develop.Scenes.PersonalAreaScene.Settings;

namespace App.Editor.Generators.UI.Panels
{
    public static class SettingsPanelGenerator
    {
        #region Constants
        private const string PREFAB_DIRECTORY = "Assets/Prefabs/UI";
        private const string PREFAB_NAME = "SettingsPanel.prefab";
        
        // –°—Ç–∏–ª–µ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
        private static readonly Color PanelBgColor = new Color(0.12f, 0.13f, 0.16f, 0.98f);
        private static readonly Color SectionBgColor = new Color(0.2f, 0.22f, 0.25f, 0.9f);
        private static readonly Color PrimaryTextColor = Color.white;
        private static readonly Color SecondaryTextColor = new Color(0.7f, 0.7f, 0.7f);
        private static readonly Color ButtonBgColor = new Color(0.3f, 0.4f, 0.6f);
        private static readonly Color HighlightButtonBgColor = new Color(0.4f, 0.5f, 0.7f);
        private static readonly Color DestructiveButtonBgColor = new Color(0.8f, 0.3f, 0.3f);
        private static readonly Color ToggleBgColor = new Color(0.1f, 0.1f, 0.1f);
        private static readonly Color ToggleCheckmarkColor = new Color(0.4f, 0.8f, 1f);
        
        private static readonly int HeaderFontSize = 28;
        private static readonly int SectionTitleFontSize = 22;
        private static readonly int BodyFontSize = 18;
        private const float PADDING = 20f;
        private const float SPACING = 15f;
        #endregion

        [MenuItem("Tools/MoodColor/Generate Settings Panel")]
        public static void Generate()
        {
            // --- Create root canvas ---
            GameObject canvasObject = new GameObject("Canvas", typeof(Canvas), typeof(CanvasScaler), typeof(GraphicRaycaster));
            var canvas = canvasObject.GetComponent<Canvas>();
            canvas.renderMode = RenderMode.ScreenSpaceOverlay;
            
            // --- Create base panel ---
            GameObject panelObject = new GameObject("SettingsPanel", typeof(RectTransform), typeof(CanvasGroup));
            panelObject.transform.SetParent(canvasObject.transform, false);
            var panelRT = panelObject.GetComponent<RectTransform>();
            panelRT.anchorMin = Vector2.zero;
            panelRT.anchorMax = Vector2.one;
            panelRT.sizeDelta = Vector2.zero;
            
            // --- Add panel background ---
            var bgImage = panelObject.AddComponent<Image>();
            bgImage.color = PanelBgColor;
            
            // --- Create header ---
            var header = CreateHeader(panelObject.transform, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è");
            
            // --- Create main content area ---
            var mainContent = CreateMainContentArea(panelObject.transform, "MainContent");
            
            // --- Create sections ---
            var generalSettingsSection = CreateSection(mainContent, "GeneralSettings", "–û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏");
            var notificationsToggle = CreateToggle(generalSettingsSection, "NotificationsToggle", "–†–∞–∑—Ä–µ—à–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è");
            var soundToggle = CreateToggle(generalSettingsSection, "SoundToggle", "–í–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫");
            
            var appearanceSection = CreateSection(mainContent, "AppearanceSettings", "–í–Ω–µ—à–Ω–∏–π –≤–∏–¥");
            var themeDropdown = CreateDropdown(appearanceSection, "ThemeDropdown", "–¢–µ–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è");
            var languageDropdown = CreateDropdown(appearanceSection, "LanguageDropdown", "–Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞");
            
            var regionSection = CreateSection(mainContent, "RegionSettings", "–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏");
            var currentRegionText = CreateText(regionSection, "CurrentRegionText", "–¢–µ–∫—É—â–∏–π —Ä–µ–≥–∏–æ–Ω: –ù–µ –≤—ã–±—Ä–∞–Ω", BodyFontSize, FontStyles.Normal, SecondaryTextColor);
            var regionDropdown = CreateDropdown(regionSection, "RegionDropdown", "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω");
            
            // --- Create buttons panel ---
            var buttonsGroup = CreateHorizontalGroup(panelObject.transform, "ActionButtons", 5, 60);
            buttonsGroup.GetComponent<HorizontalLayoutGroup>().padding = new RectOffset((int)PADDING, (int)PADDING, 10, 10);
            buttonsGroup.GetComponent<RectTransform>().anchorMin = new Vector2(0, 0);
            buttonsGroup.GetComponent<RectTransform>().anchorMax = new Vector2(1, 0);
            buttonsGroup.GetComponent<RectTransform>().pivot = new Vector2(0.5f, 0);
            buttonsGroup.GetComponent<RectTransform>().sizeDelta = new Vector2(0, 60);
            buttonsGroup.GetComponent<RectTransform>().anchoredPosition = new Vector2(0, PADDING);
            
            var saveButton = CreateButton(buttonsGroup, "SaveButton", "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", new Color(0.2f, 0.6f, 0.3f));
            var resetButton = CreateButton(buttonsGroup, "ResetButton", "–°–±—Ä–æ—Å–∏—Ç—å");
            var privacyButton = CreateButton(buttonsGroup, "PrivacySettingsButton", "–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å", HighlightButtonBgColor);
            var locationButton = CreateButton(buttonsGroup, "LocationSettingsButton", "üìç –õ–æ–∫–∞—Ü–∏—è", new Color(0.3f, 0.5f, 0.8f));
            var closeButton = CreateButton(buttonsGroup, "CloseButton", "–ó–∞–∫—Ä—ã—Ç—å");
            
            // --- Create delete account button (separately) ---
            var deleteAccountButton = CreateButton(panelObject.transform, "DeleteAccountButton", "–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", DestructiveButtonBgColor);
            var deleteButtonRT = deleteAccountButton.GetComponent<RectTransform>();
            deleteButtonRT.anchorMin = new Vector2(0.5f, 0);
            deleteButtonRT.anchorMax = new Vector2(0.5f, 0);
            deleteButtonRT.pivot = new Vector2(0.5f, 0);
            deleteButtonRT.sizeDelta = new Vector2(200, 40);
            deleteButtonRT.anchoredPosition = new Vector2(0, PADDING * 4);
            
            // --- Create popup panel ---
            var popupPanel = CreatePopupPanel(panelObject.transform);
            
            // --- –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –ø–∞–Ω–µ–ª–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ ---
            var privacyPanelContainer = new GameObject("PrivacyPanelContainer", typeof(RectTransform));
            privacyPanelContainer.transform.SetParent(panelObject.transform, false);
            privacyPanelContainer.SetActive(false); // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω
            
            // --- –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –ø–∞–Ω–µ–ª–∏ –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏ ---
            var locationPanelContainer = new GameObject("LocationPanelContainer", typeof(RectTransform));
            locationPanelContainer.transform.SetParent(panelObject.transform, false);
            locationPanelContainer.SetActive(false); // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω
            
            // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –ø—Ä–µ—Ñ–∞–± –ø–∞–Ω–µ–ª–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
            var privacyPanelPath = "Assets/Prefabs/UI/PrivacyPanel.prefab";
            if (System.IO.File.Exists(privacyPanelPath))
            {
                var privacyPanelPrefab = AssetDatabase.LoadAssetAtPath<GameObject>(privacyPanelPath);
                if (privacyPanelPrefab != null)
                {
                    // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –ø—Ä–µ—Ñ–∞–±–∞ –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
                    var privacyPanelInstance = Object.Instantiate(privacyPanelPrefab, privacyPanelContainer.transform);
                    privacyPanelInstance.name = "PrivacyPanel";
                    
                    Debug.Log("üîí –ü—Ä–µ—Ñ–∞–± –ø–∞–Ω–µ–ª–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –ø–∞–Ω–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫");
                }
                else
                {
                    Debug.LogWarning("‚ö†Ô∏è –ü—Ä–µ—Ñ–∞–± –ø–∞–Ω–µ–ª–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ–≥–æ");
                }
            }
            else
            {
                Debug.LogWarning("‚ö†Ô∏è –ü—Ä–µ—Ñ–∞–± –ø–∞–Ω–µ–ª–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: " + privacyPanelPath);
                Debug.LogWarning("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–µ—Ñ–∞–± –ø–∞–Ω–µ–ª–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ Tools > MoodColor > Generate Privacy Panel");
            }
            
            // --- Add controller and connect UI elements ---
            var controller = panelObject.AddComponent<SettingsPanelController>();
            
            // Use reflection to set private fields
            SetPrivateField(controller, "_notificationsToggle", notificationsToggle.GetComponent<Toggle>());
            SetPrivateField(controller, "_soundToggle", soundToggle.GetComponent<Toggle>());
            SetPrivateField(controller, "_themeDropdown", themeDropdown.GetComponent<TMP_Dropdown>());
            SetPrivateField(controller, "_languageDropdown", languageDropdown.GetComponent<TMP_Dropdown>());
            SetPrivateField(controller, "_regionDropdown", regionDropdown.GetComponent<TMP_Dropdown>());
            SetPrivateField(controller, "_currentRegionText", currentRegionText.GetComponent<TMP_Text>());
            SetPrivateField(controller, "_saveButton", saveButton.GetComponent<Button>());
            SetPrivateField(controller, "_resetButton", resetButton.GetComponent<Button>());
            SetPrivateField(controller, "_deleteAccountButton", deleteAccountButton.GetComponent<Button>());
            SetPrivateField(controller, "_privacySettingsButton", privacyButton.GetComponent<Button>());
            SetPrivateField(controller, "_locationSettingsButton", locationButton.GetComponent<Button>());
            SetPrivateField(controller, "_closeButton", closeButton.GetComponent<Button>());
            SetPrivateField(controller, "_popupPanel", popupPanel);
            SetPrivateField(controller, "_popupText", popupPanel.transform.Find("Content/Message")?.GetComponent<TMP_Text>());
            SetPrivateField(controller, "_privacyPanel", privacyPanelContainer);
            SetPrivateField(controller, "_locationPanel", locationPanelContainer);
            
            // --- Save as prefab ---
            SavePanelAsPrefab(canvasObject);
            
            // Select the panel in the editor
            Selection.activeObject = canvasObject;
        }

        #region UI Creation Methods
        private static GameObject CreateHeader(Transform parent, string title)
        {
            var textGo = CreateText(parent, "Header", title, HeaderFontSize, FontStyles.Bold, PrimaryTextColor);
            var rt = textGo.GetComponent<RectTransform>();
            rt.anchorMin = new Vector2(0, 1);
            rt.anchorMax = new Vector2(1, 1);
            rt.pivot = new Vector2(0.5f, 1);
            rt.anchoredPosition = new Vector2(0, -PADDING);
            rt.sizeDelta = new Vector2(-PADDING * 2, 50);
            textGo.GetComponent<TextMeshProUGUI>().alignment = TextAlignmentOptions.Center;
            return textGo;
        }
        
        private static Transform CreateMainContentArea(Transform parent, string name)
        {
            var go = new GameObject(name, typeof(RectTransform));
            go.transform.SetParent(parent, false);
            var rt = go.GetComponent<RectTransform>();
            rt.anchorMin = new Vector2(0, 0);
            rt.anchorMax = new Vector2(1, 1);
            rt.offsetMin = new Vector2(PADDING, 80); // –û—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É –¥–ª—è –∫–Ω–æ–ø–æ–∫
            rt.offsetMax = new Vector2(-PADDING, -80); // –û—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞

            var layout = go.AddComponent<VerticalLayoutGroup>();
            layout.spacing = SPACING * 2;
            layout.childControlWidth = true;
            layout.childControlHeight = false;
            layout.childForceExpandWidth = true;
            layout.childForceExpandHeight = false;

            return go.transform;
        }
        
        private static Transform CreateSection(Transform parent, string name, string title)
        {
            var sectionRoot = new GameObject(name, typeof(Image));
            sectionRoot.transform.SetParent(parent, false);
            sectionRoot.GetComponent<Image>().color = SectionBgColor;
            
            var layout = sectionRoot.AddComponent<VerticalLayoutGroup>();
            layout.padding = new RectOffset((int)PADDING, (int)PADDING, (int)PADDING, (int)PADDING);
            layout.spacing = SPACING;
            layout.childControlWidth = true;
            
            var fitter = sectionRoot.AddComponent<ContentSizeFitter>();
            fitter.verticalFit = ContentSizeFitter.FitMode.PreferredSize;

            var titleGo = CreateText(sectionRoot.transform, "SectionHeader", title, SectionTitleFontSize, FontStyles.Bold, PrimaryTextColor);
            titleGo.AddComponent<LayoutElement>().minHeight = 40;

            return sectionRoot.transform;
        }
        
        private static Transform CreateHorizontalGroup(Transform parent, string name, int childCount, float height)
        {
            var go = new GameObject(name, typeof(RectTransform), typeof(HorizontalLayoutGroup));
            go.transform.SetParent(parent, false);
            
            var rt = go.GetComponent<RectTransform>();
            rt.sizeDelta = new Vector2(0, height);
            
            var layout = go.GetComponent<HorizontalLayoutGroup>();
            layout.spacing = SPACING;
            layout.childControlHeight = true;
            layout.childForceExpandWidth = true;
            layout.childForceExpandHeight = true;
            
            return go.transform;
        }
        
        private static GameObject CreateToggle(Transform parent, string name, string label)
        {
            var go = new GameObject(name, typeof(Toggle), typeof(LayoutElement));
            go.transform.SetParent(parent, false);
            go.GetComponent<LayoutElement>().minHeight = 40;

            var toggle = go.GetComponent<Toggle>();
            
            var bg = new GameObject("Background", typeof(Image));
            bg.transform.SetParent(go.transform, false);
            var bgRt = bg.GetComponent<RectTransform>();
            bgRt.anchorMin = new Vector2(0, 0.5f);
            bgRt.anchorMax = new Vector2(0, 0.5f);
            bgRt.pivot = new Vector2(0, 0.5f);
            bgRt.sizeDelta = new Vector2(30, 30);
            bg.GetComponent<Image>().color = ToggleBgColor;

            var checkmark = new GameObject("Checkmark", typeof(Image));
            checkmark.transform.SetParent(bg.transform, false);
            var checkmarkRt = checkmark.GetComponent<RectTransform>();
            checkmarkRt.anchorMin = Vector2.zero;
            checkmarkRt.anchorMax = Vector2.one;
            checkmarkRt.offsetMin = new Vector2(5, 5);
            checkmarkRt.offsetMax = new Vector2(-5, -5);
            checkmark.GetComponent<Image>().color = ToggleCheckmarkColor;

            toggle.targetGraphic = bg.GetComponent<Image>();
            toggle.graphic = checkmark.GetComponent<Image>();
            toggle.isOn = true;

            var labelGo = CreateText(go.transform, "Label", label, BodyFontSize, FontStyles.Normal, PrimaryTextColor);
            var labelRt = labelGo.GetComponent<RectTransform>();
            labelRt.anchorMin = Vector2.zero;
            labelRt.anchorMax = Vector2.one;
            labelRt.offsetMin = new Vector2(40, 0);
            labelRt.offsetMax = new Vector2(0, 0);
            labelGo.GetComponent<TextMeshProUGUI>().alignment = TextAlignmentOptions.Left;
            
            return go;
        }
        
        private static GameObject CreateDropdown(Transform parent, string name, string label)
        {
            // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–º –ª–µ–π–∞—É—Ç–æ–º
            var container = new GameObject(name + "Container", typeof(RectTransform), typeof(VerticalLayoutGroup), typeof(LayoutElement));
            container.transform.SetParent(parent, false);
            container.GetComponent<LayoutElement>().minHeight = 80;
            
            var layout = container.GetComponent<VerticalLayoutGroup>();
            layout.spacing = 5;
            layout.childControlWidth = true;
            layout.childForceExpandWidth = true;
            layout.childControlHeight = false;
            layout.childForceExpandHeight = false;
            
            // –°–æ–∑–¥–∞–µ–º –ª–µ–π–±–ª
            var labelGo = CreateText(container.transform, name + "Label", label, BodyFontSize - 2, FontStyles.Normal, PrimaryTextColor);
            labelGo.AddComponent<LayoutElement>().minHeight = 30;
            
            // –°–æ–∑–¥–∞–µ–º —Å–∞–º –¥—Ä–æ–ø–¥–∞—É–Ω
            var go = new GameObject(name, typeof(Image), typeof(TMP_Dropdown), typeof(LayoutElement));
            go.transform.SetParent(container.transform, false);
            go.GetComponent<LayoutElement>().minHeight = 40;
            go.GetComponent<Image>().color = ToggleBgColor;
            
            var dropdown = go.GetComponent<TMP_Dropdown>();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            var captionLabel = CreateText(go.transform, "Label", "", BodyFontSize, FontStyles.Normal, PrimaryTextColor);
            var captionLabelRt = captionLabel.GetComponent<RectTransform>();
            captionLabelRt.anchorMin = Vector2.zero;
            captionLabelRt.anchorMax = Vector2.one;
            captionLabelRt.offsetMin = new Vector2(15, 0);
            captionLabelRt.offsetMax = new Vector2(-40, 0);
            dropdown.captionText = captionLabel.GetComponent<TMP_Text>();
            
            // –°—Ç—Ä–µ–ª–∫–∞ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
            var arrow = new GameObject("Arrow", typeof(Image));
            arrow.transform.SetParent(go.transform, false);
            arrow.GetComponent<Image>().color = PrimaryTextColor;
            var arrowRt = arrow.GetComponent<RectTransform>();
            arrowRt.anchorMin = new Vector2(1, 0.5f);
            arrowRt.anchorMax = new Vector2(1, 0.5f);
            arrowRt.pivot = new Vector2(1, 0.5f);
            arrowRt.sizeDelta = new Vector2(20, 20);
            arrowRt.anchoredPosition = new Vector2(-15, 0);
            
            dropdown.options.Add(new TMP_Dropdown.OptionData("–ó–∞–≥—Ä—É–∑–∫–∞..."));
            
            // –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ —Å Canvas –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
            var template = new GameObject("Template", typeof(RectTransform));
            template.transform.SetParent(go.transform, false);
            
            // –î–æ–±–∞–≤–ª—è–µ–º Canvas –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
            var templateCanvas = template.AddComponent<Canvas>();
            templateCanvas.overrideSorting = true;
            templateCanvas.sortingOrder = 30000; // –í—ã—Å–æ–∫–∏–π sortingOrder –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–≤–µ—Ä—Ö –¥—Ä—É–≥–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            template.AddComponent<GraphicRaycaster>();
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º RectTransform –¥–ª—è —à–∞–±–ª–æ–Ω–∞
            dropdown.template = template.GetComponent<RectTransform>();
            var templateRT = template.GetComponent<RectTransform>();
            templateRT.anchorMin = new Vector2(0, 0);
            templateRT.anchorMax = new Vector2(1, 0);
            templateRT.pivot = new Vector2(0.5f, 1);
            templateRT.anchoredPosition = new Vector2(0, 0);
            templateRT.sizeDelta = new Vector2(0, 150);
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ–Ω –¥–ª—è —à–∞–±–ª–æ–Ω–∞
            var templateBg = new GameObject("Background", typeof(Image));
            templateBg.transform.SetParent(template.transform, false);
            templateBg.GetComponent<Image>().color = PanelBgColor;
            var templateBgRT = templateBg.GetComponent<RectTransform>();
            templateBgRT.anchorMin = Vector2.zero;
            templateBgRT.anchorMax = Vector2.one;
            templateBgRT.sizeDelta = Vector2.zero;
            
            // –î–æ–±–∞–≤–ª—è–µ–º ScrollRect –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É
            var scrollRect = template.AddComponent<ScrollRect>();
            scrollRect.horizontal = false;
            scrollRect.vertical = true;
            scrollRect.movementType = ScrollRect.MovementType.Clamped;
            scrollRect.scrollSensitivity = 15;
            
            // –°–æ–∑–¥–∞–µ–º Viewport
            var viewport = new GameObject("Viewport", typeof(RectTransform), typeof(Image), typeof(Mask));
            viewport.transform.SetParent(template.transform, false);
            viewport.GetComponent<Image>().color = Color.white;
            viewport.GetComponent<Mask>().showMaskGraphic = false;
            var viewportRT = viewport.GetComponent<RectTransform>();
            viewportRT.anchorMin = Vector2.zero;
            viewportRT.anchorMax = Vector2.one;
            viewportRT.sizeDelta = new Vector2(-18, -2); // –û—Ç—Å—Ç—É–ø –¥–ª—è –ø–æ–ª–æ—Å—ã –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
            viewportRT.pivot = new Vector2(0, 1);
            
            // –°–æ–∑–¥–∞–µ–º Content –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞
            var content = new GameObject("Content", typeof(RectTransform), typeof(VerticalLayoutGroup));
            content.transform.SetParent(viewport.transform, false);
            var contentRT = content.GetComponent<RectTransform>();
            contentRT.anchorMin = new Vector2(0, 1);
            contentRT.anchorMax = new Vector2(1, 1);
            contentRT.pivot = new Vector2(0.5f, 1);
            contentRT.anchoredPosition = Vector2.zero;
            contentRT.sizeDelta = new Vector2(0, 0);
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º VerticalLayoutGroup
            var contentLayout = content.GetComponent<VerticalLayoutGroup>();
            contentLayout.spacing = 0;
            contentLayout.padding = new RectOffset(5, 5, 5, 5);
            contentLayout.childControlWidth = true;
            contentLayout.childControlHeight = false;
            contentLayout.childForceExpandWidth = true;
            contentLayout.childForceExpandHeight = false;
            
            // –î–æ–±–∞–≤–ª—è–µ–º ContentSizeFitter —á—Ç–æ–±—ã Content —Ä–∞—Å—Ç—è–≥–∏–≤–∞–ª—Å—è –ø–æ–¥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            var contentSizeFitter = content.AddComponent<ContentSizeFitter>();
            contentSizeFitter.verticalFit = ContentSizeFitter.FitMode.PreferredSize;
            
            // –°–≤—è–∑—ã–≤–∞–µ–º ScrollRect —Å Viewport –∏ Content
            scrollRect.viewport = viewportRT;
            scrollRect.content = contentRT;
            
            // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞
            var item = new GameObject("Item", typeof(Toggle), typeof(LayoutElement));
            item.transform.SetParent(content.transform, false);
            item.GetComponent<LayoutElement>().minHeight = 30;
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Toggle
            var toggle = item.GetComponent<Toggle>();
            toggle.targetGraphic = item.AddComponent<Image>();
            toggle.targetGraphic.color = new Color(0.2f, 0.2f, 0.2f, 0.5f);
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞
            var itemText = CreateText(item.transform, "Item Label", "Option", BodyFontSize, FontStyles.Normal, PrimaryTextColor);
            var itemTextRT = itemText.GetComponent<RectTransform>();
            itemTextRT.anchorMin = Vector2.zero;
            itemTextRT.anchorMax = Vector2.one;
            itemTextRT.offsetMin = new Vector2(5, 0);
            itemTextRT.offsetMax = new Vector2(-5, 0);
            
            // –°–≤—è–∑—ã–≤–∞–µ–º —Å –¥—Ä–æ–ø–¥–∞—É–Ω–æ–º
            dropdown.itemText = itemText.GetComponent<TextMeshProUGUI>();
            dropdown.itemText.alignment = TextAlignmentOptions.Left;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–æ—Å—É –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
            var scrollbar = new GameObject("Scrollbar", typeof(Image), typeof(Scrollbar));
            scrollbar.transform.SetParent(template.transform, false);
            scrollbar.GetComponent<Image>().color = new Color(0.3f, 0.3f, 0.3f, 0.5f);
            var scrollbarRT = scrollbar.GetComponent<RectTransform>();
            scrollbarRT.anchorMin = new Vector2(1, 0);
            scrollbarRT.anchorMax = new Vector2(1, 1);
            scrollbarRT.pivot = new Vector2(1, 1);
            scrollbarRT.sizeDelta = new Vector2(15, 0);
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Scrollbar
            var scrollbarComp = scrollbar.GetComponent<Scrollbar>();
            scrollbarComp.direction = Scrollbar.Direction.BottomToTop;
            
            // –°–æ–∑–¥–∞–µ–º SlidingArea –¥–ª—è –ø–æ–ª–æ—Å—ã –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
            var slidingArea = new GameObject("SlidingArea", typeof(RectTransform));
            slidingArea.transform.SetParent(scrollbar.transform, false);
            var slidingAreaRT = slidingArea.GetComponent<RectTransform>();
            slidingAreaRT.anchorMin = Vector2.zero;
            slidingAreaRT.anchorMax = Vector2.one;
            slidingAreaRT.sizeDelta = new Vector2(-10, -10);
            
            // –°–æ–∑–¥–∞–µ–º Handle –¥–ª—è –ø–æ–ª–æ—Å—ã –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
            var handle = new GameObject("Handle", typeof(Image));
            handle.transform.SetParent(slidingArea.transform, false);
            handle.GetComponent<Image>().color = new Color(0.7f, 0.7f, 0.7f, 0.7f);
            var handleRT = handle.GetComponent<RectTransform>();
            handleRT.anchorMin = Vector2.zero;
            handleRT.anchorMax = Vector2.one;
            handleRT.sizeDelta = Vector2.zero;
            
            // –°–≤—è–∑—ã–≤–∞–µ–º Scrollbar —Å Handle
            scrollbarComp.targetGraphic = handle.GetComponent<Image>();
            scrollbarComp.handleRect = handleRT;
            
            // –°–≤—è–∑—ã–≤–∞–µ–º ScrollRect —Å Scrollbar
            scrollRect.verticalScrollbar = scrollbarComp;
            
            // –û—Ç–∫–ª—é—á–∞–µ–º —à–∞–±–ª–æ–Ω
            template.SetActive(false);
            
            return go;
        }
        
        private static GameObject CreateButton(Transform parent, string name, string text, Color? bgColor = null)
        {
            var go = new GameObject(name, typeof(Image), typeof(Button), typeof(LayoutElement));
            go.transform.SetParent(parent, false);
            
            var image = go.GetComponent<Image>();
            image.color = bgColor ?? ButtonBgColor;
            
            var button = go.GetComponent<Button>();
            button.targetGraphic = image;
            
            var textGo = CreateText(go.transform, "Text", text, BodyFontSize, FontStyles.Bold, PrimaryTextColor);
            var textRt = textGo.GetComponent<RectTransform>();
            textRt.anchorMin = Vector2.zero;
            textRt.anchorMax = Vector2.one;
            textRt.offsetMin = Vector2.zero;
            textRt.offsetMax = Vector2.zero;
            textGo.GetComponent<TextMeshProUGUI>().alignment = TextAlignmentOptions.Center;
            
            return go;
        }
        
        private static GameObject CreatePopupPanel(Transform parent)
        {
            var go = new GameObject("PopupPanel", typeof(CanvasGroup));
            go.transform.SetParent(parent, false);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
            var bgImage = go.AddComponent<Image>();
            bgImage.color = new Color(0, 0, 0, 0.5f);
            
            var rt = go.GetComponent<RectTransform>();
            rt.anchorMin = Vector2.zero;
            rt.anchorMax = Vector2.one;
            rt.offsetMin = Vector2.zero;
            rt.offsetMax = Vector2.zero;
            
            // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–∞–Ω–µ–ª—å
            var content = new GameObject("Content", typeof(RectTransform), typeof(Image));
            content.transform.SetParent(go.transform, false);
            content.GetComponent<Image>().color = PanelBgColor;
            
            var contentRT = content.GetComponent<RectTransform>();
            contentRT.anchorMin = new Vector2(0.5f, 0.5f);
            contentRT.anchorMax = new Vector2(0.5f, 0.5f);
            contentRT.sizeDelta = new Vector2(400, 150);
            
            // –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            var message = CreateText(content.transform, "Message", "–°–æ–æ–±—â–µ–Ω–∏–µ", BodyFontSize, FontStyles.Normal, PrimaryTextColor);
            var messageRT = message.GetComponent<RectTransform>();
            messageRT.anchorMin = Vector2.zero;
            messageRT.anchorMax = Vector2.one;
            messageRT.offsetMin = new Vector2(PADDING, PADDING);
            messageRT.offsetMax = new Vector2(-PADDING, -PADDING);
            message.GetComponent<TextMeshProUGUI>().alignment = TextAlignmentOptions.Center;
            
            go.SetActive(false);
            return go;
        }
        
        private static GameObject CreateText(Transform parent, string name, string content, int fontSize, FontStyles style, Color color)
        {
            var go = new GameObject(name, typeof(TextMeshProUGUI));
            go.transform.SetParent(parent, false);
            var textMesh = go.GetComponent<TextMeshProUGUI>();
            textMesh.text = content;
            textMesh.fontSize = fontSize;
            textMesh.fontStyle = style;
            textMesh.color = color;
            textMesh.alignment = TextAlignmentOptions.Left;
            textMesh.enableWordWrapping = true;
            return go;
        }
        #endregion
        
        #region Helper Methods
        private static void SavePanelAsPrefab(GameObject panelObject)
        {
            if (!AssetDatabase.IsValidFolder(PREFAB_DIRECTORY))
            {
                // Create the directory if it doesn't exist
                if (!AssetDatabase.IsValidFolder("Assets/Prefabs"))
                {
                    AssetDatabase.CreateFolder("Assets", "Prefabs");
                }
                AssetDatabase.CreateFolder("Assets/Prefabs", "UI");
            }

            string prefabPath = $"{PREFAB_DIRECTORY}/{PREFAB_NAME}";
            
            // Delete existing prefab to avoid conflicts
            AssetDatabase.DeleteAsset(prefabPath);

            GameObject prefab = PrefabUtility.SaveAsPrefabAssetAndConnect(panelObject, prefabPath, InteractionMode.UserAction);
            
            if (prefab != null)
            {
                Debug.Log($"üéâ –ü—Ä–µ—Ñ–∞–± –ø–∞–Ω–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {prefabPath}", prefab);
                Selection.activeObject = prefab;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–¥–µ–ª–∞—Ç—å –∞–¥—Ä–µ—Å–∞–±–µ–ª—å–Ω—ã–º
                if (EditorUtility.DisplayDialog("Addressable Asset", 
                    "–°–¥–µ–ª–∞—Ç—å –ø—Ä–µ—Ñ–∞–± –ø–∞–Ω–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–¥—Ä–µ—Å–∞–±–µ–ª—å–Ω—ã–º –∞—Å—Å–µ—Ç–æ–º?\n\n" +
                    "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ AssetAddresses.SettingsPanel", 
                    "–î–∞, —Å–¥–µ–ª–∞—Ç—å –∞–¥—Ä–µ—Å–∞–±–µ–ª—å–Ω—ã–º", "–ù–µ—Ç"))
                {
                    Debug.Log("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –∞–¥—Ä–µ—Å–∞–±–µ–ª—å–Ω—ã–µ –∞—Å—Å–µ—Ç—ã...");
                    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∞–¥—Ä–µ—Å–∞–±–µ–ª—å–Ω—ã–µ –∞—Å—Å–µ—Ç—ã
                    // –ù–æ —ç—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:
                    Debug.Log("–ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∞—Å—Å–µ—Ç –∞–¥—Ä–µ—Å–∞–±–µ–ª—å–Ω—ã–º, –æ—Ç–∫—Ä–æ–π—Ç–µ –æ–∫–Ω–æ Addressables –∏ –¥–æ–±–∞–≤—å—Ç–µ –ø—Ä–µ—Ñ–∞–± –≤—Ä—É—á–Ω—É—é —Å –∫–ª—é—á–æ–º: UIPanel_Settings");
                }
            }
            else
            {
                Debug.LogError($"[Generator] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ—Ñ–∞–± –¥–ª—è '{panelObject.name}'.");
            }
        }
        
        private static void SetPrivateField<T>(object obj, string fieldName, T value) where T : class
        {
            var field = obj.GetType().GetField(fieldName, BindingFlags.NonPublic | BindingFlags.Instance);
            if (field != null)
            {
                if (value == null)
                {
                    Debug.LogError($"[Generator] –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏—Å–≤–æ–∏—Ç—å null –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è '{fieldName}' –≤ '{obj.GetType().Name}'. –í–æ–∑–º–æ–∂–Ω–æ, UI —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω.");
                    return;
                }
                field.SetValue(obj, value);
            }
            else
            {
                Debug.LogWarning($"[Generator] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –ø–æ–ª–µ '{fieldName}' –≤ '{obj.GetType().Name}'. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∏–º–µ–µ—Ç –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä [SerializeField].");
            }
        }
        #endregion
    }
}