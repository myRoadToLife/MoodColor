using Firebase.Auth;
using Firebase.Extensions;
using Firebase.Firestore;
using TMPro;
using UnityEngine;
using App.Develop.CommonServices.SceneManagement;
using App.Develop.DI;

namespace App.Develop.AppServices.Settings
{
    public class AccountSettingsManager : MonoBehaviour, IInjectable
    {
        [Header("UI")]
        [SerializeField] private GameObject _popupPanel;

        [SerializeField] private TMP_Text _popupText;

        [Header("Delete Confirmation")]
        [SerializeField] private GameObject _confirmDeletePanel;

        [SerializeField] private TMP_InputField _passwordConfirmInput;

        private SceneSwitcher _sceneSwitcher;
        private FirebaseAuth _auth;
        private FirebaseFirestore _db;

        public void Inject(DIContainer container)
        {
            _sceneSwitcher = container.Resolve<SceneSwitcher>();
            _auth = FirebaseAuth.DefaultInstance;
            _db = FirebaseFirestore.DefaultInstance;

            _confirmDeletePanel.SetActive(false); // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∫—Ä—ã—Ç–∞
        }

        public void Logout()
        {
            _auth.SignOut();
            ShowPopup("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.");

            _sceneSwitcher.ProcessSwitchSceneFor(
                new OutputPersonalAreaScreenArgs(new AuthSceneInputArgs()));
        }

        public void ShowDeleteConfirmation()
        {
            _confirmDeletePanel.SetActive(true);
        }

        public void CancelDelete()
        {
            _confirmDeletePanel.SetActive(false);
        }

        public void ConfirmDelete()
        {
            Debug.Log("üîé –ù–∞—á–∞–ª–æ ConfirmDelete");

            if (_passwordConfirmInput == null)
            {
                Debug.LogError("‚ùå _passwordConfirmInput –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω!");
                return;
            }

            string password = _passwordConfirmInput.text.Trim();
            Debug.Log($"üîê –í–≤–µ–¥—ë–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: '{password}'");

            if (string.IsNullOrEmpty(password))
            {
                ShowPopup("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.");
                Debug.LogWarning("‚ö†Ô∏è –ü–∞—Ä–æ–ª—å –ø—É—Å—Ç–æ–π.");
                return;
            }

            if (_auth == null)
            {
                Debug.LogError("‚ùå _auth (FirebaseAuth) –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!");
                return;
            }

            FirebaseUser user = _auth.CurrentUser;

            if (user == null)
            {
                ShowPopup("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤—Ö–æ–¥.");
                Debug.LogError("‚ùå CurrentUser == null");
                return;
            }

            string email = user.Email;
            Debug.Log($"üìß Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {email}");

            var credential = EmailAuthProvider.GetCredential(email, password);

            Debug.Log("üîÅ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...");

            user.ReauthenticateAsync(credential).ContinueWithOnMainThread(reAuthTask =>
            {
                if (!reAuthTask.IsCompletedSuccessfully)
                {
                    ShowPopup("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.");
                    Debug.LogError("‚ùå Reauth failed: " + reAuthTask.Exception?.Message);
                    return;
                }

                Debug.Log("‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞. –£–¥–∞–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ Firestore...");

                _db.Collection("users").Document(user.UserId)
                    .DeleteAsync().ContinueWithOnMainThread(docTask =>
                    {
                        if (!docTask.IsCompletedSuccessfully)
                        {
                            Debug.LogWarning("‚ö†Ô∏è Firestore delete failed: " + docTask.Exception?.Message);
                        }

                        Debug.Log("üóë –£–¥–∞–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...");

                        user.DeleteAsync().ContinueWithOnMainThread(deleteTask =>
                        {
                            if (deleteTask.IsCompletedSuccessfully)
                            {
                                ShowPopup("–ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª—ë–Ω.");
                                Debug.Log("‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.");

                                _sceneSwitcher.ProcessSwitchSceneFor(
                                    new OutputPersonalAreaScreenArgs(new AuthSceneInputArgs()));
                            }
                            else
                            {
                                ShowPopup("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.");
                                Debug.LogError("‚ùå Delete failed: " + deleteTask.Exception?.Message);
                            }
                        });
                    });
            });
        }


        private void ShowPopup(string message)
        {
            _popupPanel.SetActive(true);
            _popupText.text = message;
            CancelInvoke(nameof(HidePopup));
            Invoke(nameof(HidePopup), 3f);
        }

        private void HidePopup()
        {
            _popupPanel.SetActive(false);
        }
    }
}
