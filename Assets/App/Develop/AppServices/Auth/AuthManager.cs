using App.Develop.CommonServices.SceneManagement;
using App.Develop.DI;
using UnityEngine;

namespace App.Develop.AppServices.Auth
{
    public class AuthManager : MonoBehaviour, IInjectable
    {
        [SerializeField] private AuthUIController _uiController;

        private AuthService _authService;
        private UserProfileService _profileService;
        private CredentialStorage _credentialStorage;
        private ValidationService _validationService;
        private SceneSwitcher _sceneSwitcher;

        public void Inject(DIContainer container)
        {
            _sceneSwitcher = container.Resolve<SceneSwitcher>();

            _authService = new AuthService();
            _profileService = new UserProfileService();
            _credentialStorage = new CredentialStorage("UltraSecretKey!üî•");
            _validationService = new ValidationService();

            _uiController.Initialize(this);
            _uiController.ShowAuthPanel();

            _uiController.LoadSavedCredentials(_credentialStorage.GetSavedEmail(),
                _credentialStorage.GetSavedPassword(),
                _credentialStorage.IsRememberMeEnabled());
        }

        public void RegisterUser(string email, string password, bool rememberMe)
        {
            if (!_validationService.IsValidEmail(email))
            {
                _uiController.ShowPopup("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email");
                return;
            }

            if (!_validationService.IsValidPassword(password))
            {
                _uiController.ShowPopup("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 8--12 —Å–∏–º–≤–æ–ª–æ–≤, —Ü–∏—Ñ—Ä—ã, —Å—Ç—Ä–æ—á–Ω—ã–µ –∏ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã");
                return;
            }

            _authService.RegisterUser(email, password,
                onSuccess: () =>
                {
                    _credentialStorage.SaveCredentials(email, password, rememberMe);
                    _authService.SendEmailVerification();
                    _uiController.ShowPopup("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ email.");
                    _uiController.ShowEmailVerificationPanel();
                },
                onError: (errorMessage) => { _uiController.ShowPopup("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: " + errorMessage); });
        }

        public void LoginUser(string email, string password, bool rememberMe)
        {
            if (!_validationService.IsValidEmail(email))
            {
                _uiController.ShowPopup("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email");
                return;
            }

            _authService.LoginUser(email, password,
                onSuccess: (user) =>
                {
                    _credentialStorage.SaveCredentials(email, password, rememberMe);

                    if (!user.IsEmailVerified)
                    {
                        _uiController.ShowPopup("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ email –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º. –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ.");
                        _authService.SendEmailVerification();
                        _uiController.ShowEmailVerificationPanel();
                        return;
                    }

                    CheckUserProfileFilled(user.UserId);
                },
                onError: (errorMessage) => { _uiController.ShowPopup("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: " + errorMessage); });
        }

        public void CheckEmailVerification()
        {
            _authService.CheckEmailVerified(
                onVerified: () =>
                {
                    _uiController.ShowPopup("Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!");
                    _uiController.ShowProfilePanel();
                },
                onNotVerified: () => { _uiController.ShowPopup("Email –ø–æ–∫–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω."); });
        }

        private void CheckUserProfileFilled(string uid)
        {
            _profileService.CheckUserProfileFilled(uid,
                onProfileIncomplete: () =>
                {
                    _uiController.ShowPopup("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å.");
                    _uiController.ShowProfilePanel();
                },
                onProfileComplete: () =>
                {
                    _uiController.ShowPopup("–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!");
                    _sceneSwitcher.ProcessSwitchSceneFor(new OutputAuthSceneArgs(new PersonalAreaInputArgs()));
                });
        }

        public void SendEmailVerification()
        {
            _authService.SendEmailVerification(
                onSuccess: () => { _uiController.ShowPopup("–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É."); },
                onError: () => { _uiController.ShowPopup("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞."); });
        }

        public void ClearStoredCredentials()
        {
            _credentialStorage.ClearStoredCredentials();
            _uiController.ClearCredentialFields();
        }
    }
}
