// Assets/App/Develop/AppServices/Firebase/Database/Services/DatabaseService.cs

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using App.Develop.AppServices.Firebase.Database.Models;
using App.Develop.CommonServices.Emotion;
using Firebase.Database;
using Newtonsoft.Json;
using UnityEngine;

namespace App.Develop.AppServices.Firebase.Database.Services
{
    public class DatabaseService : IDisposable
    {
        private readonly DatabaseReference _database;
        private string _userId;
        private readonly List<DatabaseReference> _activeListeners = new List<DatabaseReference>();

        private readonly Dictionary<DatabaseReference, EventHandler<ValueChangedEventArgs>> _eventHandlers =
            new Dictionary<DatabaseReference, EventHandler<ValueChangedEventArgs>>();

        public DatabaseService(DatabaseReference database, string userId = null)
        {
            _database = database ?? throw new ArgumentNullException(nameof(database));
            _userId = userId;
        }

        // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        public void UpdateUserId(string userId)
        {
            _userId = userId;
            Debug.Log($"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ DatabaseService –æ–±–Ω–æ–≤–ª–µ–Ω: {userId}");
        }

        private bool CheckAuthentication()
        {
            if (string.IsNullOrEmpty(_userId))
            {
                Debug.LogWarning("‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
                return false;
            }

            return true;
        }

        public async Task CreateNewUser(string userId, string email)
        {
            try
            {
                var userSnapshot = await _database.Child("users").Child(userId).GetValueAsync();

                if (userSnapshot.Exists)
                {
                    Debug.LogWarning($"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {email} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
                    return;
                }

                var userData = new Dictionary<string, object>
                {
                    ["profile"] = new Dictionary<string, object>
                    {
                        ["email"] = email,
                        ["createdAt"] = ServerValue.Timestamp,
                        ["lastActive"] = ServerValue.Timestamp,
                        ["totalPoints"] = 0,
                        ["settings"] = new Dictionary<string, object>
                        {
                            ["notifications"] = true,
                            ["theme"] = "default",
                            ["sound"] = true
                        }
                    }
                };

                // –°–æ–∑–¥–∞–µ–º –±–∞–Ω–æ—á–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —ç–º–æ—Ü–∏–π
                var jars = new Dictionary<string, object>();

                foreach (var emotionType in Enum.GetNames(typeof(EmotionTypes)))
                {
                    jars[emotionType.ToLower()] = new Dictionary<string, object>
                    {
                        ["type"] = emotionType,
                        ["level"] = 1,
                        ["capacity"] = 100,
                        ["currentAmount"] = 0,
                        ["customization"] = new Dictionary<string, object>
                        {
                            ["color"] = "default",
                            ["pattern"] = "default",
                            ["effects"] = new List<string>()
                        }
                    };
                }

                userData["jars"] = jars;

                await _database.Child("users").Child(userId).UpdateChildrenAsync(userData);
                Debug.Log($"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {email} —Å–æ–∑–¥–∞–Ω");
            }
            catch (Exception ex)
            {
                Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {ex.Message}");
                throw;
            }
        }

        public async Task<UserProfile> GetUserProfile(string userId = null)
        {
            string targetUserId = userId ?? _userId;

            if (string.IsNullOrEmpty(targetUserId))
            {
                Debug.LogWarning("‚ö†Ô∏è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è");
                return null;
            }

            try
            {
                var snapshot = await _database.Child("users").Child(targetUserId).Child("profile").GetValueAsync();

                if (snapshot.Exists)
                {
                    var json = JsonConvert.SerializeObject(snapshot.Value);
                    return JsonConvert.DeserializeObject<UserProfile>(json);
                }

                return null;
            }
            catch (Exception ex)
            {
                Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {ex.Message}");
                throw;
            }
        }

        public async Task UpdateUserData(Dictionary<string, object> updates)
        {
            if (!CheckAuthentication())
            {
                throw new InvalidOperationException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
            }

            try
            {
                await _database.Child("users").Child(_userId).UpdateChildrenAsync(updates);
                Debug.Log("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã");
            }
            catch (Exception ex)
            {
                Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {ex.Message}");
                throw;
            }
        }

        public void ListenToRegionEmotions(string regionId, Action<Dictionary<string, int>> onUpdate)
        {
            if (string.IsNullOrEmpty(regionId))
            {
                Debug.LogWarning("‚ö†Ô∏è ID —Ä–µ–≥–∏–æ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
                return;
            }

            var reference = _database.Child("regions").Child(regionId).Child("emotions");
            _activeListeners.Add(reference);

            // –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è
            EventHandler<ValueChangedEventArgs> handler = (sender, args) =>
            {
                if (args?.Snapshot == null || !args.Snapshot.Exists) return;

                try
                {
                    var emotions = new Dictionary<string, int>();

                    foreach (var child in args.Snapshot.Children)
                    {
                        emotions[child.Key] = Convert.ToInt32(child.Value);
                    }

                    onUpdate?.Invoke(emotions);
                }
                catch (Exception ex)
                {
                    Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —ç–º–æ—Ü–∏–π: {ex}");
                }
            };

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            _eventHandlers[reference] = handler;

            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ
            reference.ValueChanged += handler;
        }

        public void ListenToJars(Action<Dictionary<string, JarData>> onUpdate)
        {
            if (!CheckAuthentication()) return;

            var reference = _database.Child("users").Child(_userId).Child("jars");
            _activeListeners.Add(reference);

            // –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è
            EventHandler<ValueChangedEventArgs> handler = (sender, args) =>
            {
                if (args?.Snapshot == null || !args.Snapshot.Exists) return;

                try
                {
                    var json = JsonConvert.SerializeObject(args.Snapshot.Value);
                    var jars = JsonConvert.DeserializeObject<Dictionary<string, JarData>>(json);
                    onUpdate?.Invoke(jars);
                }
                catch (Exception ex)
                {
                    Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –±–∞–Ω–æ–∫: {ex}");
                }
            };

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            _eventHandlers[reference] = handler;

            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ
            reference.ValueChanged += handler;
        }

        public void ListenToUserProfile(Action<UserProfile> onUpdate)
        {
            if (!CheckAuthentication()) return;

            var reference = _database.Child("users").Child(_userId).Child("profile");
            _activeListeners.Add(reference);

            // –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è
            EventHandler<ValueChangedEventArgs> handler = (sender, args) =>
            {
                if (args?.Snapshot == null || !args.Snapshot.Exists) return;

                try
                {
                    var json = JsonConvert.SerializeObject(args.Snapshot.Value);
                    var profile = JsonConvert.DeserializeObject<UserProfile>(json);
                    onUpdate?.Invoke(profile);
                }
                catch (Exception ex)
                {
                    Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è: {ex}");
                }
            };

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            _eventHandlers[reference] = handler;

            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ
            reference.ValueChanged += handler;
        }

        public void ListenToUserEmotions(Action<Dictionary<string, EmotionData>> onUpdate)
        {
            if (!CheckAuthentication()) return;

            var reference = _database.Child("users").Child(_userId).Child("emotions");
            _activeListeners.Add(reference);

            // –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è
            EventHandler<ValueChangedEventArgs> handler = (sender, args) =>
            {
                if (args?.Snapshot == null || !args.Snapshot.Exists) return;

                try
                {
                    var json = JsonConvert.SerializeObject(args.Snapshot.Value);
                    var emotions = JsonConvert.DeserializeObject<Dictionary<string, EmotionData>>(json);
                    onUpdate?.Invoke(emotions);
                }
                catch (Exception ex)
                {
                    Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —ç–º–æ—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {ex}");
                }
            };

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            _eventHandlers[reference] = handler;

            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ
            reference.ValueChanged += handler;
        }

        public async Task AddEmotion(EmotionData emotion)
        {
            if (!CheckAuthentication()) return;

            try
            {
                var emotionId = Guid.NewGuid().ToString();
                await _database.Child("users").Child(_userId).Child("emotions").Child(emotionId).SetValueAsync(emotion);
                Debug.Log($"‚úÖ –≠–º–æ—Ü–∏—è {emotion.Type} –¥–æ–±–∞–≤–ª–µ–Ω–∞");
            }
            catch (Exception ex)
            {
                Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–º–æ—Ü–∏–∏: {ex.Message}");
                throw;
            }
        }

        public async Task UpdateCurrentEmotion(string type, int intensity)
        {
            if (!CheckAuthentication()) return;

            try
            {
                var updates = new Dictionary<string, object>
                {
                    ["currentEmotion/type"] = type,
                    ["currentEmotion/intensity"] = intensity,
                    ["currentEmotion/timestamp"] = ServerValue.Timestamp
                };

                await _database.Child("users").Child(_userId).UpdateChildrenAsync(updates);
                Debug.Log($"‚úÖ –¢–µ–∫—É—â–∞—è —ç–º–æ—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {type}");
            }
            catch (Exception ex)
            {
                Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —ç–º–æ—Ü–∏–∏: {ex.Message}");
                throw;
            }
        }

        public void Dispose()
        {
            try
            {
                // –û–±—Ö–æ–¥–∏–º —Å–ª–æ–≤–∞—Ä—å –∏ –æ—Ç–ø–∏—Å—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                foreach (var pair in _eventHandlers)
                {
                    var reference = pair.Key;
                    var handler = pair.Value;

                    // –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏—è
                    reference.ValueChanged -= handler;
                }

                _eventHandlers.Clear();
                _activeListeners.Clear();
                Debug.Log("‚úÖ DatabaseService: –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —É–¥–∞–ª–µ–Ω—ã");
            }
            catch (Exception ex)
            {
                Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ DatabaseService: {ex.Message}");
            }
        }
    }
}
