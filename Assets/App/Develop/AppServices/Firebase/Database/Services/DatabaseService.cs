// Assets/App/Develop/AppServices/Firebase/Database/Services/DatabaseService.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using App.Develop.AppServices.Firebase.Database.Models;
using App.Develop.CommonServices.DataManagement.DataProviders;
using App.Develop.CommonServices.Emotion; // –£–±–µ–¥–∏—Å—å, —á—Ç–æ EmotionTypes –∑–¥–µ—Å—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
using Firebase.Database;
using Newtonsoft.Json; // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
using UnityEngine;
using UserProfile = App.Develop.AppServices.Firebase.Database.Models.UserProfile;


namespace App.Develop.AppServices.Firebase.Database.Services
{
    public class DatabaseService : IDisposable
    {
        private readonly DatabaseReference _database;
        private string _userId;
        private readonly List<DatabaseReference> _activeListeners = new List<DatabaseReference>();

        // –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Ç–ø–∏—Å–∫–∏
        private readonly Dictionary<DatabaseReference, EventHandler<ValueChangedEventArgs>> _eventHandlers =
            new Dictionary<DatabaseReference, EventHandler<ValueChangedEventArgs>>();

        public DatabaseService(DatabaseReference database, string userId = null)
        {
            _database = database ?? throw new ArgumentNullException(nameof(database));
            _userId = userId;
        }

        // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        public void UpdateUserId(string userId)
        {
            _userId = userId;
            Debug.Log($"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ DatabaseService –æ–±–Ω–æ–≤–ª–µ–Ω: {userId}");
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞, –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ _userId)
        private bool CheckAuthentication()
        {
            if (string.IsNullOrEmpty(_userId))
            {
                Debug.LogWarning("‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
                return false;
            }

            return true;
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        public async Task CreateNewUser(string userId, string email)
        {
            try
            {
                var userRef = _database.Child("users").Child(userId);
                var userSnapshot = await userRef.GetValueAsync();

                if (userSnapshot.Exists)
                {
                    Debug.LogWarning($"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {email} (ID: {userId}) —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
                    return;
                }

                // --- –ü—Ä–æ—Ñ–∏–ª—å ---
                var settings = new UserSettings
                {
                    Notifications = true,
                    Theme = "default",
                    Sound = true
                };

                var profileData = new Dictionary<string, object>
                {
                    ["email"] = email,
                    ["createdAt"] = ServerValue.Timestamp,
                    ["lastActive"] = ServerValue.Timestamp,
                    ["totalPoints"] = 0,
                    ["settings"] = settings.ToDictionary()
                };

                // --- –ë–∞–Ω–æ—á–∫–∏ ---
                var jarsData = new Dictionary<string, object>();

                foreach (var emotionType in Enum.GetNames(typeof(EmotionTypes)))
                {
                    string key = emotionType.ToLower();

                    var jar = new JarData
                    {
                        Type = emotionType,
                        Level = 1,
                        Capacity = 100,
                        CurrentAmount = 0,
                        Customization = new JarCustomization()
                    };

                    jarsData[key] = jar.ToDictionary();
                }

                // --- –§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ---
                var userData = new Dictionary<string, object>
                {
                    ["profile"] = profileData,
                    ["jars"] = jarsData
                };

                await userRef.UpdateChildrenAsync(userData);
                Debug.Log($"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {email} (ID: {userId}) —Å–æ–∑–¥–∞–Ω");
            }
            catch (Exception ex)
            {
                Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: {userId}): {ex.Message}\n{ex.StackTrace}");
                throw;
            }
        }


        // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        public async Task<UserProfile> GetUserProfile(string userId = null)
        {
            string targetUserId = userId ?? _userId; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π ID –∏–ª–∏ ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            if (string.IsNullOrEmpty(targetUserId))
            {
                Debug.LogWarning("‚ö†Ô∏è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è");
                return null;
            }

            try
            {
                var snapshot = await _database.Child("users").Child(targetUserId).Child("profile").GetValueAsync();

                if (snapshot.Exists && snapshot.Value != null)
                {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Newtonsoft.Json –¥–ª—è –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è/JSON
                    var json = JsonConvert.SerializeObject(snapshot.Value);
                    return JsonConvert.DeserializeObject<UserProfile>(json);
                }

                Debug.LogWarning($"–ü—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {targetUserId} –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                return null;
            }
            catch (Exception ex)
            {
                Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è (ID: {targetUserId}): {ex.Message}\n{ex.StackTrace}");
                throw;
            }
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        public async Task UpdateUserData(Dictionary<string, object> updates)
        {
            if (!CheckAuthentication())
            {
                throw new InvalidOperationException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö");
            }

            try
            {
                await _database.Child("users").Child(_userId).UpdateChildrenAsync(updates);
                Debug.Log($"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {_userId} –æ–±–Ω–æ–≤–ª–µ–Ω—ã.");
            }
            catch (Exception ex)
            {
                Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {_userId}: {ex.Message}\n{ex.StackTrace}");
                throw;
            }
        }

        // --- –ú–µ—Ç–æ–¥—ã –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è (Listeners) ---

        // –ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è ValueChanged
        private void SubscribeToData <T>(DatabaseReference reference, Action<T> onUpdate)
        {
            if (_eventHandlers.ContainsKey(reference))
            {
                Debug.LogWarning($"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {reference.Key}");
                return; // –£–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã
            }

            _activeListeners.Add(reference);

            EventHandler<ValueChangedEventArgs> handler = (sender, args) =>
            {
                if (args.DatabaseError != null)
                {
                    Debug.LogError($"–û—à–∏–±–∫–∞ Firebase –ø—Ä–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–∏ {reference.Key}: {args.DatabaseError.Message}");
                    return;
                }

                if (args.Snapshot?.Exists == true && args.Snapshot.Value != null)
                {
                    try
                    {
                        // –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é Newtonsoft.Json
                        var json = JsonConvert.SerializeObject(args.Snapshot.Value);
                        var data = JsonConvert.DeserializeObject<T>(json);
                        onUpdate?.Invoke(data);
                    }
                    catch (Exception ex)
                    {
                        Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {reference.Key}: {ex.Message}\n{ex.StackTrace}");
                        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ—Ç–ø–∏—Å–∫–∏ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
                    }
                }
                else
                {
                    Debug.Log($"–î–∞–Ω–Ω—ã–µ –¥–ª—è {reference.Key} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –ø—É—Å—Ç—ã.");
                    // –í—ã–∑—ã–≤–∞–µ–º onUpdate —Å default(T), —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–ª—É—á–∞–π –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥–∞–Ω–Ω—ã—Ö
                    onUpdate?.Invoke(default(T));
                }
            };

            _eventHandlers[reference] = handler; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            reference.ValueChanged += handler; // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è
            Debug.Log($"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {reference.Key} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.");
        }

        // –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —ç–º–æ—Ü–∏–π –≤ —Ä–µ–≥–∏–æ–Ω–µ
        public void ListenToRegionEmotions(string regionId, Action<Dictionary<string, int>> onUpdate)
        {
            if (string.IsNullOrEmpty(regionId))
            {
                Debug.LogWarning("‚ö†Ô∏è ID —Ä–µ–≥–∏–æ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –¥–ª—è ListenToRegionEmotions");
                return;
            }

            var reference = _database.Child("regions").Child(regionId).Child("emotions");
            SubscribeToData(reference, onUpdate);
        }

        // –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –±–∞–Ω–æ—á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        public void ListenToJars(Action<Dictionary<string, JarData>> onUpdate)
        {
            if (!CheckAuthentication()) return;
            var reference = _database.Child("users").Child(_userId).Child("jars");
            SubscribeToData(reference, onUpdate);
        }

        // –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        public void ListenToUserProfile(Action<UserProfile> onUpdate)
        {
            if (!CheckAuthentication()) return;
            var reference = _database.Child("users").Child(_userId).Child("profile");
            SubscribeToData(reference, onUpdate);
        }

        // –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —ç–º–æ—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        public void ListenToUserEmotions(Action<Dictionary<string, EmotionData>> onUpdate)
        {
            if (!CheckAuthentication()) return;
            var reference = _database.Child("users").Child(_userId).Child("emotions");
            SubscribeToData(reference, onUpdate);
        }

        // --- –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —ç–º–æ—Ü–∏—è–º–∏ –∏ –±–∞–Ω–æ—á–∫–∞–º–∏ ---

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –æ–± —ç–º–æ—Ü–∏–∏
        public async Task AddEmotion(EmotionData emotion)
        {
            if (!CheckAuthentication()) return;
            if (emotion == null) throw new ArgumentNullException(nameof(emotion));

            try
            {
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID, –µ—Å–ª–∏ –æ–Ω –Ω–µ –∑–∞–¥–∞–Ω
                if (string.IsNullOrEmpty(emotion.Id))
                {
                    // Firebase –º–æ–∂–µ—Ç —Å–∞–º –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–∏ —á–µ—Ä–µ–∑ Push(), –Ω–æ –µ—Å–ª–∏ –Ω—É–∂–µ–Ω Guid:
                    emotion.Id = Guid.NewGuid().ToString();
                    // –í–∞–∂–Ω–æ: –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å Push() –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞ Firebase,
                    // —Ç–æ ID –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ Push() –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤–Ω—É—Ç—Ä–∏ –æ–±—ä–µ–∫—Ç–∞ —É–∂–µ –ø–æ—Å–ª–µ.
                    // –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º Guid.NewGuid().
                }

                // –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –æ–±—ä–µ–∫—Ç –≤ JSON —Å –ø–æ–º–æ—â—å—é Newtonsoft.Json
                string jsonPayload = JsonConvert.SerializeObject(emotion, Formatting.None,
                    new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore }); // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º null –ø–æ–ª—è

                // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID —ç–º–æ—Ü–∏–∏ –∫–∞–∫ –∫–ª—é—á –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º JSON-—Å—Ç—Ä–æ–∫—É
                await _database.Child("users").Child(_userId).Child("emotions").Child(emotion.Id).SetRawJsonValueAsync(jsonPayload);

                Debug.Log($"‚úÖ –≠–º–æ—Ü–∏—è {emotion.Type} (ID: {emotion.Id}) –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {_userId}");
            }
            catch (JsonException jsonEx) // –õ–æ–≤–∏–º –æ—à–∏–±–∫–∏ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            {
                Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ EmotionData –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {_userId}: {jsonEx.Message}\n{jsonEx.StackTrace}");
                throw;
            }
            catch (Exception ex)
            {
                Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–º–æ—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {_userId}: {ex.Message}\n{ex.StackTrace}");
                throw;
            }
        }


        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —ç–º–æ—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        public async Task UpdateCurrentEmotion(string type, float intensity)
        {
            if (!CheckAuthentication()) return;

            try
            {
                var updates = new Dictionary<string, object>
                {
                    ["type"] = type,
                    ["intensity"] = intensity,
                    ["timestamp"] = ServerValue.Timestamp // –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
                };

                // –û–±–Ω–æ–≤–ª—è–µ–º —É–∑–µ–ª currentEmotion —Ü–µ–ª–∏–∫–æ–º
                await _database.Child("users").Child(_userId).Child("currentEmotion").UpdateChildrenAsync(updates);
                Debug.Log($"‚úÖ –¢–µ–∫—É—â–∞—è —ç–º–æ—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {_userId} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {type} ({intensity})");
            }
            catch (Exception ex)
            {
                Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —ç–º–æ—Ü–∏–∏ –¥–ª—è {_userId}: {ex.Message}\n{ex.StackTrace}");
                throw;
            }
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤ –±–∞–Ω–æ—á–∫–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        public async Task UpdateJarAmount(string emotionType, int amountToAdd)
        {
            if (!CheckAuthentication()) return;

            if (string.IsNullOrEmpty(emotionType))
            {
                Debug.LogError("‚ùå –¢–∏–ø —ç–º–æ—Ü–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –¥–ª—è UpdateJarAmount");
                return;
            }

            if (amountToAdd == 0) return;

            var jarRef = _database.Child("users").Child(_userId).Child("jars").Child(emotionType.ToLower());

            try
            {
                await jarRef.RunTransaction(mutableData =>
                {
                    if (mutableData.Value == null)
                    {
                        Debug.LogWarning($"‚ö†Ô∏è –£–∑–µ–ª –±–∞–Ω–æ—á–∫–∏ '{emotionType}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é.");
                        return TransactionResult.Abort();
                    }

                    try
                    {
                        var jarJson = JsonConvert.SerializeObject(mutableData.Value);
                        var jar = JsonConvert.DeserializeObject<JarData>(jarJson);

                        if (jar == null)
                        {
                            Debug.LogError($"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å –±–∞–Ω–æ—á–∫—É '{emotionType}'");
                            return TransactionResult.Abort();
                        }

                        int newAmount = Mathf.Clamp(jar.CurrentAmount + amountToAdd, 0, jar.Capacity);

                        if (newAmount != jar.CurrentAmount)
                        {
                            mutableData.Child("currentAmount").Value = newAmount;
                            Debug.Log($"üîÑ {emotionType}: {jar.CurrentAmount} ‚û° {newAmount}");
                            return TransactionResult.Success(mutableData);
                        }
                        else
                        {
                            Debug.Log($"‚ÑπÔ∏è {emotionType}: –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å ({jar.CurrentAmount})");
                            return TransactionResult.Abort();
                        }
                    }
                    catch (Exception ex)
                    {
                        Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {emotionType}: {ex.Message}");
                        return TransactionResult.Abort();
                    }
                });

                Debug.Log($"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è –±–∞–Ω–æ—á–∫–∏ '{emotionType}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞.");
            }
            catch (Exception ex)
            {
                Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±–∞–Ω–æ—á–∫–∏ '{emotionType}': {ex.Message}\n{ex.StackTrace}");
                throw;
            }
        }


        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        public async Task AddPointsToProfile(int pointsToAdd)
        {
            if (!CheckAuthentication()) return;

            if (pointsToAdd <= 0)
            {
                Debug.LogWarning("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å 0 –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤.");
                return;
            }

            var pointsRef = _database.Child("users").Child(_userId).Child("profile").Child("totalPoints");

            try
            {
                await pointsRef.RunTransaction(mutableData =>
                {
                    long currentPoints = 0;

                    if (mutableData.Value != null && long.TryParse(mutableData.Value.ToString(), out long parsedPoints))
                    {
                        currentPoints = parsedPoints;
                    }

                    long newTotal = currentPoints + pointsToAdd;
                    mutableData.Value = newTotal;

                    Debug.Log($"üîÑ –û—á–∫–∏: {currentPoints} ‚û° {newTotal}");
                    return TransactionResult.Success(mutableData);
                });

                Debug.Log($"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {_userId} –Ω–∞—á–∏—Å–ª–µ–Ω–æ {pointsToAdd} –æ—á–∫–æ–≤.");
            }
            catch (Exception ex)
            {
                Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –æ—á–∫–æ–≤: {ex.Message}\n{ex.StackTrace}");
                throw;
            }
        }

        // –ü–æ–ª—É—á–∞–µ—Ç –±–∞–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        public async Task<Dictionary<string, JarData>> GetUserJars()
        {
            try
            {
                string userId = _userId;
                if (string.IsNullOrEmpty(userId))
                {
                    Debug.LogError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
                    return null;
                }

                var snapshot = await _database.Child("users").Child(userId).Child("jars").GetValueAsync();

                if (!snapshot.Exists)
                {
                    Debug.Log("–ë–∞–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞—ë–º –∏—Ö");
                    return await CreateDefaultJars();
                }

                var jarData = new Dictionary<string, JarData>();
                foreach (var child in snapshot.Children)
                {
                    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥–æ–π –±–∞–Ω–∫–∏
                    var jar = JsonConvert.DeserializeObject<JarData>(child.GetRawJsonValue());
                    if (jar != null)
                    {
                        jarData[child.Key] = jar;
                    }
                }

                return jarData;
            }
            catch (Exception ex)
            {
                Debug.LogError($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–Ω–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {ex.Message}");
                throw;
            }
        }

        // –°–æ–∑–¥–∞–µ—Ç –±–∞–Ω–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        private async Task<Dictionary<string, JarData>> CreateDefaultJars()
        {
            try
            {
                string userId = _userId;
                if (string.IsNullOrEmpty(userId))
                {
                    Debug.LogError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
                    return null;
                }

                var jarData = new Dictionary<string, JarData>();
                
                // –°–æ–∑–¥–∞–µ–º –±–∞–Ω–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —ç–º–æ—Ü–∏–π
                foreach (EmotionTypes type in Enum.GetValues(typeof(EmotionTypes)))
                {
                    var jar = new JarData
                    {
                        Type = type.ToString(),
                        Level = 1,
                        Capacity = 100,
                        CurrentAmount = 0,
                        Customization = new JarCustomization()
                    };

                    jarData[type.ToString()] = jar;
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    await _database.Child("users").Child(userId).Child("jars").Child(type.ToString())
                        .SetRawJsonValueAsync(JsonConvert.SerializeObject(jar));
                }

                return jarData;
            }
            catch (Exception ex)
            {
                Debug.LogError($"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–Ω–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {ex.Message}");
                throw;
            }
        }

        // –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ (–æ—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏–π)
        public void Dispose()
        {
            try
            {
                Debug.Log($"Disposing DatabaseService. –û—Ç–ø–∏—Å–∫–∞ –æ—Ç {_eventHandlers.Count} —Å–ª—É—à–∞—Ç–µ–ª–µ–π...");
                // –û–±—Ö–æ–¥–∏–º –∫–æ–ø–∏—é –∫–ª—é—á–µ–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–ª–æ–≤–∞—Ä—è –≤–æ –≤—Ä–µ–º—è –∏—Ç–µ—Ä–∞—Ü–∏–∏ (—Ö–æ—Ç—è –∑–¥–µ—Å—å —ç—Ç–æ –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ)
                var referencesToUnsubscribe = new List<DatabaseReference>(_eventHandlers.Keys);

                foreach (var reference in referencesToUnsubscribe)
                {
                    if (_eventHandlers.TryGetValue(reference, out var handler))
                    {
                        reference.ValueChanged -= handler; // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è
                        Debug.Log($"–û—Ç–ø–∏—Å–∫–∞ –æ—Ç {reference.Key} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.");
                    }
                }

                _eventHandlers.Clear(); // –û—á–∏—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
                _activeListeners.Clear(); // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
                Debug.Log("‚úÖ DatabaseService: –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —É–¥–∞–ª–µ–Ω—ã –∏ —Ä–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã.");
            }
            catch (Exception ex)
            {
                Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ DatabaseService: {ex.Message}\n{ex.StackTrace}");
            }
        }

        #region Emotion History

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —ç–º–æ—Ü–∏–π
        /// </summary>
        public async Task<List<EmotionHistoryRecord>> GetEmotionHistory(DateTime? startDate = null, DateTime? endDate = null, int limit = 100)
        {
            if (!CheckAuthentication())
            {
                Debug.LogWarning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —ç–º–æ—Ü–∏–π");
                return new List<EmotionHistoryRecord>();
            }

            try
            {
                Query query = _database.Child("users").Child(_userId).Child("emotionHistory").OrderByKey();
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ –Ω–∞—á–∞–ª–∞
                if (startDate.HasValue)
                {
                    var startTimestamp = startDate.Value.ToFileTimeUtc();
                    query = query.StartAt(null, startTimestamp.ToString());
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è
                if (endDate.HasValue)
                {
                    var endTimestamp = endDate.Value.ToFileTimeUtc();
                    query = query.EndAt(null, endTimestamp.ToString());
                }
                
                // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
                query = query.LimitToLast(limit);
                
                var snapshot = await query.GetValueAsync();
                var result = new List<EmotionHistoryRecord>();
                
                if (snapshot.Exists && snapshot.ChildrenCount > 0)
                {
                    foreach (var child in snapshot.Children)
                    {
                        try
                        {
                            var record = JsonConvert.DeserializeObject<EmotionHistoryRecord>(child.GetRawJsonValue());
                            if (record != null)
                            {
                                result.Add(record);
                            }
                        }
                        catch (Exception ex)
                        {
                            Debug.LogError($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏ —ç–º–æ—Ü–∏–π: {ex.Message}");
                        }
                    }
                }
                
                Debug.Log($"–ü–æ–ª—É—á–µ–Ω–æ {result.Count} –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ —ç–º–æ—Ü–∏–π");
                return result;
            }
            catch (Exception ex)
            {
                Debug.LogError($"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —ç–º–æ—Ü–∏–π: {ex.Message}");
                throw;
            }
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —ç–º–æ—Ü–∏–π –ø–æ —Ç–∏–ø—É
        /// </summary>
        public async Task<List<EmotionHistoryRecord>> GetEmotionHistoryByType(string emotionType, DateTime? startDate = null, DateTime? endDate = null, int limit = 100)
        {
            try
            {
                var result = new List<EmotionHistoryRecord>();
                var allRecords = await GetEmotionHistory(startDate, endDate, limit * 2);
                
                // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–∏–ø—É
                var filteredRecords = allRecords.Where(r => r.Type == emotionType).Take(limit).ToList();
                
                Debug.Log($"–ü–æ–ª—É—á–µ–Ω–æ {filteredRecords.Count} –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ —ç–º–æ—Ü–∏–π —Ç–∏–ø–∞ {emotionType}");
                return filteredRecords;
            }
            catch (Exception ex)
            {
                Debug.LogError($"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —ç–º–æ—Ü–∏–π –ø–æ —Ç–∏–ø—É: {ex.Message}");
                throw;
            }
        }

        /// <summary>
        /// –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é —ç–º–æ—Ü–∏–π
        /// </summary>
        public async Task AddEmotionHistoryRecord(EmotionHistoryRecord record)
        {
            if (!CheckAuthentication())
            {
                Debug.LogWarning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é —ç–º–æ—Ü–∏–π");
                return;
            }

            try
            {
                if (record == null)
                {
                    throw new ArgumentNullException(nameof(record), "–ó–∞–ø–∏—Å—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null");
                }
                
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                if (string.IsNullOrEmpty(record.Id))
                {
                    record.Id = Guid.NewGuid().ToString();
                }
                
                var dictionary = record.ToDictionary();
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –≤ Firebase
                await _database.Child("users").Child(_userId).Child("emotionHistory").Child(record.Id)
                    .SetValueAsync(dictionary);
                
                Debug.Log($"–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é —ç–º–æ—Ü–∏–π: {record.Id}, —Ç–∏–ø: {record.Type}");
            }
            catch (Exception ex)
            {
                Debug.LogError($"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é —ç–º–æ—Ü–∏–π: {ex.Message}");
                throw;
            }
        }

        /// <summary>
        /// –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é —ç–º–æ—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–º–æ—Ü–∏–∏ –∏ —Å–æ–±—ã—Ç–∏—è
        /// </summary>
        public async Task AddEmotionHistoryRecord(EmotionData emotion, EmotionEventType eventType)
        {
            if (!CheckAuthentication())
            {
                Debug.LogWarning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é —ç–º–æ—Ü–∏–π");
                return;
            }

            try
            {
                if (emotion == null)
                {
                    throw new ArgumentNullException(nameof(emotion), "–≠–º–æ—Ü–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null");
                }
                
                // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
                var record = new EmotionHistoryRecord(emotion, eventType);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
                await AddEmotionHistoryRecord(record);
            }
            catch (Exception ex)
            {
                Debug.LogError($"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é —ç–º–æ—Ü–∏–π: {ex.Message}");
                throw;
            }
        }

        /// <summary>
        /// –ü–∞–∫–µ—Ç–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏—é
        /// </summary>
        public async Task AddEmotionHistoryBatch(List<EmotionHistoryRecord> records)
        {
            if (!CheckAuthentication())
            {
                Debug.LogWarning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏—é —ç–º–æ—Ü–∏–π");
                return;
            }

            try
            {
                if (records == null || records.Count == 0)
                {
                    return;
                }
                
                var updates = new Dictionary<string, object>();
                
                foreach (var record in records)
                {
                    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                    if (string.IsNullOrEmpty(record.Id))
                    {
                        record.Id = Guid.NewGuid().ToString();
                    }
                    
                    updates[$"users/{_userId}/emotionHistory/{record.Id}"] = record.ToDictionary();
                }
                
                await _database.UpdateChildrenAsync(updates);
                
                Debug.Log($"–î–æ–±–∞–≤–ª–µ–Ω–æ {records.Count} –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏—é —ç–º–æ—Ü–∏–π");
            }
            catch (Exception ex)
            {
                Debug.LogError($"–û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏—é —ç–º–æ—Ü–∏–π: {ex.Message}");
                throw;
            }
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        /// </summary>
        public async Task<List<EmotionHistoryRecord>> GetUnsyncedEmotionRecords(int limit = 100)
        {
            if (!CheckAuthentication())
            {
                Debug.LogWarning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π");
                return new List<EmotionHistoryRecord>();
            }

            try
            {
                var query = _database.Child("users").Child(_userId).Child("emotionHistory")
                    .OrderByChild("syncStatus")
                    .EqualTo(SyncStatus.NotSynced.ToString())
                    .LimitToFirst(limit);
                
                var snapshot = await query.GetValueAsync();
                var result = new List<EmotionHistoryRecord>();
                
                if (snapshot.Exists && snapshot.ChildrenCount > 0)
                {
                    foreach (var child in snapshot.Children)
                    {
                        try
                        {
                            var record = JsonConvert.DeserializeObject<EmotionHistoryRecord>(child.GetRawJsonValue());
                            if (record != null)
                            {
                                result.Add(record);
                            }
                        }
                        catch (Exception ex)
                        {
                            Debug.LogError($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏: {ex.Message}");
                        }
                    }
                }
                
                Debug.Log($"–ü–æ–ª—É—á–µ–Ω–æ {result.Count} –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π");
                return result;
            }
            catch (Exception ex)
            {
                Debug.LogError($"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {ex.Message}");
                throw;
            }
        }

        /// <summary>
        /// –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏
        /// </summary>
        public async Task UpdateEmotionSyncStatus(string recordId, SyncStatus status)
        {
            if (!CheckAuthentication())
            {
                Debug.LogWarning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏");
                return;
            }

            try
            {
                if (string.IsNullOrEmpty(recordId))
                {
                    throw new ArgumentException("ID –∑–∞–ø–∏—Å–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º", nameof(recordId));
                }
                
                await _database.Child("users").Child(_userId).Child("emotionHistory").Child(recordId).Child("syncStatus")
                    .SetValueAsync(status.ToString());
                
                Debug.Log($"–°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏ {recordId} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {status}");
            }
            catch (Exception ex)
            {
                Debug.LogError($"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {ex.Message}");
                throw;
            }
        }

        /// <summary>
        /// –£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        /// </summary>
        public async Task DeleteEmotionHistoryRecord(string recordId)
        {
            if (!CheckAuthentication())
            {
                Debug.LogWarning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏");
                return;
            }

            try
            {
                if (string.IsNullOrEmpty(recordId))
                {
                    throw new ArgumentException("ID –∑–∞–ø–∏—Å–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º", nameof(recordId));
                }
                
                await _database.Child("users").Child(_userId).Child("emotionHistory").Child(recordId).RemoveValueAsync();
                
                Debug.Log($"–ó–∞–ø–∏—Å—å {recordId} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —ç–º–æ—Ü–∏–π");
            }
            catch (Exception ex)
            {
                Debug.LogError($"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —ç–º–æ—Ü–∏–π: {ex.Message}");
                throw;
            }
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —ç–º–æ—Ü–∏—è–º –∑–∞ –ø–µ—Ä–∏–æ–¥
        /// </summary>
        public async Task<Dictionary<string, int>> GetEmotionStatistics(DateTime startDate, DateTime endDate)
        {
            if (!CheckAuthentication())
            {
                Debug.LogWarning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —ç–º–æ—Ü–∏–π");
                return new Dictionary<string, int>();
            }

            try
            {
                var records = await GetEmotionHistory(startDate, endDate, 1000);
                var stats = new Dictionary<string, int>();
                
                foreach (var record in records)
                {
                    if (!string.IsNullOrEmpty(record.Type))
                    {
                        if (stats.ContainsKey(record.Type))
                        {
                            stats[record.Type]++;
                        }
                        else
                        {
                            stats[record.Type] = 1;
                        }
                    }
                }
                
                Debug.Log($"–ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–º–æ—Ü–∏–π —Å {startDate} –ø–æ {endDate}: {stats.Count} —Ç–∏–ø–æ–≤");
                return stats;
            }
            catch (Exception ex)
            {
                Debug.LogError($"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —ç–º–æ—Ü–∏–π: {ex.Message}");
                throw;
            }
        }

        #endregion

        #region Sync Settings

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        /// </summary>
        public async Task<EmotionSyncSettings> GetSyncSettings()
        {
            if (!CheckAuthentication())
            {
                Debug.LogWarning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏");
                return null;
            }

            try
            {
                var snapshot = await _database.Child("users").Child(_userId).Child("syncSettings").GetValueAsync();
                
                if (snapshot.Exists)
                {
                    var settings = JsonConvert.DeserializeObject<EmotionSyncSettings>(snapshot.GetRawJsonValue());
                    Debug.Log("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞");
                    return settings;
                }
                
                // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
                var defaultSettings = new EmotionSyncSettings();
                await UpdateSyncSettings(defaultSettings);
                
                Debug.Log("–°–æ–∑–¥–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏");
                return defaultSettings;
            }
            catch (Exception ex)
            {
                Debug.LogError($"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {ex.Message}");
                throw;
            }
        }

        /// <summary>
        /// –û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        /// </summary>
        public async Task UpdateSyncSettings(EmotionSyncSettings settings)
        {
            if (!CheckAuthentication())
            {
                Debug.LogWarning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏");
                return;
            }

            try
            {
                if (settings == null)
                {
                    throw new ArgumentNullException(nameof(settings), "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å null");
                }
                
                // –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Å–ª–æ–≤–∞—Ä—å
                var json = JsonConvert.SerializeObject(settings);
                var dictionary = JsonConvert.DeserializeObject<Dictionary<string, object>>(json);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ Firebase
                await _database.Child("users").Child(_userId).Child("syncSettings").UpdateChildrenAsync(dictionary);
                
                Debug.Log("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã");
            }
            catch (Exception ex)
            {
                Debug.LogError($"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {ex.Message}");
                throw;
            }
        }

        #endregion

        #region Backup

        /// <summary>
        /// –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        /// </summary>
        public async Task<string> CreateBackup()
        {
            if (!CheckAuthentication())
            {
                Debug.LogWarning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏");
                return null;
            }

            try
            {
                // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                var snapshot = await _database.Child("users").Child(_userId).GetValueAsync();
                
                if (!snapshot.Exists)
                {
                    throw new InvalidOperationException("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
                }
                
                // –°–æ–∑–¥–∞–µ–º ID –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
                string backupId = DateTime.UtcNow.ToString("yyyyMMdd_HHmmss");
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
                await _database.Child("backups").Child(_userId).Child(backupId).SetRawJsonValueAsync(snapshot.GetRawJsonValue());
                
                Debug.Log($"–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backupId}");
                return backupId;
            }
            catch (Exception ex)
            {
                Debug.LogError($"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {ex.Message}");
                throw;
            }
        }

        /// <summary>
        /// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        /// </summary>
        public async Task RestoreFromBackup(string backupId)
        {
            if (!CheckAuthentication())
            {
                Debug.LogWarning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏");
                return;
            }

            try
            {
                if (string.IsNullOrEmpty(backupId))
                {
                    throw new ArgumentException("ID —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º", nameof(backupId));
                }
                
                // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
                var snapshot = await _database.Child("backups").Child(_userId).Child(backupId).GetValueAsync();
                
                if (!snapshot.Exists)
                {
                    throw new InvalidOperationException($"–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è {backupId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
                }
                
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ (–∫—Ä–æ–º–µ profile, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
                var backupData = JsonConvert.DeserializeObject<Dictionary<string, object>>(snapshot.GetRawJsonValue());
                
                // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω—É–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å
                if (backupData.ContainsKey("profile"))
                {
                    backupData.Remove("profile");
                }
                
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                await _database.Child("users").Child(_userId).UpdateChildrenAsync(backupData);
                
                Debug.Log($"–î–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ {backupId}");
            }
            catch (Exception ex)
            {
                Debug.LogError($"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {ex.Message}");
                throw;
            }
        }

        #endregion
    }
}
