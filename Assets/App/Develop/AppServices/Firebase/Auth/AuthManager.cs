// Assets/App/Develop/AppServices/Firebase/Auth/AuthManager.cs

using System;
using App.Develop.AppServices.Auth;
using App.Develop.AppServices.Firebase.Auth.Services;
using App.Develop.AppServices.Firebase.Common.SecureStorage;
using App.Develop.CommonServices.SceneManagement;
using App.Develop.DI;
using UnityEngine;

namespace App.Develop.AppServices.Firebase.Auth
{
    public class AuthManager : MonoBehaviour, IInjectable
    {
        [SerializeField] private AuthUIController _uiController;

        private IAuthService _authService;
        private UserProfileService _profileService;
        private CredentialStorage _credentialStorage;
        private ValidationService _validationService;
        private SceneSwitcher _sceneSwitcher;
        private bool _isProcessing;

        public void Inject(DIContainer container)
        {
            if (container == null)
                throw new ArgumentNullException(nameof(container));

            try
            {
                _sceneSwitcher = container.Resolve<SceneSwitcher>();
                _authService = container.Resolve<IAuthService>();
                _profileService = container.Resolve<UserProfileService>();
                _credentialStorage = container.Resolve<CredentialStorage>();
                _validationService = container.Resolve<ValidationService>();

                if (_uiController == null)
                {
                    Debug.LogError("üî¥ AuthUIController –Ω–µ –ø—Ä–∏—Å–≤–æ–µ–Ω –≤ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–µ!");
                    return;
                }

                InitializeUI();
            }
            catch (Exception ex)
            {
                Debug.LogError($"üî¥ –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AuthManager: {ex}");
            }
        }

        private void InitializeUI()
        {
            _uiController.Initialize(this);
            _uiController.ShowAuthPanel();

            var email = _credentialStorage.GetSavedEmail();
            var password = _credentialStorage.GetSavedPassword();
            var remember = _credentialStorage.IsRememberMeEnabled();
            _uiController.LoadSavedCredentials(email, password, remember);
        }

        public async void RegisterUser(string email, string password, bool rememberMe)
        {
            if (_isProcessing || _uiController == null) return;
            _isProcessing = true;

            try
            {
                if (!_validationService.IsValidEmail(email))
                {
                    _uiController.ShowPopup("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email");
                    return;
                }

                if (!_validationService.IsValidPassword(password))
                {
                    _uiController.ShowPopup("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 8‚Äì12 —Å–∏–º–≤–æ–ª–æ–≤, —Ü–∏—Ñ—Ä—ã, —Å—Ç—Ä–æ—á–Ω—ã–µ –∏ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã");
                    return;
                }

                var result = await _authService.RegisterUser(email, password);

                if (result.success)
                {
                    _credentialStorage.SaveCredentials(email, password, rememberMe);
                    await _authService.ResendVerificationEmail();
                    _uiController.ShowPopup("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ email.");
                    _uiController.ShowEmailVerificationPanel();
                }
                else
                {
                    _uiController.ShowPopup($"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {result.error}");
                }
            }
            catch (Exception ex)
            {
                Debug.LogError($"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {ex}");
                _uiController.ShowPopup("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
            }
            finally
            {
                _isProcessing = false;
            }
        }

        public async void LoginUser(string email, string password, bool rememberMe)
        {
            if (_isProcessing || _uiController == null) return;
            _isProcessing = true;

            try
            {
                if (!_validationService.IsValidEmail(email))
                {
                    _uiController.ShowPopup("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email");
                    return;
                }

                var result = await _authService.LoginUser(email, password);

                if (result.success)
                {
                    _credentialStorage.SaveCredentials(email, password, rememberMe);
                    SecurePlayerPrefs.SetBool("explicit_logout", false);
                    SecurePlayerPrefs.Save();
                    _uiController.ShowPopup("–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!");
                    _sceneSwitcher.ProcessSwitchSceneFor(new OutputAuthSceneArgs(new PersonalAreaInputArgs()));
                }
                else
                {
                    _uiController.ShowPopup($"–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {result.error}");
                }
            }
            catch (Exception ex)
            {
                Debug.LogError($"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: {ex}");
                _uiController.ShowPopup("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ");
            }
            finally
            {
                _isProcessing = false;
            }
        }

        public string GetLastUsedEmail()
        {
            try
            {
                return _credentialStorage.GetLastUsedEmail();
            }
            catch (Exception ex)
            {
                Debug.LogError($"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ email: {ex}");
                return string.Empty;
            }
        }


        public async void CheckEmailVerification()
        {
            if (_isProcessing || _uiController == null) return;
            _isProcessing = true;

            try
            {
                var isVerified = await _authService.IsEmailVerified();

                if (isVerified)
                {
                    _uiController.ShowPopup("Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!");
                    _uiController.ShowProfilePanel();
                }
                else
                {
                    _uiController.ShowPopup("Email –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É.");
                }
            }
            catch (Exception ex)
            {
                Debug.LogError($"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ email: {ex}");
                _uiController.ShowPopup("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ email");
            }
            finally
            {
                _isProcessing = false;
            }
        }

        public async void SendEmailVerification()
        {
            if (_isProcessing || _uiController == null) return;
            _isProcessing = true;

            try
            {
                if (await _authService.ResendVerificationEmail())
                {
                    _uiController.ShowPopup("–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É.");
                }
                else
                {
                    _uiController.ShowPopup("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞.");
                }
            }
            catch (Exception ex)
            {
                Debug.LogError($"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {ex}");
                _uiController.ShowPopup("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞");
            }
            finally
            {
                _isProcessing = false;
            }
        }

        public void ClearStoredCredentials()
        {
            try
            {
                _credentialStorage.ClearStoredCredentials();

                if (_uiController != null)
                {
                    _uiController.ClearCredentialFields();
                }
            }
            catch (Exception ex)
            {
                Debug.LogError($"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {ex}");

                if (_uiController != null)
                {
                    _uiController.ShowPopup("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö");
                }
            }
        }

        private void OnDestroy()
        {
            _authService = null;
            _profileService = null;
            _credentialStorage = null;
            _validationService = null;
            _sceneSwitcher = null;
        }
    }
}
