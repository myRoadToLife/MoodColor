using System;
using System.Collections.Generic;
using App.Develop.Utils.Logging;

namespace App.Develop.Utils.Events
{
    /// <summary>
    /// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —à–∏–Ω–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Å–ª–∞–±–æ —Å–≤—è–∑–∞–Ω–Ω–æ–π –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
    /// –†–µ–∞–ª–∏–∑—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω Observer –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
    /// </summary>
    public class EventBus : IDisposable
    {
        private readonly Dictionary<Type, List<Delegate>> _eventHandlers;
        private bool _isDisposed;

        public EventBus()
        {
            _eventHandlers = new Dictionary<Type, List<Delegate>>();
        }

        /// <summary>
        /// –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
        /// </summary>
        /// <typeparam name="T">–¢–∏–ø —Å–æ–±—ã—Ç–∏—è</typeparam>
        /// <param name="handler">–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è</param>
        public void Subscribe<T>(EventHandler<T> handler) where T : EventArgs
        {
            if (_isDisposed)
            {
                MyLogger.LogWarning("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –≤ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–Ω–æ–º EventBus", MyLogger.LogCategory.Default);
                return;
            }

            var eventType = typeof(T);
            
            if (!_eventHandlers.ContainsKey(eventType))
            {
                _eventHandlers[eventType] = new List<Delegate>();
            }
            
            _eventHandlers[eventType].Add(handler);
            MyLogger.Log($"üîî –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ {typeof(T).Name}", MyLogger.LogCategory.Default);
        }

        /// <summary>
        /// –û—Ç–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
        /// </summary>
        /// <typeparam name="T">–¢–∏–ø —Å–æ–±—ã—Ç–∏—è</typeparam>
        /// <param name="handler">–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è</param>
        public void Unsubscribe<T>(EventHandler<T> handler) where T : EventArgs
        {
            if (_isDisposed) return;

            var eventType = typeof(T);
            
            if (_eventHandlers.ContainsKey(eventType))
            {
                _eventHandlers[eventType].Remove(handler);
                
                if (_eventHandlers[eventType].Count == 0)
                {
                    _eventHandlers.Remove(eventType);
                }
                
                MyLogger.Log($"üîï –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏—è {typeof(T).Name}", MyLogger.LogCategory.Default);
            }
        }

        /// <summary>
        /// –ü—É–±–ª–∏–∫—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
        /// </summary>
        /// <typeparam name="T">–¢–∏–ø —Å–æ–±—ã—Ç–∏—è</typeparam>
        /// <param name="eventArgs">–ê—Ä–≥—É–º–µ–Ω—Ç—ã —Å–æ–±—ã—Ç–∏—è</param>
        public void Publish<T>(T eventArgs) where T : EventArgs
        {
            if (_isDisposed) return;

            var eventType = typeof(T);
            
            if (!_eventHandlers.ContainsKey(eventType)) return;

            var handlers = new List<Delegate>(_eventHandlers[eventType]); // –ö–æ–ø–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            
            foreach (var handler in handlers)
            {
                try
                {
                    if (handler is EventHandler<T> typedHandler)
                    {
                        typedHandler.Invoke(this, eventArgs);
                    }
                }
                catch (Exception ex)
                {
                    MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–±—ã—Ç–∏—è {typeof(T).Name}: {ex.Message}", MyLogger.LogCategory.Default);
                    MyLogger.LogError($"StackTrace: {ex.StackTrace}", MyLogger.LogCategory.Default);
                }
            }
            
            MyLogger.Log($"üì¢ –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è {typeof(T).Name}", MyLogger.LogCategory.Default);
        }

        /// <summary>
        /// –û—á–∏—â–∞–µ—Ç –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏
        /// </summary>
        public void Clear()
        {
            _eventHandlers.Clear();
            MyLogger.Log("üßπ EventBus –æ—á–∏—â–µ–Ω", MyLogger.LogCategory.Default);
        }

        /// <summary>
        /// –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã
        /// </summary>
        public void Dispose()
        {
            if (_isDisposed) return;

            Clear();
            _isDisposed = true;
            MyLogger.Log("üóëÔ∏è EventBus disposed", MyLogger.LogCategory.Default);
        }
    }
} 