#if UNITY_EDITOR
using UnityEngine;
using UnityEditor;
using UnityEngine.UI;
using TMPro;
using App.Develop.Scenes.PersonalAreaScene.UI.Components;
using App.App.Develop.Scenes.PersonalAreaScene.UI.Components;
using System.Collections;

namespace App.Develop.Scenes.PersonalAreaScene.UI
{
    public class PersonalAreaPrefabGenerator
    {
        private const string RESOURCES_FOLDER = "Assets/App/Resources";
        private const string UI_FOLDER = RESOURCES_FOLDER + "/UI";
        private const string PREFAB_PATH = UI_FOLDER + "/PersonalAreaCanvas.prefab";

        // –¶–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞ —Å—Ç–∏–ª—è MoodRoom
        private static readonly Color WarmWoodLight = new Color(0.9f, 0.8f, 0.7f, 1f); // –°–≤–µ—Ç–ª–æ–µ –¥–µ—Ä–µ–≤–æ
        private static readonly Color WarmWoodMedium = new Color(0.82f, 0.71f, 0.55f, 1f); // –°—Ä–µ–¥–Ω–µ–µ –¥–µ—Ä–µ–≤–æ
        private static readonly Color WarmWoodDark = new Color(0.7f, 0.6f, 0.45f, 1f); // –¢–µ–º–Ω–æ–µ –¥–µ—Ä–µ–≤–æ
        private static readonly Color WoodDarkBrown = new Color(0.6f, 0.5f, 0.35f, 1f); // –ö–æ—Ä–∏—á–Ω–µ–≤–æ–µ –¥–µ—Ä–µ–≤–æ
        private static readonly Color TextDark = new Color(0.25f, 0.2f, 0.15f, 1f); // –¢–µ–º–Ω—ã–π —Ç–µ–∫—Å—Ç
        private static readonly Color PaperBeige = new Color(0.95f, 0.9f, 0.8f, 1f); // –ë–µ–∂–µ–≤–∞—è –±—É–º–∞–≥–∞
        private static readonly Color GlassBlue = new Color(0.7f, 0.85f, 0.9f, 0.3f); // –°—Ç–µ–∫–ª–æ —Å –≥–æ–ª—É–±—ã–º –æ—Ç—Ç–µ–Ω–∫–æ–º

        [MenuItem("MoodColor/Generate/Personal Area Prefab")]
        public static void GeneratePrefab()
        {
            Debug.Log("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–µ—Ñ–∞–±–∞ Personal Area...");

            // 1) –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            if (!AssetDatabase.IsValidFolder(RESOURCES_FOLDER))
                AssetDatabase.CreateFolder("Assets/App", "Resources");

            if (!AssetDatabase.IsValidFolder(UI_FOLDER))
                AssetDatabase.CreateFolder(RESOURCES_FOLDER, "UI");

            // 2) –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π Canvas
            var root = CreateUIObject("PersonalAreaCanvas", null);
            root.AddComponent<Canvas>().renderMode = RenderMode.ScreenSpaceOverlay;

            var scaler = root.AddComponent<CanvasScaler>();
            scaler.uiScaleMode = CanvasScaler.ScaleMode.ScaleWithScreenSize;
            scaler.referenceResolution = new Vector2(1080, 1920);
            scaler.screenMatchMode = CanvasScaler.ScreenMatchMode.MatchWidthOrHeight;
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –¥–ª—è matchWidthOrHeight:
            // 0 = —à–∏—Ä–∏–Ω–∞, 1 = –≤—ã—Å–æ—Ç–∞, 0.5 = —Å—Ä–µ–¥–Ω–µ–µ
            // –î–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –ª—É—á—à–µ 0.5, —á—Ç–æ–±—ã –±—ã—Ç—å –±–æ–ª–µ–µ –≥–∏–±–∫–∏–º
            scaler.matchWidthOrHeight = 0.5f;

            root.AddComponent<GraphicRaycaster>();

            // 3) –°–æ–∑–¥–∞–µ–º —Ñ–æ–Ω –∫–æ–º–Ω–∞—Ç—ã
            var background = CreateUIObject("RoomBackground", root.transform);
            var backgroundRect = background.GetComponent<RectTransform>();
            SetFullStretch(backgroundRect);
            var backgroundImage = background.AddComponent<Image>();
            backgroundImage.color = WarmWoodLight;

            // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ–Ω–∞
            var windowFrame = CreateUIObject("WindowFrame", background.transform);
            var windowFrameRect = windowFrame.GetComponent<RectTransform>();
            windowFrameRect.anchorMin = new Vector2(0.5f, 0.5f);
            windowFrameRect.anchorMax = new Vector2(0.5f, 0.5f);
            windowFrameRect.sizeDelta = new Vector2(600, 400);
            windowFrameRect.anchoredPosition = new Vector2(0, 300);
            var windowFrameImage = windowFrame.AddComponent<Image>();
            windowFrameImage.color = WarmWoodDark;

            // –û–∫–Ω–æ —Å –≤–∏–¥–æ–º
            var windowView = CreateUIObject("WindowView", windowFrame.transform);
            var windowViewRect = windowView.GetComponent<RectTransform>();
            windowViewRect.anchorMin = new Vector2(0, 0);
            windowViewRect.anchorMax = new Vector2(1, 1);
            windowViewRect.sizeDelta = new Vector2(-40, -40);
            windowViewRect.anchoredPosition = Vector2.zero;
            var windowViewImage = windowView.AddComponent<Image>();
            windowViewImage.color = GlassBlue;

            // –ü–æ–ª–∫–∏ –Ω–∞ —Å—Ç–µ–Ω–µ
            var shelf = CreateUIObject("WoodenShelf", background.transform);
            var shelfRect = shelf.GetComponent<RectTransform>();
            shelfRect.anchorMin = new Vector2(0, 0);
            shelfRect.anchorMax = new Vector2(1, 0);
            shelfRect.sizeDelta = new Vector2(0, 30);
            shelfRect.anchoredPosition = new Vector2(0, 500);
            var shelfImage = shelf.AddComponent<Image>();
            shelfImage.color = WoodDarkBrown;

            // 4) –°–æ–∑–¥–∞–µ–º SafeArea –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è UI
            var safeArea = CreateUIObject("SafeArea", root.transform);
            var safeAreaRect = safeArea.GetComponent<RectTransform>();
            SetFullStretch(safeAreaRect);

#if UNITY_EDITOR
            // –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö "Missing Script" –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å –æ–±—ä–µ–∫—Ç–∞ SafeArea
            GameObject safeAreaGameObject = safeArea; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º GameObject
            var allComponents = safeAreaGameObject.GetComponents<Component>();
            int destroyedCount = 0;

            for (int i = allComponents.Length - 1; i >= 0; i--)
            {
                if (allComponents[i] == null)
                {
                    // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –∏–º–µ–Ω–Ω–æ "null" (missing) –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
                    UnityEditor.Undo.DestroyObjectImmediate(allComponents[i]);
                    destroyedCount++;
                }
            }

            if (destroyedCount > 0)
            {
                Debug.LogWarning($"[PrefabGenerator] Removed {destroyedCount} missing script(s) from SafeArea.");
            }
#endif

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç SafeArea, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–∫—Ä–∏–ø—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∫–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç—Å—è
            System.Type safeAreaType = System.Type.GetType("App.Develop.Scenes.PersonalAreaScene.UI.SafeArea, Assembly-CSharp");

            if (safeAreaType != null)
            {
                if (safeAreaGameObject.GetComponent<SafeArea>() == null)
                {
                    safeAreaGameObject.AddComponent<SafeArea>();
                    Debug.Log("[PrefabGenerator] Added SafeArea component.");
                }
            }
            else
            {
                Debug.LogError(
                    "[PrefabGenerator] CRITICAL: SafeArea script (App.Develop.Scenes.PersonalAreaScene.UI.SafeArea) not found or not compiled! Prefab might not work correctly.");
            }

            // 5) –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–º –ª–µ–π–∞—É—Ç–æ–º
            var mainContent = CreateUIObject("MainContent", safeArea.transform);
            var mainContentRect = mainContent.GetComponent<RectTransform>();
            SetFullStretch(mainContentRect);

            var mainLayout = mainContent.AddComponent<VerticalLayoutGroup>();
            // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —à–∏—Ä–∏–Ω—ã —ç–∫—Ä–∞–Ω–∞
            mainLayout.padding = new RectOffset(40, 40, 60, 40);
            mainLayout.spacing = 20; // –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
            mainLayout.childAlignment = TextAnchor.UpperCenter;
            mainLayout.childControlHeight = true;
            mainLayout.childControlWidth = true;
            mainLayout.childForceExpandHeight = true; // –í–ê–ñ–ù–û!
            mainLayout.childForceExpandWidth = true;
            // –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º ContentSizeFitter!

            // 6) –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã UI
            Debug.Log("üîÑ –°–æ–∑–¥–∞–µ–º UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã...");
            var profileInfo = CreateProfileInfo(mainContent.transform);
            var emotionJars = CreateEmotionJars(mainContent.transform);
            var statistics = CreateStatistics(mainContent.transform);
            var navigation = CreateNavigation(mainContent.transform);

            // 7) –î–æ–±–∞–≤–ª—è–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã
            Debug.Log("üîÑ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã...");
            var manager = root.AddComponent<PersonalAreaManager>();
            var uiController = root.AddComponent<PersonalAreaUIController>();

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º SerializeField —á–µ—Ä–µ–∑ SerializedObject
            var serializedManager = new SerializedObject(manager);
            serializedManager.FindProperty("_ui").objectReferenceValue = uiController;
            serializedManager.ApplyModifiedProperties();

            var serializedUI = new SerializedObject(uiController);
            serializedUI.FindProperty("_profileInfo").objectReferenceValue = profileInfo.GetComponent<ProfileInfoComponent>();
            serializedUI.FindProperty("_emotionJars").objectReferenceValue = emotionJars.GetComponent<EmotionJarView>();
            serializedUI.FindProperty("_statistics").objectReferenceValue = statistics.GetComponent<StatisticsView>();
            serializedUI.FindProperty("_navigation").objectReferenceValue = navigation.GetComponent<NavigationComponent>();
            serializedUI.ApplyModifiedProperties();

            // 8) –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ—Ñ–∞–±
            Debug.Log($"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ—Ñ–∞–± –≤ {PREFAB_PATH}");
            SaveAsPrefab(root);

            // 9) –û—á–∏—â–∞–µ–º —Å—Ü–µ–Ω—É
            Object.DestroyImmediate(root);

            Debug.Log("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ñ–∞–±–∞ Personal Area –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
        }

        private static GameObject CreateProfileInfo(Transform parent)
        {
            Debug.Log("üîÑ –°–æ–∑–¥–∞–µ–º ProfileInfo...");

            // –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—ä–µ–∫—Ç
            var profileInfo = CreateUIObject("ProfileInfo", parent);
            var profileRect = profileInfo.GetComponent<RectTransform>();
            profileRect.anchorMin = new Vector2(0, 1);
            profileRect.anchorMax = new Vector2(1, 1);
            profileRect.pivot = new Vector2(0.5f, 1);
            profileRect.offsetMin = new Vector2(0, 0);
            profileRect.offsetMax = new Vector2(0, 0);
            profileRect.sizeDelta = new Vector2(0, 0);
            var layoutElement = profileInfo.AddComponent<LayoutElement>();
            layoutElement.flexibleHeight = 1;
            layoutElement.minHeight = 150; // –ú–µ–Ω—å—à–∞—è –≤—ã—Å–æ—Ç–∞ –¥–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏

            // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ–Ω —Å –¥–µ—Ä–µ–≤—è–Ω–Ω–æ–π —Ñ–∞–∫—Ç—É—Ä–æ–π
            var background = CreateUIObject("WoodenPanel", profileInfo.transform);
            var backgroundRect = background.GetComponent<RectTransform>();
            SetFullStretch(backgroundRect);
            var backgroundImage = background.AddComponent<Image>();
            backgroundImage.color = WarmWoodMedium;

            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ —É–≥–ª—ã –¥–ª—è —Ñ–æ–Ω–∞
            backgroundImage.sprite = Resources.Load<Sprite>("UI/RoundedPanel") ?? CreateRoundedRectSprite(20);
            backgroundImage.type = Image.Type.Sliced;
            backgroundImage.pixelsPerUnitMultiplier = 1f;

            // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–º–∫—É
            var frame = CreateUIObject("Frame", background.transform);
            var frameRect = frame.GetComponent<RectTransform>();
            frameRect.anchorMin = Vector2.zero;
            frameRect.anchorMax = Vector2.one;
            frameRect.offsetMin = new Vector2(10, 10);
            frameRect.offsetMax = new Vector2(-10, -10);
            var frameImage = frame.AddComponent<Image>();
            frameImage.color = new Color(WarmWoodDark.r, WarmWoodDark.g, WarmWoodDark.b, 0.3f);
            frameImage.sprite = Resources.Load<Sprite>("UI/RoundedPanel") ?? CreateRoundedRectSprite(15);
            frameImage.type = Image.Type.Sliced;
            frameImage.pixelsPerUnitMultiplier = 1f;

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            var content = CreateUIObject("Content", frame.transform);
            var contentRect = content.GetComponent<RectTransform>();
            SetFullStretch(contentRect);
            var contentLayout = content.AddComponent<HorizontalLayoutGroup>();
            contentLayout.padding = new RectOffset(20, 20, 10, 10);
            contentLayout.spacing = 30;
            contentLayout.childAlignment = TextAnchor.MiddleLeft;
            contentLayout.childControlWidth = false;
            contentLayout.childForceExpandWidth = false;

            // –ê–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            var avatarContainer = CreateUIObject("AvatarContainer", content.transform);
            var avatarContainerRect = avatarContainer.GetComponent<RectTransform>();
            avatarContainerRect.sizeDelta = new Vector2(80, 80); // –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∞–≤–∞—Ç–∞—Ä–∞

            var avatarBg = CreateUIObject("AvatarBackground", avatarContainer.transform);
            var avatarBgRect = avatarBg.GetComponent<RectTransform>();
            SetFullStretch(avatarBgRect);
            var avatarBgImage = avatarBg.AddComponent<Image>();
            avatarBgImage.color = new Color(0.9f, 0.9f, 0.9f, 1f);
            avatarBgImage.sprite = Resources.Load<Sprite>("UI/RoundedPanel") ?? CreateRoundedRectSprite(50);
            avatarBgImage.type = Image.Type.Sliced;
            avatarBgImage.pixelsPerUnitMultiplier = 1f;

            // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞
            var avatarImage = CreateUIObject("AvatarImage", avatarBg.transform);
            var avatarImageRect = avatarImage.GetComponent<RectTransform>();
            SetFullStretch(avatarImageRect);
            avatarImageRect.offsetMin = new Vector2(5, 5);
            avatarImageRect.offsetMax = new Vector2(-5, -5);
            var avatar = avatarImage.AddComponent<Image>();
            avatar.sprite = Resources.Load<Sprite>("UI/DefaultAvatar");
            avatar.preserveAspect = true;
            avatar.color = new Color(1f, 1f, 1f, 0.9f);

            // Username Text
            var textContainer = CreateUIObject("TextContainer", content.transform);
            var textContainerRect = textContainer.GetComponent<RectTransform>();
            textContainerRect.sizeDelta = new Vector2(0, 80); // –ú–µ–Ω—å—à–∞—è –≤—ã—Å–æ—Ç–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
            var textLayout = textContainer.AddComponent<VerticalLayoutGroup>();
            textLayout.childAlignment = TextAnchor.MiddleLeft;
            textLayout.spacing = 5; // –ú–µ–Ω—å—à–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
            textLayout.childControlWidth = true;
            textLayout.childForceExpandWidth = true;

            var usernameText = CreateTextObject("UsernameText", textContainer.transform, "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤", 24); // –ú–µ–Ω—å—à–∏–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
            usernameText.GetComponent<TextMeshProUGUI>().fontStyle = FontStyles.Bold;

            var statusText = CreateTextObject("StatusText", textContainer.transform, "–û–Ω–ª–∞–π–Ω", 16); // –ú–µ–Ω—å—à–∏–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
            var statusTextComp = statusText.GetComponent<TextMeshProUGUI>();
            statusTextComp.color = new Color(0.0f, 0.7f, 0.0f, 1f);
            statusTextComp.fontStyle = FontStyles.Italic;

            // Current Emotion - —É–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä
            var emotionContainer = CreateUIObject("CurrentEmotionContainer", content.transform);
            var emotionContainerRect = emotionContainer.GetComponent<RectTransform>();
            emotionContainerRect.sizeDelta = new Vector2(70, 80);

            var emotionLabel = CreateTextObject("EmotionLabel", emotionContainer.transform, "–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", 12);
            var emotionLabelRect = emotionLabel.GetComponent<RectTransform>();
            emotionLabelRect.anchorMin = new Vector2(0, 1);
            emotionLabelRect.anchorMax = new Vector2(1, 1);
            emotionLabelRect.sizeDelta = new Vector2(0, 20);
            emotionLabelRect.anchoredPosition = new Vector2(0, -10);

            var emotionImage = CreateUIObject("CurrentEmotionImage", emotionContainer.transform);
            var emotionRect = emotionImage.GetComponent<RectTransform>();
            emotionRect.anchorMin = new Vector2(0.5f, 0);
            emotionRect.anchorMax = new Vector2(0.5f, 0);
            emotionRect.sizeDelta = new Vector2(50, 50); // –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏–∫–æ–Ω–∫–∏
            emotionRect.anchoredPosition = new Vector2(0, 35);

            // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ–Ω –¥–ª—è –∏–∫–æ–Ω–∫–∏
            var emotionBg = CreateUIObject("EmotionBackground", emotionImage.transform);
            var emotionBgRect = emotionBg.GetComponent<RectTransform>();
            SetFullStretch(emotionBgRect);
            var emotionBgImage = emotionBg.AddComponent<Image>();
            emotionBgImage.color = GlassBlue;
            emotionBgImage.sprite = Resources.Load<Sprite>("UI/RoundedPanel") ?? CreateRoundedRectSprite(30);
            emotionBgImage.type = Image.Type.Sliced;
            emotionBgImage.pixelsPerUnitMultiplier = 1f;

            // –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É
            var emotionIcon = emotionImage.AddComponent<Image>();
            emotionIcon.color = new Color(1, 1, 1, 0.8f);
            emotionIcon.sprite = null; // –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            var profileComponent = profileInfo.AddComponent<ProfileInfoComponent>();
            var serializedProfile = new SerializedObject(profileComponent);
            serializedProfile.FindProperty("_usernameText").objectReferenceValue = usernameText.GetComponent<TextMeshProUGUI>();
            serializedProfile.FindProperty("_currentEmotionImage").objectReferenceValue = emotionIcon;
            serializedProfile.ApplyModifiedProperties();

            return profileInfo;
        }

        private static GameObject CreateEmotionJars(Transform parent)
        {
            Debug.Log("üîÑ –°–æ–∑–¥–∞–µ–º EmotionJars...");

            // –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—ä–µ–∫—Ç
            var emotionJars = CreateUIObject("EmotionJars", parent);
            var jarsRect = emotionJars.GetComponent<RectTransform>();
            jarsRect.anchorMin = new Vector2(0, 1);
            jarsRect.anchorMax = new Vector2(1, 1);
            jarsRect.pivot = new Vector2(0.5f, 1);
            jarsRect.offsetMin = new Vector2(0, 0);
            jarsRect.offsetMax = new Vector2(0, 0);
            jarsRect.sizeDelta = new Vector2(0, 0);
            var layoutElement = emotionJars.AddComponent<LayoutElement>();
            layoutElement.flexibleHeight = 1;
            layoutElement.minHeight = 400;

            // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ä–µ–≤—è–Ω–Ω—É—é –ø–æ–ª–∫—É –∫–∞–∫ —Ñ–æ–Ω
            var shelfBg = CreateUIObject("WoodenShelf", emotionJars.transform);
            var shelfBgRect = shelfBg.GetComponent<RectTransform>();
            SetFullStretch(shelfBgRect);
            var shelfBgImage = shelfBg.AddComponent<Image>();
            shelfBgImage.color = WarmWoodDark;

            // –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ —É–≥–ª—ã –¥–ª—è —Ñ–æ–Ω–∞
            shelfBgImage.sprite = Resources.Load<Sprite>("UI/RoundedPanel") ?? CreateRoundedRectSprite(15);
            shelfBgImage.type = Image.Type.Sliced;
            shelfBgImage.pixelsPerUnitMultiplier = 1f;

            // –¢–µ–∫—Å—Ç—É—Ä–∞ –¥–µ—Ä–µ–≤–∞
            var woodTexture = CreateUIObject("WoodTexture", shelfBg.transform);
            var woodTextureRect = woodTexture.GetComponent<RectTransform>();
            SetFullStretch(woodTextureRect);
            woodTextureRect.offsetMin = new Vector2(5, 5);
            woodTextureRect.offsetMax = new Vector2(-5, -5);
            var woodTextureImage = woodTexture.AddComponent<Image>();
            woodTextureImage.color = new Color(1f, 1f, 1f, 0.1f);

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –±–∞–Ω–æ–∫
            var jarsContainer = CreateUIObject("JarsContainer", woodTexture.transform);
            var jarsContainerRect = jarsContainer.GetComponent<RectTransform>();
            SetFullStretch(jarsContainerRect);
            var gridLayout = jarsContainer.AddComponent<GridLayoutGroup>();
            
            // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä —è—á–µ–µ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —à–∏—Ä–∏–Ω—ã —ç–∫—Ä–∞–Ω–∞
            float cellSize = 160f; // –±–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä
            gridLayout.cellSize = new Vector2(cellSize, 220); // –∫—Ä—É–ø–Ω–µ–µ –±–∞–Ω–∫–∏
            gridLayout.spacing = new Vector2(40, 30);
            gridLayout.padding = new RectOffset(20, 20, 20, 20);
            gridLayout.childAlignment = TextAnchor.MiddleCenter;

            // –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–æ–ª–ª–∏–Ω–≥ –¥–ª—è –±–∞–Ω–æ–∫
            var scrollRect = jarsContainer.AddComponent<ScrollRect>();
            
            // –ü–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–π —Ä–µ–∂–∏–º: –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Å–∫—Ä–æ–ª–ª (–ª—É—á—à–µ –¥–ª—è —É–∑–∫–∏—Ö —ç–∫—Ä–∞–Ω–æ–≤)
            // –ê–ª—å–±–æ–º–Ω—ã–π —Ä–µ–∂–∏–º: –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–∫—Ä–æ–ª–ª
            // –í —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ –º—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é, –ø–æ—ç—Ç–æ–º—É –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
            scrollRect.horizontal = true;
            scrollRect.vertical = true; // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
            scrollRect.scrollSensitivity = 20f;
            scrollRect.elasticity = 0.1f;
            scrollRect.inertia = true;
            scrollRect.decelerationRate = 0.135f;

            // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–∞
            var scrollContent = CreateUIObject("ScrollContent", jarsContainer.transform);
            var scrollContentRect = scrollContent.GetComponent<RectTransform>();
            scrollContentRect.anchorMin = Vector2.zero;
            scrollContentRect.anchorMax = new Vector2(1, 1);
            scrollContentRect.pivot = new Vector2(0.5f, 0.5f);
            scrollContentRect.sizeDelta = Vector2.zero;

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º grid layout –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å–∫—Ä–æ–ª–ª–∞
            var contentGridLayout = scrollContent.AddComponent<GridLayoutGroup>();
            contentGridLayout.cellSize = new Vector2(cellSize, 220);
            contentGridLayout.spacing = new Vector2(40, 30);
            contentGridLayout.startCorner = GridLayoutGroup.Corner.UpperLeft;
            contentGridLayout.startAxis = GridLayoutGroup.Axis.Horizontal;
            contentGridLayout.childAlignment = TextAnchor.MiddleCenter;
            contentGridLayout.constraint = GridLayoutGroup.Constraint.FixedColumnCount;
            
            // –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ (–¥–ª—è —É–∑–∫–∏—Ö —ç–∫—Ä–∞–Ω–æ–≤ –º–µ–Ω—å—à–µ)
            contentGridLayout.constraintCount = 2; // 2 –±–∞–Ω–∫–∏ –≤ —Ä—è–¥—É –¥–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º ScrollRect
            scrollRect.content = scrollContentRect;
            scrollRect.viewport = jarsContainerRect;

            // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –±–∞–Ω–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–π —ç–º–æ—Ü–∏–∏
            string[] emotionNames = { "–†–∞–¥–æ—Å—Ç—å", "–ì—Ä—É—Å—Ç—å", "–ì–Ω–µ–≤", "–°—Ç—Ä–∞—Ö", "–£–¥–∏–≤–ª–µ–Ω–∏–µ", "–î–æ–≤–µ—Ä–∏–µ" };

            Color[] jarColors =
            {
                new Color(1f, 0.9f, 0.2f, 0.7f), // –†–∞–¥–æ—Å—Ç—å - –∂–µ–ª—Ç—ã–π
                new Color(0.3f, 0.5f, 0.9f, 0.7f), // –ì—Ä—É—Å—Ç—å - —Å–∏–Ω–∏–π
                new Color(0.9f, 0.3f, 0.2f, 0.7f), // –ì–Ω–µ–≤ - –∫—Ä–∞—Å–Ω—ã–π
                new Color(0.5f, 0.2f, 0.7f, 0.7f), // –°—Ç—Ä–∞—Ö - —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
                new Color(0.2f, 0.8f, 0.9f, 0.7f), // –£–¥–∏–≤–ª–µ–Ω–∏–µ - –≥–æ–ª—É–±–æ–π
                new Color(0.3f, 0.8f, 0.4f, 0.7f) // –î–æ–≤–µ—Ä–∏–µ - –∑–µ–ª–µ–Ω—ã–π
            };

            for (int i = 0; i < emotionNames.Length; i++)
            {
                CreateJar(scrollContent.transform, emotionNames[i], jarColors[i], i + 1);
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            var contentSizeFitter = scrollContent.AddComponent<ContentSizeFitter>();
            contentSizeFitter.horizontalFit = ContentSizeFitter.FitMode.PreferredSize;
            contentSizeFitter.verticalFit = ContentSizeFitter.FitMode.PreferredSize;

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
            emotionJars.AddComponent<EmotionJarView>();

            return emotionJars;
        }

        private static GameObject CreateJar(Transform parent, string emotionName, Color liquidColor, int level)
        {
            // –°–æ–∑–¥–∞–µ–º –±–∞–Ω–∫—É
            var jar = CreateUIObject(emotionName + "Jar", parent);

            // –°—Ç–µ–∫–ª—è–Ω–Ω–∞—è –±–∞–Ω–∫–∞ (—Ñ–æ–Ω)
            var glassJar = CreateUIObject("GlassJar", jar.transform);
            var glassJarRect = glassJar.GetComponent<RectTransform>();
            glassJarRect.anchorMin = new Vector2(0.5f, 0.5f);
            glassJarRect.anchorMax = new Vector2(0.5f, 0.5f);
            glassJarRect.sizeDelta = new Vector2(90, 120); // –ú–µ–Ω—å—à–∏–π —Ä–∞–∑–º–µ—Ä –±–∞–Ω–∫–∏
            glassJarRect.anchoredPosition = Vector2.zero;

            var glassImage = glassJar.AddComponent<Image>();
            glassImage.color = new Color(0.9f, 0.9f, 0.95f, 0.4f); // –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω–æ–µ —Å—Ç–µ–∫–ª–æ
            glassImage.sprite = Resources.Load<Sprite>("UI/JarSprite") ?? CreateJarSprite();
            glassImage.type = Image.Type.Sliced;
            glassImage.pixelsPerUnitMultiplier = 1f;

            // –ñ–∏–¥–∫–æ—Å—Ç—å –≤–Ω—É—Ç—Ä–∏ –±–∞–Ω–∫–∏
            var liquid = CreateUIObject("Liquid", glassJar.transform);
            var liquidRect = liquid.GetComponent<RectTransform>();
            liquidRect.anchorMin = new Vector2(0, 0);

            // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç 0.1 –¥–æ 0.9 –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç level
            float fillLevel = Mathf.Clamp01(level / 10.0f + 0.1f); // –û—Ç 0.1 –¥–æ 0.9
            liquidRect.anchorMax = new Vector2(1, fillLevel);

            liquidRect.offsetMin = new Vector2(7, 7); // –ú–µ–Ω—å—à–∏–µ –æ—Ç—Å—Ç—É–ø—ã
            liquidRect.offsetMax = new Vector2(-7, 0);
            var liquidImage = liquid.AddComponent<Image>();
            liquidImage.color = liquidColor;

            // –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É –¥–ª—è –∂–∏–¥–∫–æ—Å—Ç–∏
            liquid.AddComponent<Mask>().showMaskGraphic = true;

            // –î–æ–±–∞–≤–ª—è–µ–º "–ø—É–∑—ã—Ä—å–∫–∏" –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–Ω—å—à–µ –ø—É–∑—ã—Ä—å–∫–æ–≤
            for (int i = 0; i < 3; i++) // 3 –≤–º–µ—Å—Ç–æ 5 –ø—É–∑—ã—Ä—å–∫–æ–≤
            {
                var bubble = CreateUIObject("Bubble" + i, liquid.transform);
                var bubbleRect = bubble.GetComponent<RectTransform>();

                // –°–ª—É—á–∞–π–Ω—ã–π —Ä–∞–∑–º–µ—Ä (–º–µ–Ω—å—à–µ)
                float size = Random.Range(4f, 8f);
                bubbleRect.sizeDelta = new Vector2(size, size);

                // –°–ª—É—á–∞–π–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è (–º–µ–Ω—å—à–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω)
                float x = Random.Range(-30f, 30f);
                float y = Random.Range(-50f, 50f);
                bubbleRect.anchorMin = new Vector2(0.5f, 0.5f);
                bubbleRect.anchorMax = new Vector2(0.5f, 0.5f);
                bubbleRect.anchoredPosition = new Vector2(x, y);

                var bubbleImage = bubble.AddComponent<Image>();
                bubbleImage.sprite = Resources.Load<Sprite>("UI/CircleSprite") ?? CreateCircleSprite();
                bubbleImage.color = new Color(1f, 1f, 1f, 0.4f);
            }

            // –≠—Ç–∏–∫–µ—Ç–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º
            var label = CreateUIObject("Label", jar.transform);
            var labelRect = label.GetComponent<RectTransform>();
            labelRect.anchorMin = new Vector2(0.5f, 0);
            labelRect.anchorMax = new Vector2(0.5f, 0);
            labelRect.sizeDelta = new Vector2(80, 25); // –ú–µ–Ω—å—à–∞—è —ç—Ç–∏–∫–µ—Ç–∫–∞
            labelRect.anchoredPosition = new Vector2(0, -10);

            var labelBg = label.AddComponent<Image>();
            labelBg.color = PaperBeige;
            labelBg.sprite = Resources.Load<Sprite>("UI/RoundedPanel") ?? CreateRoundedRectSprite(8);
            labelBg.type = Image.Type.Sliced;
            labelBg.pixelsPerUnitMultiplier = 1f;

            var labelText = CreateTextObject("LabelText", label.transform, emotionName, 12); // –ú–µ–Ω—å—à–∏–π —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞
            var labelTextComp = labelText.GetComponent<TextMeshProUGUI>();
            labelTextComp.color = TextDark;
            labelTextComp.fontStyle = FontStyles.Bold;

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            var countText = CreateTextObject("CountText", glassJar.transform, level.ToString(), 20); // –ú–µ–Ω—å—à–∏–π —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞
            var countTextRect = countText.GetComponent<RectTransform>();
            countTextRect.anchorMin = new Vector2(1, 1);
            countTextRect.anchorMax = new Vector2(1, 1);
            countTextRect.sizeDelta = new Vector2(30, 30); // –ú–µ–Ω—å—à–∏–π —Ä–∞–∑–º–µ—Ä —Å—á–µ—Ç—á–∏–∫–∞
            countTextRect.anchoredPosition = new Vector2(-5, -5);

            var countTextComp = countText.GetComponent<TextMeshProUGUI>();
            countTextComp.color = Color.white;
            countTextComp.fontStyle = FontStyles.Bold;

            // –°–æ–∑–¥–∞–µ–º —Ñ–æ–Ω –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            var countBg = CreateUIObject("CountBg", countText.transform);
            countBg.transform.SetSiblingIndex(0); // –ü–æ–º–µ—â–∞–µ–º –ø–æ–∑–∞–¥–∏ —Ç–µ–∫—Å—Ç–∞
            var countBgRect = countBg.GetComponent<RectTransform>();
            SetFullStretch(countBgRect);
            var countBgImage = countBg.AddComponent<Image>();
            countBgImage.color = new Color(0.1f, 0.1f, 0.1f, 0.5f);
            countBgImage.sprite = Resources.Load<Sprite>("UI/CircleSprite") ?? CreateCircleSprite();

            return jar;
        }

        private static GameObject CreateStatistics(Transform parent)
        {
            Debug.Log("üîÑ –°–æ–∑–¥–∞–µ–º Statistics...");

            // –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—ä–µ–∫—Ç
            var statistics = CreateUIObject("Statistics", parent);
            var statsRect = statistics.GetComponent<RectTransform>();
            statsRect.anchorMin = new Vector2(0, 1);
            statsRect.anchorMax = new Vector2(1, 1);
            statsRect.pivot = new Vector2(0.5f, 1);
            statsRect.offsetMin = new Vector2(0, 0);
            statsRect.offsetMax = new Vector2(0, 0);
            statsRect.sizeDelta = new Vector2(0, 0);
            var layoutElement = statistics.AddComponent<LayoutElement>();
            layoutElement.flexibleHeight = 1;
            layoutElement.minHeight = 150; // –£–º–µ–Ω—å—à–∞–µ–º –≤—ã—Å–æ—Ç—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

            // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ–Ω –≤ –≤–∏–¥–µ —Å–≤–∏—Ç–∫–∞/–∑–∞–ø–∏—Å–∫–∏
            var scroll = CreateUIObject("PaperScroll", statistics.transform);
            var scrollRect = scroll.GetComponent<RectTransform>();
            SetFullStretch(scrollRect);
            var scrollImage = scroll.AddComponent<Image>();
            scrollImage.color = PaperBeige;
            scrollImage.sprite = Resources.Load<Sprite>("UI/RoundedPanel") ?? CreateRoundedRectSprite(15);
            scrollImage.type = Image.Type.Sliced;
            scrollImage.pixelsPerUnitMultiplier = 1f;

            // –î–æ–±–∞–≤–ª—è–µ–º "–∑–∞–≥–Ω—É—Ç—ã–µ —É–≥–ª—ã" —Å–≤–∏—Ç–∫–∞ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞
            var cornerTL = CreateUIObject("CornerTopLeft", scroll.transform);
            var cornerTLRect = cornerTL.GetComponent<RectTransform>();
            cornerTLRect.anchorMin = new Vector2(0, 1);
            cornerTLRect.anchorMax = new Vector2(0, 1);
            cornerTLRect.sizeDelta = new Vector2(25, 25); // –ú–µ–Ω—å—à–∏–µ —É–≥–ª—ã
            cornerTLRect.anchoredPosition = Vector2.zero;
            var cornerTLImage = cornerTL.AddComponent<Image>();
            cornerTLImage.color = new Color(0.8f, 0.75f, 0.65f, 1f);
            cornerTLImage.sprite = Resources.Load<Sprite>("UI/CornerFold") ?? CreateCornerFoldSprite();

            var cornerBR = CreateUIObject("CornerBottomRight", scroll.transform);
            var cornerBRRect = cornerBR.GetComponent<RectTransform>();
            cornerBRRect.anchorMin = new Vector2(1, 0);
            cornerBRRect.anchorMax = new Vector2(1, 0);
            cornerBRRect.sizeDelta = new Vector2(25, 25); // –ú–µ–Ω—å—à–∏–µ —É–≥–ª—ã
            cornerBRRect.anchoredPosition = Vector2.zero;
            var cornerBRImage = cornerBR.AddComponent<Image>();
            cornerBRImage.color = new Color(0.8f, 0.75f, 0.65f, 1f);
            cornerBRImage.sprite = Resources.Load<Sprite>("UI/CornerFold") ?? CreateCornerFoldSprite();
            // –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –Ω–∞ 180 –≥—Ä–∞–¥—É—Å–æ–≤
            cornerBRRect.localRotation = Quaternion.Euler(0, 0, 180);

            // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            var content = CreateUIObject("Content", scroll.transform);
            var contentRect = content.GetComponent<RectTransform>();
            contentRect.anchorMin = new Vector2(0, 0);
            contentRect.anchorMax = new Vector2(1, 1);
            contentRect.offsetMin = new Vector2(15, 15); // –ú–µ–Ω—å—à–∏–µ –æ—Ç—Å—Ç—É–ø—ã
            contentRect.offsetMax = new Vector2(-15, -15); // –ú–µ–Ω—å—à–∏–µ –æ—Ç—Å—Ç—É–ø—ã

            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É "–±—É–º–∞–≥–∏"
            var paperTexture = CreateUIObject("PaperTexture", content.transform);
            var paperTextureRect = paperTexture.GetComponent<RectTransform>();
            SetFullStretch(paperTextureRect);
            var paperTextureImage = paperTexture.AddComponent<Image>();
            paperTextureImage.color = new Color(0, 0, 0, 0.05f);
            paperTextureImage.sprite = Resources.Load<Sprite>("UI/PaperTexture") ?? CreatePaperTextureSprite();
            paperTextureImage.type = Image.Type.Tiled;

            var titleText = CreateTextObject("StatisticsTitle", content.transform, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 20);
            var titleTextRect = titleText.GetComponent<RectTransform>();
            titleTextRect.anchorMin = new Vector2(0, 1);
            titleTextRect.anchorMax = new Vector2(1, 1);
            titleTextRect.sizeDelta = new Vector2(0, 25); // –ú–µ–Ω—å—à–∞—è –≤—ã—Å–æ—Ç–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            titleTextRect.anchoredPosition = new Vector2(0, -12);
            var titleTextComp = titleText.GetComponent<TextMeshProUGUI>();
            titleTextComp.fontStyle = FontStyles.Bold;
            titleTextComp.alignment = TextAlignmentOptions.Center;

            // –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏—é –ø–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
            var titleLine = CreateUIObject("TitleLine", titleText.transform);
            var titleLineRect = titleLine.GetComponent<RectTransform>();
            titleLineRect.anchorMin = new Vector2(0.2f, 0);
            titleLineRect.anchorMax = new Vector2(0.8f, 0);
            titleLineRect.sizeDelta = new Vector2(0, 1); // –¢–æ–Ω—å—à–µ –ª–∏–Ω–∏—è
            titleLineRect.anchoredPosition = new Vector2(0, -3); // –ë–ª–∏–∂–µ –∫ —Ç–µ–∫—Å—Ç—É
            var titleLineImage = titleLine.AddComponent<Image>();
            titleLineImage.color = new Color(0.4f, 0.3f, 0.2f, 0.5f);

            // –°–æ–∑–¥–∞–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –ª–µ–π–∞—É—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            var statsRow = CreateUIObject("StatsRow", content.transform);
            var statsRowRect = statsRow.GetComponent<RectTransform>();
            statsRowRect.anchorMin = new Vector2(0, 0);
            statsRowRect.anchorMax = new Vector2(1, 1);
            statsRowRect.offsetMin = new Vector2(0, 0);
            statsRowRect.offsetMax = new Vector2(0, -30); // –ú–µ–Ω—å—à–µ –º–µ—Å—Ç–∞ –ø–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º

            var rowLayout = statsRow.AddComponent<HorizontalLayoutGroup>();
            rowLayout.spacing = 20; // –ú–µ–Ω—å—à–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
            rowLayout.childAlignment = TextAnchor.MiddleCenter;
            rowLayout.childControlWidth = true;
            rowLayout.childForceExpandWidth = true;

            // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—á–∫–æ–≤ –∏ –∑–∞–ø–∏—Å–µ–π
            var pointsContainer = CreateUIObject("PointsContainer", statsRow.transform);
            var entriesContainer = CreateUIObject("EntriesContainer", statsRow.transform);

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—á–∫–æ–≤
            var pointsIcon = CreateUIObject("PointsIcon", pointsContainer.transform);
            var pointsIconRect = pointsIcon.GetComponent<RectTransform>();
            pointsIconRect.anchorMin = new Vector2(0, 0.5f);
            pointsIconRect.anchorMax = new Vector2(0, 0.5f);
            pointsIconRect.sizeDelta = new Vector2(30, 30); // –ú–µ–Ω—å—à–∞—è –∏–∫–æ–Ω–∫–∞
            pointsIconRect.anchoredPosition = new Vector2(15, 0); // –ú–µ–Ω—å—à–∏–π –æ—Ç—Å—Ç—É–ø
            var pointsIconImage = pointsIcon.AddComponent<Image>();
            pointsIconImage.color = new Color(1f, 0.8f, 0.2f, 1f); // –ó–æ–ª–æ—Ç–∏—Å—Ç—ã–π —Ü–≤–µ—Ç –¥–ª—è –º–æ–Ω–µ—Ç–∫–∏/–æ—á–∫–æ–≤
            pointsIconImage.sprite = Resources.Load<Sprite>("UI/CoinIcon") ?? CreateCoinSprite();
            pointsIconImage.preserveAspect = true;

            var pointsText = CreateTextObject("PointsText", pointsContainer.transform, "–û—á–∫–∏: 0", 16); // –ú–µ–Ω—å—à–∏–π —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞
            var pointsTextRect = pointsText.GetComponent<RectTransform>();
            pointsTextRect.anchorMin = new Vector2(0, 0);
            pointsTextRect.anchorMax = new Vector2(1, 1);
            pointsTextRect.offsetMin = new Vector2(50, 0); // –ú–µ–Ω—å—à–∏–π –æ—Ç—Å—Ç—É–ø
            pointsTextRect.offsetMax = new Vector2(0, 0);
            var pointsTextComp = pointsText.GetComponent<TextMeshProUGUI>();
            pointsTextComp.alignment = TextAlignmentOptions.Left;
            pointsTextComp.fontStyle = FontStyles.Bold;

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π
            var entriesIcon = CreateUIObject("EntriesIcon", entriesContainer.transform);
            var entriesIconRect = entriesIcon.GetComponent<RectTransform>();
            entriesIconRect.anchorMin = new Vector2(0, 0.5f);
            entriesIconRect.anchorMax = new Vector2(0, 0.5f);
            entriesIconRect.sizeDelta = new Vector2(30, 30); // –ú–µ–Ω—å—à–∞—è –∏–∫–æ–Ω–∫–∞
            entriesIconRect.anchoredPosition = new Vector2(15, 0); // –ú–µ–Ω—å—à–∏–π –æ—Ç—Å—Ç—É–ø
            var entriesIconImage = entriesIcon.AddComponent<Image>();
            entriesIconImage.color = new Color(0.4f, 0.6f, 1f, 1f); // –ì–æ–ª—É–±–æ–π —Ü–≤–µ—Ç –¥–ª—è –∑–∞–ø–∏—Å–µ–π
            entriesIconImage.sprite = Resources.Load<Sprite>("UI/NoteIcon") ?? CreateNoteSprite();
            entriesIconImage.preserveAspect = true;

            var entriesText = CreateTextObject("EntriesText", entriesContainer.transform, "–ó–∞–ø–∏—Å–µ–π: 0", 16); // –ú–µ–Ω—å—à–∏–π —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞
            var entriesTextRect = entriesText.GetComponent<RectTransform>();
            entriesTextRect.anchorMin = new Vector2(0, 0);
            entriesTextRect.anchorMax = new Vector2(1, 1);
            entriesTextRect.offsetMin = new Vector2(50, 0); // –ú–µ–Ω—å—à–∏–π –æ—Ç—Å—Ç—É–ø
            entriesTextRect.offsetMax = new Vector2(0, 0);
            var entriesTextComp = entriesText.GetComponent<TextMeshProUGUI>();
            entriesTextComp.alignment = TextAlignmentOptions.Left;
            entriesTextComp.fontStyle = FontStyles.Bold;

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            var statsView = statistics.AddComponent<StatisticsView>();
            var serializedStats = new SerializedObject(statsView);
            serializedStats.FindProperty("_pointsText").objectReferenceValue = pointsTextComp;
            serializedStats.FindProperty("_entriesText").objectReferenceValue = entriesTextComp;
            serializedStats.ApplyModifiedProperties();

            return statistics;
        }

        private static GameObject CreateNavigation(Transform parent)
        {
            Debug.Log("üîÑ –°–æ–∑–¥–∞–µ–º Navigation...");

            // –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—ä–µ–∫—Ç
            var navigation = CreateUIObject("Navigation", parent);
            var navRect = navigation.GetComponent<RectTransform>();
            navRect.anchorMin = new Vector2(0, 1);
            navRect.anchorMax = new Vector2(1, 1);
            navRect.pivot = new Vector2(0.5f, 1);
            navRect.offsetMin = new Vector2(0, 0);
            navRect.offsetMax = new Vector2(0, 0);
            navRect.sizeDelta = new Vector2(0, 0);
            var layoutElement = navigation.AddComponent<LayoutElement>();
            layoutElement.flexibleHeight = 1;
            layoutElement.minHeight = 120;

            // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ä–µ–≤—è–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å
            var woodPanel = CreateUIObject("WoodenPanel", navigation.transform);
            var woodPanelRect = woodPanel.GetComponent<RectTransform>();
            SetFullStretch(woodPanelRect);
            var woodPanelImage = woodPanel.AddComponent<Image>();
            woodPanelImage.color = WarmWoodDark;
            woodPanelImage.sprite = Resources.Load<Sprite>("UI/RoundedPanel") ?? CreateRoundedRectSprite(15);
            woodPanelImage.type = Image.Type.Sliced;
            woodPanelImage.pixelsPerUnitMultiplier = 1f;

            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –ø–∞–Ω–µ–ª–∏
            var panelTexture = CreateUIObject("PanelTexture", woodPanel.transform);
            var panelTextureRect = panelTexture.GetComponent<RectTransform>();
            SetFullStretch(panelTextureRect);
            panelTextureRect.offsetMin = new Vector2(5, 5);
            panelTextureRect.offsetMax = new Vector2(-5, -5);
            var panelTextureImage = panelTexture.AddComponent<Image>();
            panelTextureImage.color = new Color(1f, 1f, 1f, 0.05f);
            panelTextureImage.sprite = Resources.Load<Sprite>("UI/WoodTexture") ?? CreateWoodTextureSprite();
            panelTextureImage.type = Image.Type.Tiled;

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫
            var buttonsContainer = CreateUIObject("ButtonsContainer", panelTexture.transform);
            var buttonsContainerRect = buttonsContainer.GetComponent<RectTransform>();
            SetFullStretch(buttonsContainerRect);
            buttonsContainerRect.offsetMin = new Vector2(10, 10);
            buttonsContainerRect.offsetMax = new Vector2(-10, -10);

            var buttonLayout = buttonsContainer.AddComponent<HorizontalLayoutGroup>();
            buttonLayout.spacing = 20; // –º–µ–Ω—å—à–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –±–æ–ª–µ–µ —É–∑–∫–∏—Ö —ç–∫—Ä–∞–Ω–æ–≤
            buttonLayout.childAlignment = TextAnchor.MiddleCenter;
            buttonLayout.childControlWidth = false;
            buttonLayout.childForceExpandWidth = false;
            buttonLayout.padding = new RectOffset(5, 5, 5, 5); // –º–µ–Ω—å—à–µ –æ—Ç—Å—Ç—É–ø—ã

            // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
            var logEmotionBtn = CreateButton("LogEmotionButton", buttonsContainer.transform, "–ù–æ–≤–∞—è\n—ç–º–æ—Ü–∏—è",
                Resources.Load<Sprite>("UI/Icons/EmotionPlusIcon") ?? CreateEmotionPlusIconSprite());

            var historyBtn = CreateButton("HistoryButton", buttonsContainer.transform, "–ò—Å—Ç–æ—Ä–∏—è",
                Resources.Load<Sprite>("UI/Icons/HistoryIcon") ?? CreateHistoryIconSprite());

            var friendsBtn = CreateButton("FriendsButton", buttonsContainer.transform, "–î—Ä—É–∑—å—è",
                Resources.Load<Sprite>("UI/Icons/FriendsIcon") ?? CreateFriendsIconSprite());

            var settingsBtn = CreateButton("SettingsButton", buttonsContainer.transform, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                Resources.Load<Sprite>("UI/Icons/SettingsIcon") ?? CreateSettingsIconSprite());

            var workshopBtn = CreateButton("WorkshopButton", buttonsContainer.transform, "–ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è",
                Resources.Load<Sprite>("UI/Icons/WorkshopIcon") ?? CreateWorkshopIconSprite());

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ –∫–Ω–æ–ø–æ–∫ - —É–º–µ–Ω—å—à–µ–Ω—ã –¥–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            foreach (var btn in new[] { logEmotionBtn, historyBtn, friendsBtn, settingsBtn, workshopBtn })
            {
                var btnRect = btn.GetComponent<RectTransform>();
                btnRect.sizeDelta = new Vector2(150, 80); // –º–µ–Ω—å—à–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–∑–∫–∏—Ö —ç–∫—Ä–∞–Ω–æ–≤
            }

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            var navComponent = navigation.AddComponent<NavigationComponent>();
            var serializedNav = new SerializedObject(navComponent);
            serializedNav.FindProperty("_logEmotionButton").objectReferenceValue = logEmotionBtn.GetComponent<Button>();
            serializedNav.FindProperty("_historyButton").objectReferenceValue = historyBtn.GetComponent<Button>();
            serializedNav.FindProperty("_friendsButton").objectReferenceValue = friendsBtn.GetComponent<Button>();
            serializedNav.FindProperty("_settingsButton").objectReferenceValue = settingsBtn.GetComponent<Button>();
            serializedNav.FindProperty("_workshopButton").objectReferenceValue = workshopBtn.GetComponent<Button>();

            // –°–≤—è–∑—ã–≤–∞–µ–º –∏–∫–æ–Ω–∫–∏
            var logEmotionIcon = logEmotionBtn.transform.Find("WoodenPanel/InnerPanel/IconContainer").GetComponent<Image>();
            var historyIcon = historyBtn.transform.Find("WoodenPanel/InnerPanel/IconContainer").GetComponent<Image>();
            var friendsIcon = friendsBtn.transform.Find("WoodenPanel/InnerPanel/IconContainer").GetComponent<Image>();
            var settingsIcon = settingsBtn.transform.Find("WoodenPanel/InnerPanel/IconContainer").GetComponent<Image>();
            var workshopIcon = workshopBtn.transform.Find("WoodenPanel/InnerPanel/IconContainer").GetComponent<Image>();

            serializedNav.FindProperty("_logEmotionIcon").objectReferenceValue = logEmotionIcon;
            serializedNav.FindProperty("_historyIcon").objectReferenceValue = historyIcon;
            serializedNav.FindProperty("_friendsIcon").objectReferenceValue = friendsIcon;
            serializedNav.FindProperty("_settingsIcon").objectReferenceValue = settingsIcon;
            serializedNav.FindProperty("_workshopIcon").objectReferenceValue = workshopIcon;

            // –°–≤—è–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç—ã
            var logEmotionText = logEmotionBtn.transform.Find("WoodenPanel/InnerPanel/Text").GetComponent<TextMeshProUGUI>();
            var historyText = historyBtn.transform.Find("WoodenPanel/InnerPanel/Text").GetComponent<TextMeshProUGUI>();
            var friendsText = friendsBtn.transform.Find("WoodenPanel/InnerPanel/Text").GetComponent<TextMeshProUGUI>();
            var settingsText = settingsBtn.transform.Find("WoodenPanel/InnerPanel/Text").GetComponent<TextMeshProUGUI>();
            var workshopText = workshopBtn.transform.Find("WoodenPanel/InnerPanel/Text").GetComponent<TextMeshProUGUI>();

            serializedNav.FindProperty("_logEmotionText").objectReferenceValue = logEmotionText;
            serializedNav.FindProperty("_historyText").objectReferenceValue = historyText;
            serializedNav.FindProperty("_friendsText").objectReferenceValue = friendsText;
            serializedNav.FindProperty("_settingsText").objectReferenceValue = settingsText;
            serializedNav.FindProperty("_workshopText").objectReferenceValue = workshopText;

            serializedNav.ApplyModifiedProperties();

            return navigation;
        }

        private static GameObject CreateButton(string name, Transform parent, string text, Sprite icon = null)
        {
            // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–º —Å—Ç–∏–ª–µ–º
            var buttonObj = CreateUIObject(name, parent);

            // –î–µ—Ä–µ–≤—è–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å (—Ñ–æ–Ω –∫–Ω–æ–ø–∫–∏)
            var woodenPanel = CreateUIObject("WoodenPanel", buttonObj.transform);
            var woodenPanelRect = woodenPanel.GetComponent<RectTransform>();
            SetFullStretch(woodenPanelRect);
            var buttonBgImage = woodenPanel.AddComponent<Image>();
            buttonBgImage.color = WoodDarkBrown;
            buttonBgImage.sprite = Resources.Load<Sprite>("UI/RoundedPanel") ?? CreateRoundedRectSprite(12);
            buttonBgImage.type = Image.Type.Sliced;
            buttonBgImage.pixelsPerUnitMultiplier = 1f;

            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–Ω—å –¥–ª—è –æ–±—ä–µ–º–∞
            var shadow = CreateUIObject("Shadow", woodenPanel.transform);
            var shadowRect = shadow.GetComponent<RectTransform>();
            SetFullStretch(shadowRect);
            shadowRect.offsetMin = new Vector2(-3, -3);
            shadowRect.offsetMax = new Vector2(3, 3);
            shadowRect.SetSiblingIndex(0);
            var shadowImage = shadow.AddComponent<Image>();
            shadowImage.color = new Color(0.1f, 0.1f, 0.1f, 0.3f);
            shadowImage.sprite = Resources.Load<Sprite>("UI/RoundedPanel") ?? CreateRoundedRectSprite(15);
            shadowImage.type = Image.Type.Sliced;
            shadowImage.pixelsPerUnitMultiplier = 1f;

            // –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –ø–∞–Ω–µ–ª—å (—Ñ–æ–Ω –¥–ª—è —Ç–µ–∫—Å—Ç–∞)
            var innerPanel = CreateUIObject("InnerPanel", woodenPanel.transform);
            var innerPanelRect = innerPanel.GetComponent<RectTransform>();
            innerPanelRect.anchorMin = new Vector2(0, 0);
            innerPanelRect.anchorMax = new Vector2(1, 1);
            innerPanelRect.offsetMin = new Vector2(4, 4);
            innerPanelRect.offsetMax = new Vector2(-4, -4);
            var innerPanelImage = innerPanel.AddComponent<Image>();
            innerPanelImage.color = WarmWoodMedium;
            innerPanelImage.sprite = Resources.Load<Sprite>("UI/RoundedPanel") ?? CreateRoundedRectSprite(10);
            innerPanelImage.type = Image.Type.Sliced;
            innerPanelImage.pixelsPerUnitMultiplier = 1f;

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–Ω–æ–ø–∫–∏
            var button = buttonObj.AddComponent<Button>();
            button.targetGraphic = buttonBgImage;

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ü–≤–µ—Ç–∞ –∫–Ω–æ–ø–∫–∏
            var normalColor = buttonBgImage.color;

            var highlightedColor = new Color(
                Mathf.Min(normalColor.r * 1.2f, 1f),
                Mathf.Min(normalColor.g * 1.2f, 1f),
                Mathf.Min(normalColor.b * 1.2f, 1f),
                normalColor.a
            );

            var pressedColor = new Color(
                normalColor.r * 0.8f,
                normalColor.g * 0.8f,
                normalColor.b * 0.8f,
                normalColor.a
            );

            var colors = button.colors;
            colors.normalColor = normalColor;
            colors.highlightedColor = highlightedColor;
            colors.pressedColor = pressedColor;
            colors.selectedColor = highlightedColor;
            colors.disabledColor = new Color(normalColor.r, normalColor.g, normalColor.b, 0.5f);
            colors.colorMultiplier = 1f;
            colors.fadeDuration = 0.1f;
            button.colors = colors;

            // –ò–∫–æ–Ω–∫–∞
            var iconContainer = CreateUIObject("IconContainer", innerPanel.transform);
            var iconContainerRect = iconContainer.GetComponent<RectTransform>();
            iconContainerRect.anchorMin = new Vector2(0.5f, 1);
            iconContainerRect.anchorMax = new Vector2(0.5f, 1);
            iconContainerRect.pivot = new Vector2(0.5f, 1);
            iconContainerRect.sizeDelta = new Vector2(30, 30);
            iconContainerRect.anchoredPosition = new Vector2(0, -5);

            var iconImage = iconContainer.AddComponent<Image>();
            iconImage.color = TextDark;

            if (icon != null)
            {
                iconImage.sprite = icon;
                iconImage.preserveAspect = true;
            }

            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            var textObj = CreateTextObject("Text", innerPanel.transform, text, 16);
            var textRect = textObj.GetComponent<RectTransform>();
            textRect.anchorMin = new Vector2(0, 0);
            textRect.anchorMax = new Vector2(1, 0.7f);
            textRect.offsetMin = new Vector2(2, 2);
            textRect.offsetMax = new Vector2(-2, 0);
            var tmp = textObj.GetComponent<TextMeshProUGUI>();
            tmp.color = TextDark;
            tmp.alignment = TextAlignmentOptions.Center;
            tmp.enableWordWrapping = true;

            // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –Ω–∞–∂–∞—Ç–∏—è
            var clickAnimation = buttonObj.AddComponent<ButtonClickAnimation>();

            return buttonObj;
        }

        private static GameObject CreateTextObject(string name, Transform parent, string text, int fontSize)
        {
            var textObj = CreateUIObject(name, parent);
            var tmp = textObj.AddComponent<TextMeshProUGUI>();
            tmp.text = text;
            
            // –ë–æ–ª–µ–µ –≥–∏–±–∫–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞
            // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä >= 28, –∏—Å–ø–æ–ª—å–∑—É–µ–º 28 (–±–æ–ª—å—à–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫)
            // –ï—Å–ª–∏ >= 18, –∏—Å–ø–æ–ª—å–∑—É–µ–º 20 (–æ–±—ã—á–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫)
            // –ï—Å–ª–∏ >= 14, –∏—Å–ø–æ–ª—å–∑—É–µ–º 16 (–ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫)
            // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º 12 (–æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç)
            if (fontSize >= 28)
                tmp.fontSize = 28;
            else if (fontSize >= 18)
                tmp.fontSize = 20;
            else if (fontSize >= 14)
                tmp.fontSize = 16;
            else
                tmp.fontSize = 12;
                
            tmp.alignment = TextAlignmentOptions.Center;
            tmp.verticalAlignment = VerticalAlignmentOptions.Middle;
            tmp.color = TextDark;
            if (fontSize >= 18) tmp.fontStyle = FontStyles.Bold;
            return textObj;
        }

        private static GameObject CreateUIObject(string name, Transform parent)
        {
            var go = new GameObject(name, typeof(RectTransform));

            if (parent != null)
                go.transform.SetParent(parent, false);

            return go;
        }

        private static void SetFullStretch(RectTransform rect)
        {
            rect.anchorMin = Vector2.zero;
            rect.anchorMax = Vector2.one;
            rect.sizeDelta = Vector2.zero;
            rect.pivot = new Vector2(0.5f, 0.5f);
        }

        private static void SetStretchWidth(RectTransform rect, float height)
        {
            rect.anchorMin = new Vector2(0, 1);
            rect.anchorMax = new Vector2(1, 1);
            rect.pivot = new Vector2(0.5f, 1f);
            rect.sizeDelta = new Vector2(0, height);
        }

        private static void SaveAsPrefab(GameObject root)
        {
            // –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            string directory = System.IO.Path.GetDirectoryName(PREFAB_PATH);

            if (!System.IO.Directory.Exists(directory))
            {
                System.IO.Directory.CreateDirectory(directory);
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ—Ñ–∞–±
            PrefabUtility.SaveAsPrefabAsset(root, PREFAB_PATH);
            AssetDatabase.Refresh();
        }

        private static Sprite CreateRoundedRectSprite(float radius)
        {
            // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –¥–ª—è —Å–∫—Ä—É–≥–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
            int size = 128;
            Texture2D texture = new Texture2D(size, size);

            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º —Ü–≤–µ—Ç–æ–º
            Color[] colors = new Color[size * size];

            for (int i = 0; i < colors.Length; i++)
            {
                colors[i] = Color.clear;
            }

            texture.SetPixels(colors);

            // –ó–∞–ø–æ–ª–Ω—è–µ–º –±–µ–ª—ã–º —Ü–≤–µ—Ç–æ–º —Å —É—á–µ—Ç–æ–º —Å–∫—Ä—É–≥–ª–µ–Ω–Ω—ã—Ö —É–≥–ª–æ–≤
            Color white = Color.white;
            float radiusSquared = radius * radius;

            for (int y = 0; y < size; y++)
            {
                for (int x = 0; x < size; x++)
                {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–∏–∫—Å–µ–ª—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Å–∫—Ä—É–≥–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
                    if (IsInsideRoundedRect(x, y, size, size, radius))
                    {
                        texture.SetPixel(x, y, white);
                    }
                }
            }

            texture.Apply();

            // –°–æ–∑–¥–∞–µ–º —Å–ø—Ä–∞–π—Ç –∏–∑ —Ç–µ–∫—Å—Ç—É—Ä—ã
            return Sprite.Create(texture, new Rect(0, 0, size, size), new Vector2(0.5f, 0.5f), 100f, 0, SpriteMeshType.FullRect,
                new Vector4(radius, radius, radius, radius));
        }

        private static bool IsInsideRoundedRect(int x, int y, int width, int height, float radius)
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–æ—á–∫–∞ –≤–Ω—É—Ç—Ä–∏ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ —Å —É—á–µ—Ç–æ–º —Å–∫—Ä—É–≥–ª–µ–Ω–Ω—ã—Ö —É–≥–ª–æ–≤

            // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—Ç—Ä–∞
            float nx = x - width / 2.0f;
            float ny = y - height / 2.0f;

            // –†–∞–∑–º–µ—Ä—ã –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ (–±–µ–∑ —É—á–µ—Ç–∞ —Å–∫—Ä—É–≥–ª–µ–Ω–∏–π)
            float innerWidth = width - 2 * radius;
            float innerHeight = height - 2 * radius;

            // –ï—Å–ª–∏ —Ç–æ—á–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞, —Ç–æ —ç—Ç–æ –≤–Ω—É—Ç—Ä–∏
            if (Mathf.Abs(nx) <= innerWidth / 2.0f || Mathf.Abs(ny) <= innerHeight / 2.0f)
                return true;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–æ—á–∫–∞ –≤ —Å–∫—Ä—É–≥–ª–µ–Ω–Ω–æ–º —É–≥–ª—É
            float dx = Mathf.Abs(nx) - innerWidth / 2.0f;
            float dy = Mathf.Abs(ny) - innerHeight / 2.0f;

            return dx * dx + dy * dy <= radius * radius;
        }

        private static Sprite CreateJarSprite()
        {
            // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –¥–ª—è –±–∞–Ω–∫–∏
            int width = 128;
            int height = 256;
            Texture2D texture = new Texture2D(width, height);

            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º —Ü–≤–µ—Ç–æ–º
            Color[] colors = new Color[width * height];

            for (int i = 0; i < colors.Length; i++)
            {
                colors[i] = Color.clear;
            }

            texture.SetPixels(colors);

            // –†–∏—Å—É–µ–º —Ñ–æ—Ä–º—É –±–∞–Ω–∫–∏
            Color white = Color.white;
            int neckWidth = width / 3;
            int neckHeight = height / 8;
            int bodyWidth = width - 10;
            int bodyHeight = height - neckHeight - 20;
            int bodyStartY = 10;
            int neckStartY = bodyStartY + bodyHeight;

            // –†–∏—Å—É–µ–º —Ç–µ–ª–æ –±–∞–Ω–∫–∏
            for (int y = bodyStartY; y < bodyStartY + bodyHeight; y++)
            {
                // –°—É–∂–µ–Ω–∏–µ –∫ –≤–µ—Ä—Ö—É –¥–ª—è –±–∞–Ω–∫–∏
                float factor = 1.0f - (y - bodyStartY) / (float)bodyHeight * 0.2f;
                int currentWidth = (int)(bodyWidth * factor);
                int startX = (width - currentWidth) / 2;

                for (int x = startX; x < startX + currentWidth; x++)
                {
                    texture.SetPixel(x, y, white);
                }
            }

            // –†–∏—Å—É–µ–º –≥–æ—Ä–ª—ã—à–∫–æ
            int neckStartX = (width - neckWidth) / 2;

            for (int y = neckStartY; y < neckStartY + neckHeight; y++)
            {
                for (int x = neckStartX; x < neckStartX + neckWidth; x++)
                {
                    texture.SetPixel(x, y, white);
                }
            }

            // –†–∏—Å—É–µ–º –∫—Ä—ã—à–∫—É
            int capWidth = neckWidth + 10;
            int capHeight = 10;
            int capStartX = (width - capWidth) / 2;
            int capStartY = neckStartY + neckHeight;

            for (int y = capStartY; y < capStartY + capHeight; y++)
            {
                for (int x = capStartX; x < capStartX + capWidth; x++)
                {
                    texture.SetPixel(x, y, white);
                }
            }

            texture.Apply();

            // –°–æ–∑–¥–∞–µ–º —Å–ø—Ä–∞–π—Ç –∏–∑ —Ç–µ–∫—Å—Ç—É—Ä—ã
            return Sprite.Create(texture, new Rect(0, 0, width, height), new Vector2(0.5f, 0.5f), 100f, 0, SpriteMeshType.FullRect);
        }

        private static Sprite CreateCircleSprite()
        {
            // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –¥–ª—è –∫—Ä—É–≥–∞
            int size = 128;
            Texture2D texture = new Texture2D(size, size);

            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º —Ü–≤–µ—Ç–æ–º
            Color[] colors = new Color[size * size];

            for (int i = 0; i < colors.Length; i++)
            {
                colors[i] = Color.clear;
            }

            texture.SetPixels(colors);

            // –†–∏—Å—É–µ–º –∫—Ä—É–≥
            Color white = Color.white;
            int radius = size / 2 - 2;
            int centerX = size / 2;
            int centerY = size / 2;

            for (int y = 0; y < size; y++)
            {
                for (int x = 0; x < size; x++)
                {
                    if (IsInCircle(x, y, centerX, centerY, radius))
                    {
                        texture.SetPixel(x, y, white);
                    }
                }
            }

            texture.Apply();

            // –°–æ–∑–¥–∞–µ–º —Å–ø—Ä–∞–π—Ç –∏–∑ —Ç–µ–∫—Å—Ç—É—Ä—ã
            return Sprite.Create(texture, new Rect(0, 0, size, size), new Vector2(0.5f, 0.5f), 100f, 0, SpriteMeshType.FullRect);
        }

        private static bool IsInCircle(int x, int y, int centerX, int centerY, int radius)
        {
            int dx = x - centerX;
            int dy = y - centerY;
            int distanceSquared = dx * dx + dy * dy;
            return distanceSquared <= radius * radius;
        }

        private static Sprite CreateCoinSprite()
        {
            // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –¥–ª—è –º–æ–Ω–µ—Ç—ã
            int size = 128;
            Texture2D texture = new Texture2D(size, size);

            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º —Ü–≤–µ—Ç–æ–º
            Color[] colors = new Color[size * size];

            for (int i = 0; i < colors.Length; i++)
            {
                colors[i] = Color.clear;
            }

            texture.SetPixels(colors);

            // –†–∏—Å—É–µ–º –∫—Ä—É–≥ –º–æ–Ω–µ—Ç—ã
            Color gold = new Color(1f, 0.8f, 0.2f, 1f);
            Color goldDark = new Color(0.9f, 0.7f, 0.1f, 1f);

            int radius = size / 2 - 2;
            int centerX = size / 2;
            int centerY = size / 2;

            for (int y = 0; y < size; y++)
            {
                for (int x = 0; x < size; x++)
                {
                    if (IsInCircle(x, y, centerX, centerY, radius))
                    {
                        // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –∫ –∫—Ä–∞—è–º
                        float dist = Mathf.Sqrt(Mathf.Pow(x - centerX, 2) + Mathf.Pow(y - centerY, 2)) / radius;
                        Color pixelColor = Color.Lerp(gold, goldDark, dist);
                        texture.SetPixel(x, y, pixelColor);
                    }
                }
            }

            // –†–∏—Å—É–µ–º –∑–Ω–∞–∫ –¥–æ–ª–ª–∞—Ä–∞ (–∏–ª–∏ –¥—Ä—É–≥–æ–π —Å–∏–º–≤–æ–ª) –≤ —Ü–µ–Ω—Ç—Ä–µ
            int symbolThickness = 6;
            int symbolHeight = size / 2;

            // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
            for (int y = centerY - symbolHeight / 2; y < centerY + symbolHeight / 2; y++)
            {
                for (int x = centerX - symbolThickness / 2; x < centerX + symbolThickness / 2; x++)
                {
                    if (IsInCircle(x, y, centerX, centerY, radius))
                    {
                        texture.SetPixel(x, y, Color.white);
                    }
                }
            }

            texture.Apply();

            // –°–æ–∑–¥–∞–µ–º —Å–ø—Ä–∞–π—Ç –∏–∑ —Ç–µ–∫—Å—Ç—É—Ä—ã
            return Sprite.Create(texture, new Rect(0, 0, size, size), new Vector2(0.5f, 0.5f), 100f, 0, SpriteMeshType.FullRect);
        }

        private static Sprite CreateNoteSprite()
        {
            // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –¥–ª—è –∑–∞–ø–∏—Å–∏/–∑–∞–º–µ—Ç–∫–∏
            int width = 128;
            int height = 128;
            Texture2D texture = new Texture2D(width, height);

            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º —Ü–≤–µ—Ç–æ–º
            Color[] colors = new Color[width * height];

            for (int i = 0; i < colors.Length; i++)
            {
                colors[i] = Color.clear;
            }

            texture.SetPixels(colors);

            // –†–∏—Å—É–µ–º –ª–∏—Å—Ç –±—É–º–∞–≥–∏
            Color paper = new Color(0.95f, 0.95f, 0.9f, 1f);
            Color line = new Color(0.3f, 0.3f, 0.5f, 0.5f);

            int margin = 10;

            // –ó–∞–ø–æ–ª–Ω—è–µ–º –ª–∏—Å—Ç
            for (int y = margin; y < height - margin; y++)
            {
                for (int x = margin; x < width - margin; x++)
                {
                    texture.SetPixel(x, y, paper);
                }
            }

            // –†–∏—Å—É–µ–º –ª–∏–Ω–∏–∏ –Ω–∞ –ª–∏—Å—Ç–µ
            int lineCount = 5;
            int lineSpacing = (height - 2 * margin) / (lineCount + 1);

            for (int i = 1; i <= lineCount; i++)
            {
                int lineY = margin + i * lineSpacing;

                for (int x = margin * 2; x < width - margin * 2; x++)
                {
                    texture.SetPixel(x, lineY, line);
                }
            }

            // –†–∏—Å—É–µ–º —Å–∫—Ä–µ–ø–∫—É —Å–≤–µ—Ä—Ö—É
            int clipWidth = 10;
            int clipHeight = 30;
            int clipX = width / 2 - clipWidth / 2;
            int clipY = height - margin - clipHeight / 2;

            Color clipColor = new Color(0.7f, 0.7f, 0.7f, 1f);

            for (int y = clipY - clipHeight / 2; y < clipY + clipHeight / 2; y++)
            {
                for (int x = clipX; x < clipX + clipWidth; x++)
                {
                    if (y > height - margin) continue;

                    texture.SetPixel(x, y, clipColor);
                }
            }

            texture.Apply();

            // –°–æ–∑–¥–∞–µ–º —Å–ø—Ä–∞–π—Ç –∏–∑ —Ç–µ–∫—Å—Ç—É—Ä—ã
            return Sprite.Create(texture, new Rect(0, 0, width, height), new Vector2(0.5f, 0.5f), 100f, 0, SpriteMeshType.FullRect);
        }

        private static Sprite CreateCornerFoldSprite()
        {
            // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –¥–ª—è –∑–∞–≥–Ω—É—Ç–æ–≥–æ —É–≥–ª–∞
            int size = 128;
            Texture2D texture = new Texture2D(size, size);

            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º —Ü–≤–µ—Ç–æ–º
            Color[] colors = new Color[size * size];

            for (int i = 0; i < colors.Length; i++)
            {
                colors[i] = Color.clear;
            }

            texture.SetPixels(colors);

            // –¶–≤–µ—Ç–∞ –¥–ª—è —É–≥–ª–∞
            Color cornerLight = new Color(0.9f, 0.85f, 0.75f, 1f);
            Color cornerShadow = new Color(0.7f, 0.65f, 0.6f, 1f);

            // –†–∏—Å—É–µ–º —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ –∑–∞–≥–Ω—É—Ç–æ–≥–æ —É–≥–ª–∞
            for (int y = 0; y < size; y++)
            {
                for (int x = 0; x < size; x++)
                {
                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–æ—á–∫–∞ –≤–Ω—É—Ç—Ä–∏ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
                    if (x + y < size)
                    {
                        // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç –æ—Ç –∫—Ä–∞—è –∫ —Ü–µ–Ω—Ç—Ä—É
                        float distFromDiagonal = Mathf.Abs(x + y - size) / (float)size;
                        Color pixelColor = Color.Lerp(cornerShadow, cornerLight, distFromDiagonal);

                        texture.SetPixel(x, y, pixelColor);
                    }
                }
            }

            // –†–∏—Å—É–µ–º –ª–∏–Ω–∏—é –∑–∞–≥–∏–±–∞
            for (int i = 0; i < size; i++)
            {
                int x = i;
                int y = size - i;

                if (x >= 0 && x < size && y >= 0 && y < size)
                {
                    // –î–µ–ª–∞–µ–º –ª–∏–Ω–∏—é —Ç–æ–ª—â–µ
                    for (int t = -1; t <= 1; t++)
                    {
                        for (int s = -1; s <= 1; s++)
                        {
                            int px = x + t;
                            int py = y + s;

                            if (px >= 0 && px < size && py >= 0 && py < size)
                            {
                                texture.SetPixel(px, py, cornerShadow);
                            }
                        }
                    }
                }
            }

            texture.Apply();

            // –°–æ–∑–¥–∞–µ–º —Å–ø—Ä–∞–π—Ç –∏–∑ —Ç–µ–∫—Å—Ç—É—Ä—ã
            return Sprite.Create(texture, new Rect(0, 0, size, size), new Vector2(0.5f, 0.5f), 100f, 0, SpriteMeshType.FullRect);
        }

        private static Sprite CreatePaperTextureSprite()
        {
            // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –¥–ª—è –±—É–º–∞–≥–∏
            int width = 256;
            int height = 256;
            Texture2D texture = new Texture2D(width, height);

            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –±–∞–∑–æ–≤—ã–º —Ü–≤–µ—Ç–æ–º –±—É–º–∞–≥–∏
            Color paperBase = new Color(0.98f, 0.96f, 0.9f, 1f);
            Color paperShadow = new Color(0.95f, 0.92f, 0.85f, 1f);

            for (int y = 0; y < height; y++)
            {
                for (int x = 0; x < width; x++)
                {
                    // –°–æ–∑–¥–∞–µ–º —à—É–º –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç—É—Ä—ã –±—É–º–∞–≥–∏
                    float noiseValue = Mathf.PerlinNoise(x * 0.1f, y * 0.1f);

                    // –î–µ–ª–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–±–ª–∞—Å—Ç–∏ —Ç–µ–º–Ω–µ–µ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ —Ç–µ–∫—Å—Ç—É—Ä—ã
                    float factor = noiseValue * 0.2f;

                    Color pixelColor = Color.Lerp(paperBase, paperShadow, factor);
                    texture.SetPixel(x, y, pixelColor);
                }
            }

            texture.Apply();

            // –°–æ–∑–¥–∞–µ–º —Å–ø—Ä–∞–π—Ç –∏–∑ —Ç–µ–∫—Å—Ç—É—Ä—ã
            return Sprite.Create(texture, new Rect(0, 0, width, height), new Vector2(0.5f, 0.5f), 100f, 0, SpriteMeshType.FullRect);
        }

        private static Sprite CreateWoodTextureSprite()
        {
            // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –¥–ª—è –¥–µ—Ä–µ–≤–∞
            int width = 256;
            int height = 256;
            Texture2D texture = new Texture2D(width, height);

            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –±–∞–∑–æ–≤—ã–º —Ü–≤–µ—Ç–æ–º –¥–µ—Ä–µ–≤–∞
            Color woodBase = new Color(0.7f, 0.5f, 0.3f, 1f);
            Color woodDark = new Color(0.6f, 0.4f, 0.25f, 1f);

            for (int y = 0; y < height; y++)
            {
                for (int x = 0; x < width; x++)
                {
                    // –°–æ–∑–¥–∞–µ–º —à—É–º –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç—É—Ä—ã –¥–µ—Ä–µ–≤–∞
                    float noiseValue = Mathf.PerlinNoise(x * 0.05f, y * 0.05f);

                    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–æ—Å—ã –∫–∞–∫ –Ω–∞ –¥–µ—Ä–µ–≤—è–Ω–Ω–æ–π —Ç–µ–∫—Å—Ç—É—Ä–µ
                    float stripeNoise = Mathf.PerlinNoise(x * 0.01f, y * 0.1f) * 0.5f + 0.5f;

                    // –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —à—É–º—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç—É—Ä—ã –¥–µ—Ä–µ–≤–∞
                    float combined = Mathf.Lerp(noiseValue, stripeNoise, 0.7f);

                    Color pixelColor = Color.Lerp(woodBase, woodDark, combined * 0.5f);
                    texture.SetPixel(x, y, pixelColor);
                }
            }

            texture.Apply();

            // –°–æ–∑–¥–∞–µ–º —Å–ø—Ä–∞–π—Ç –∏–∑ —Ç–µ–∫—Å—Ç—É—Ä—ã
            return Sprite.Create(texture, new Rect(0, 0, width, height), new Vector2(0.5f, 0.5f), 100f, 0, SpriteMeshType.FullRect);
        }

        // –ú–µ—Ç–æ–¥ –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –ª–∏–Ω–∏–∏ –Ω–∞ —Ç–µ–∫—Å—Ç—É—Ä–µ
        private static void DrawLine(Texture2D texture, int x1, int y1, int x2, int y2, int thickness, Color color)
        {
            int dx = x2 - x1;
            int dy = y2 - y1;
            int steps = Mathf.Max(Mathf.Abs(dx), Mathf.Abs(dy));

            if (steps == 0)
                return;

            float xIncrement = dx / (float)steps;
            float yIncrement = dy / (float)steps;

            float x = x1;
            float y = y1;

            for (int i = 0; i <= steps; i++)
            {
                // –†–∏—Å—É–µ–º —Ç–æ—á–∫—É —Å —É—á–µ—Ç–æ–º —Ç–æ–ª—â–∏–Ω—ã
                for (int tx = -thickness / 2; tx <= thickness / 2; tx++)
                {
                    for (int ty = -thickness / 2; ty <= thickness / 2; ty++)
                    {
                        int px = Mathf.RoundToInt(x) + tx;
                        int py = Mathf.RoundToInt(y) + ty;

                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ—á–∫–∞ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—Å—Ç—É—Ä—ã
                        if (px >= 0 && px < texture.width && py >= 0 && py < texture.height)
                        {
                            texture.SetPixel(px, py, color);
                        }
                    }
                }

                x += xIncrement;
                y += yIncrement;
            }
        }

        private static Sprite CreateEmotionPlusIconSprite()
        {
            // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –¥–ª—è –∏–∫–æ–Ω–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–º–æ—Ü–∏–∏
            int size = 64;
            Texture2D texture = new Texture2D(size, size);

            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º —Ü–≤–µ—Ç–æ–º
            Color[] colors = new Color[size * size];

            for (int i = 0; i < colors.Length; i++)
            {
                colors[i] = Color.clear;
            }

            texture.SetPixels(colors);

            // –¶–≤–µ—Ç–∞ –¥–ª—è –∏–∫–æ–Ω–∫–∏
            Color mainColor = new Color(1f, 0.6f, 0.2f, 1f); // –û—Ä–∞–Ω–∂–µ–≤—ã–π

            // –†–∏—Å—É–µ–º –∫—Ä—É–≥ (—ç–º–æ—Ü–∏—é)
            int radius = size / 3;
            int centerX = size / 2;
            int centerY = size / 2;

            for (int y = centerY - radius; y < centerY + radius; y++)
            {
                for (int x = centerX - radius; x < centerX + radius; x++)
                {
                    if (IsInCircle(x, y, centerX, centerY, radius))
                    {
                        texture.SetPixel(x, y, mainColor);
                    }
                }
            }

            // –†–∏—Å—É–µ–º –ø–ª—é—Å –≤–Ω—É—Ç—Ä–∏ –∫—Ä—É–≥–∞
            int plusThickness = size / 12;
            int plusLength = radius - 2;

            // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
            for (int y = centerY - plusThickness / 2; y < centerY + plusThickness / 2; y++)
            {
                for (int x = centerX - plusLength; x < centerX + plusLength; x++)
                {
                    if (x >= 0 && x < size && y >= 0 && y < size && IsInCircle(x, y, centerX, centerY, radius))
                    {
                        texture.SetPixel(x, y, Color.white);
                    }
                }
            }

            // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
            for (int y = centerY - plusLength; y < centerY + plusLength; y++)
            {
                for (int x = centerX - plusThickness / 2; x < centerX + plusThickness / 2; x++)
                {
                    if (x >= 0 && x < size && y >= 0 && y < size && IsInCircle(x, y, centerX, centerY, radius))
                    {
                        texture.SetPixel(x, y, Color.white);
                    }
                }
            }

            texture.Apply();

            // –°–æ–∑–¥–∞–µ–º —Å–ø—Ä–∞–π—Ç –∏–∑ —Ç–µ–∫—Å—Ç—É—Ä—ã
            return Sprite.Create(texture, new Rect(0, 0, size, size), new Vector2(0.5f, 0.5f), 100f, 0, SpriteMeshType.FullRect);
        }

        private static Sprite CreateHistoryIconSprite()
        {
            // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –¥–ª—è –∏–∫–æ–Ω–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ (—á–∞—Å—ã)
            int size = 64;
            Texture2D texture = new Texture2D(size, size);

            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º —Ü–≤–µ—Ç–æ–º
            Color[] colors = new Color[size * size];

            for (int i = 0; i < colors.Length; i++)
            {
                colors[i] = Color.clear;
            }

            texture.SetPixels(colors);

            // –¶–≤–µ—Ç–∞ –¥–ª—è –∏–∫–æ–Ω–∫–∏
            Color mainColor = new Color(0.3f, 0.6f, 1f, 1f); // –ì–æ–ª—É–±–æ–π

            // –†–∏—Å—É–µ–º –∫–æ–Ω—Ç—É—Ä —á–∞—Å–æ–≤
            int radius = size / 3;
            int centerX = size / 2;
            int centerY = size / 2;
            int thickness = 3;

            for (int y = 0; y < size; y++)
            {
                for (int x = 0; x < size; x++)
                {
                    float dist = Mathf.Sqrt(Mathf.Pow(x - centerX, 2) + Mathf.Pow(y - centerY, 2));

                    if (dist <= radius && dist >= radius - thickness)
                    {
                        texture.SetPixel(x, y, mainColor);
                    }
                }
            }

            // –†–∏—Å—É–µ–º —Å—Ç—Ä–µ–ª–∫–∏
            int hourHandLength = radius / 2;
            int minuteHandLength = radius - 4;

            // –ß–∞—Å–æ–≤–∞—è —Å—Ç—Ä–µ–ª–∫–∞ (–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ 10 —á–∞—Å–æ–≤)
            DrawLine(texture, centerX, centerY,
                (int)(centerX - hourHandLength * 0.7f),
                (int)(centerY + hourHandLength * 0.7f),
                2, mainColor);

            // –ú–∏–Ω—É—Ç–Ω–∞—è —Å—Ç—Ä–µ–ª–∫–∞ (–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ 2 —á–∞—Å–∞)
            DrawLine(texture, centerX, centerY,
                (int)(centerX + minuteHandLength * 0.7f),
                (int)(centerY + minuteHandLength * 0.7f),
                2, mainColor);

            // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞
            for (int y = centerY - 2; y <= centerY + 2; y++)
            {
                for (int x = centerX - 2; x <= centerX + 2; x++)
                {
                    if (IsInCircle(x, y, centerX, centerY, 2))
                    {
                        texture.SetPixel(x, y, mainColor);
                    }
                }
            }

            texture.Apply();

            // –°–æ–∑–¥–∞–µ–º —Å–ø—Ä–∞–π—Ç –∏–∑ —Ç–µ–∫—Å—Ç—É—Ä—ã
            return Sprite.Create(texture, new Rect(0, 0, size, size), new Vector2(0.5f, 0.5f), 100f, 0, SpriteMeshType.FullRect);
        }

        private static Sprite CreateFriendsIconSprite()
        {
            // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –¥–ª—è –∏–∫–æ–Ω–∫–∏ –¥—Ä—É–∑–µ–π (—Å–∏–ª—É—ç—Ç—ã –ª—é–¥–µ–π)
            int size = 64;
            Texture2D texture = new Texture2D(size, size);

            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º —Ü–≤–µ—Ç–æ–º
            Color[] colors = new Color[size * size];

            for (int i = 0; i < colors.Length; i++)
            {
                colors[i] = Color.clear;
            }

            texture.SetPixels(colors);

            // –¶–≤–µ—Ç–∞ –¥–ª—è –∏–∫–æ–Ω–∫–∏
            Color mainColor = new Color(0.2f, 0.8f, 0.4f, 1f); // –ó–µ–ª–µ–Ω—ã–π

            // –†–∏—Å—É–µ–º —Å–∏–ª—É—ç—Ç—ã –ª—é–¥–µ–π
            int headRadius = size / 10;
            int bodyHeight = size / 4;
            int shoulderWidth = size / 6;

            // –ü–µ—Ä–≤—ã–π —Å–∏–ª—É—ç—Ç (—Å–ª–µ–≤–∞)
            int figure1X = size / 2 - headRadius * 2;
            int figure1Y = size / 2 + headRadius;

            // –ì–æ–ª–æ–≤–∞
            for (int y = figure1Y - headRadius; y < figure1Y + headRadius; y++)
            {
                for (int x = figure1X - headRadius; x < figure1X + headRadius; x++)
                {
                    if (IsInCircle(x, y, figure1X, figure1Y, headRadius))
                    {
                        texture.SetPixel(x, y, mainColor);
                    }
                }
            }

            // –¢–µ–ª–æ
            for (int y = figure1Y - headRadius - bodyHeight; y < figure1Y - headRadius; y++)
            {
                for (int x = figure1X - 1; x < figure1X + 2; x++)
                {
                    texture.SetPixel(x, y, mainColor);
                }
            }

            // –ü–ª–µ—á–∏
            for (int y = figure1Y - headRadius - headRadius; y < figure1Y - headRadius; y++)
            {
                for (int x = figure1X - shoulderWidth / 2; x < figure1X + shoulderWidth / 2; x++)
                {
                    texture.SetPixel(x, y, mainColor);
                }
            }

            // –í—Ç–æ—Ä–æ–π —Å–∏–ª—É—ç—Ç (—Å–ø—Ä–∞–≤–∞)
            int figure2X = size / 2 + headRadius * 2;
            int figure2Y = size / 2 + headRadius;

            // –ì–æ–ª–æ–≤–∞
            for (int y = figure2Y - headRadius; y < figure2Y + headRadius; y++)
            {
                for (int x = figure2X - headRadius; x < figure2X + headRadius; x++)
                {
                    if (IsInCircle(x, y, figure2X, figure2Y, headRadius))
                    {
                        texture.SetPixel(x, y, mainColor);
                    }
                }
            }

            // –¢–µ–ª–æ
            for (int y = figure2Y - headRadius - bodyHeight; y < figure2Y - headRadius; y++)
            {
                for (int x = figure2X - 1; x < figure2X + 2; x++)
                {
                    texture.SetPixel(x, y, mainColor);
                }
            }

            // –ü–ª–µ—á–∏
            for (int y = figure2Y - headRadius - headRadius; y < figure2Y - headRadius; y++)
            {
                for (int x = figure2X - shoulderWidth / 2; x < figure2X + shoulderWidth / 2; x++)
                {
                    texture.SetPixel(x, y, mainColor);
                }
            }

            texture.Apply();

            // –°–æ–∑–¥–∞–µ–º —Å–ø—Ä–∞–π—Ç –∏–∑ —Ç–µ–∫—Å—Ç—É—Ä—ã
            return Sprite.Create(texture, new Rect(0, 0, size, size), new Vector2(0.5f, 0.5f), 100f, 0, SpriteMeshType.FullRect);
        }

        private static Sprite CreateSettingsIconSprite()
        {
            // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –¥–ª—è –∏–∫–æ–Ω–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (—à–µ—Å—Ç–µ—Ä–µ–Ω–∫–∞)
            int size = 64;
            Texture2D texture = new Texture2D(size, size);

            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º —Ü–≤–µ—Ç–æ–º
            Color[] colors = new Color[size * size];

            for (int i = 0; i < colors.Length; i++)
            {
                colors[i] = Color.clear;
            }

            texture.SetPixels(colors);

            // –¶–≤–µ—Ç–∞ –¥–ª—è –∏–∫–æ–Ω–∫–∏
            Color mainColor = new Color(0.8f, 0.8f, 0.85f, 1f); // –°–µ—Ä–µ–±—Ä–∏—Å—Ç—ã–π

            // –†–∏—Å—É–µ–º —à–µ—Å—Ç–µ—Ä–µ–Ω–∫—É
            int centerX = size / 2;
            int centerY = size / 2;
            int outerRadius = size / 3;
            int innerRadius = size / 5;
            int teethCount = 8;

            for (int y = 0; y < size; y++)
            {
                for (int x = 0; x < size; x++)
                {
                    float angle = Mathf.Atan2(y - centerY, x - centerX);
                    float distance = Mathf.Sqrt(Mathf.Pow(x - centerX, 2) + Mathf.Pow(y - centerY, 2));

                    // –í—ã—Å—Ç—É–ø—ã —à–µ—Å—Ç–µ—Ä–µ–Ω–∫–∏
                    float toothAngle = (angle + Mathf.PI) * teethCount / (2 * Mathf.PI);
                    float toothSize = (Mathf.Abs(toothAngle % 1 - 0.5f) * 2) * 5;

                    if (distance <= outerRadius + toothSize && distance >= innerRadius)
                    {
                        texture.SetPixel(x, y, mainColor);
                    }
                }
            }

            // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ –æ—Ç–≤–µ—Ä—Å—Ç–∏–µ
            for (int y = centerY - innerRadius / 2; y < centerY + innerRadius / 2; y++)
            {
                for (int x = centerX - innerRadius / 2; x < centerX + innerRadius / 2; x++)
                {
                    if (IsInCircle(x, y, centerX, centerY, innerRadius / 2))
                    {
                        texture.SetPixel(x, y, Color.clear);
                    }
                }
            }

            texture.Apply();

            // –°–æ–∑–¥–∞–µ–º —Å–ø—Ä–∞–π—Ç –∏–∑ —Ç–µ–∫—Å—Ç—É—Ä—ã
            return Sprite.Create(texture, new Rect(0, 0, size, size), new Vector2(0.5f, 0.5f), 100f, 0, SpriteMeshType.FullRect);
        }

        private static Sprite CreateWorkshopIconSprite()
        {
            // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –¥–ª—è –∏–∫–æ–Ω–∫–∏ –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π (–º–æ–ª–æ—Ç–æ–∫ –∏ –≥–∞–µ—á–Ω—ã–π –∫–ª—é—á)
            int size = 64;
            Texture2D texture = new Texture2D(size, size);

            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º —Ü–≤–µ—Ç–æ–º
            Color[] colors = new Color[size * size];

            for (int i = 0; i < colors.Length; i++)
            {
                colors[i] = Color.clear;
            }

            texture.SetPixels(colors);

            // –¶–≤–µ—Ç–∞ –¥–ª—è –∏–∫–æ–Ω–∫–∏
            Color mainColor = new Color(0.9f, 0.5f, 0.2f, 1f); // –ú–µ–¥–Ω—ã–π –æ—Ç—Ç–µ–Ω–æ–∫

            int centerX = size / 2;
            int centerY = size / 2;

            // –†–∏—Å—É–µ–º –º–æ–ª–æ—Ç–æ–∫
            int hammerHeadWidth = size / 5;
            int hammerHeadHeight = size / 8;
            int hammerHandleThickness = size / 16;
            int hammerHandleLength = size / 2;

            // –†—É–∫–æ—è—Ç–∫–∞ –º–æ–ª–æ—Ç–∫–∞ (–Ω–∞–∫–ª–æ–Ω–Ω–∞—è –ª–∏–Ω–∏—è)
            DrawLine(texture,
                centerX - hammerHandleLength / 4, centerY - hammerHandleLength / 3,
                centerX + hammerHandleLength / 4, centerY + hammerHandleLength / 3,
                hammerHandleThickness, mainColor);

            // –ì–æ–ª–æ–≤–∞ –º–æ–ª–æ—Ç–∫–∞
            for (int y = centerY + hammerHandleLength / 3 - hammerHeadHeight / 2;
                 y < centerY + hammerHandleLength / 3 + hammerHeadHeight / 2;
                 y++)
            {
                for (int x = centerX + hammerHandleLength / 4 - hammerHeadWidth / 2;
                     x < centerX + hammerHandleLength / 4 + hammerHeadWidth / 2;
                     x++)
                {
                    texture.SetPixel(x, y, mainColor);
                }
            }

            // –†–∏—Å—É–µ–º –≥–∞–µ—á–Ω—ã–π –∫–ª—é—á
            int wrenchLength = size / 2;
            int wrenchThickness = size / 16;
            int wrenchHeadRadius = size / 8;

            // –†—É–∫–æ—è—Ç–∫–∞ –∫–ª—é—á–∞ (–Ω–∞–∫–ª–æ–Ω–Ω–∞—è –ª–∏–Ω–∏—è –≤ –¥—Ä—É–≥—É—é —Å—Ç–æ—Ä–æ–Ω—É)
            DrawLine(texture,
                centerX + hammerHandleLength / 4, centerY - hammerHandleLength / 3,
                centerX - hammerHandleLength / 4, centerY + hammerHandleLength / 3,
                wrenchThickness, mainColor);

            // –ì–æ–ª–æ–≤–∫–∞ –∫–ª—é—á–∞ (–∫—Ä—É–∂–æ–∫ —Å –æ—Ç–≤–µ—Ä—Å—Ç–∏–µ–º)
            for (int y = centerY - hammerHandleLength / 3 - wrenchHeadRadius;
                 y < centerY - hammerHandleLength / 3 + wrenchHeadRadius;
                 y++)
            {
                for (int x = centerX + hammerHandleLength / 4 - wrenchHeadRadius;
                     x < centerX + hammerHandleLength / 4 + wrenchHeadRadius;
                     x++)
                {
                    float dist = Mathf.Sqrt(Mathf.Pow(x - (centerX + hammerHandleLength / 4), 2) +
                                            Mathf.Pow(y - (centerY - hammerHandleLength / 3), 2));

                    if (dist <= wrenchHeadRadius && dist >= wrenchHeadRadius / 2)
                    {
                        texture.SetPixel(x, y, mainColor);
                    }
                }
            }

            texture.Apply();

            // –°–æ–∑–¥–∞–µ–º —Å–ø—Ä–∞–π—Ç –∏–∑ —Ç–µ–∫—Å—Ç—É—Ä—ã
            return Sprite.Create(texture, new Rect(0, 0, size, size), new Vector2(0.5f, 0.5f), 100f, 0, SpriteMeshType.FullRect);
        }

        // –ö–ª–∞—Å—Å –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ UI –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        public class SafeArea : MonoBehaviour
        {
            private RectTransform _rectTransform;
            private Rect _safeArea;
            private Vector2 _minAnchor;
            private Vector2 _maxAnchor;

            private void Awake()
            {
                _rectTransform = GetComponent<RectTransform>();
                _safeArea = Screen.safeArea;
                _minAnchor = _safeArea.position;
                _maxAnchor = _minAnchor + _safeArea.size;

                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∞–Ω–∫–æ—Ä–æ–≤
                _minAnchor.x /= Screen.width;
                _minAnchor.y /= Screen.height;
                _maxAnchor.x /= Screen.width;
                _maxAnchor.y /= Screen.height;

                // –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
                ApplySafeArea();
            }

            private void ApplySafeArea()
            {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
                Vector2 anchorMin = _rectTransform.anchorMin;
                Vector2 anchorMax = _rectTransform.anchorMax;

                // –ò–∑–º–µ–Ω—è–µ–º –∞–Ω–∫–æ—Ä—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è SafeArea –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –æ—Ç –ø–æ–ª–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
                if (_minAnchor.x > 0) anchorMin.x = _minAnchor.x;
                if (_minAnchor.y > 0) anchorMin.y = _minAnchor.y;
                if (_maxAnchor.x < 1) anchorMax.x = _maxAnchor.x;
                if (_maxAnchor.y < 1) anchorMax.y = _maxAnchor.y;

                // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                _rectTransform.anchorMin = anchorMin;
                _rectTransform.anchorMax = anchorMax;
            }

            // –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            private void OnValidate()
            {
                if (_rectTransform == null)
                    _rectTransform = GetComponent<RectTransform>();

                // –í —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ –ø—Ä–æ—Å—Ç–æ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –Ω–∞ –ø–æ–ª–Ω—ã–π —ç–∫—Ä–∞–Ω
                _rectTransform.anchorMin = Vector2.zero;
                _rectTransform.anchorMax = Vector2.one;
                _rectTransform.offsetMin = Vector2.zero;
                _rectTransform.offsetMax = Vector2.zero;
            }
        }
    }
}
#endif
