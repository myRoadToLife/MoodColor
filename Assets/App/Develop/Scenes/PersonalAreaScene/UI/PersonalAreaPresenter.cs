using System;
using System.Threading.Tasks;
using App.Develop.CommonServices.UI;
using App.Develop.CommonServices.AssetManagement;
using App.Develop.Scenes.PersonalAreaScene.Infrastructure;
using App.Develop.Scenes.PersonalAreaScene.Settings;
using App.Develop.Utils.Logging;

namespace App.Develop.Scenes.PersonalAreaScene.UI
{
    /// <summary>
    /// Presenter –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏–∫–æ–π –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
    /// –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é –º–µ–∂–¥—É View –∏ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–æ–π
    /// </summary>
    public class PersonalAreaPresenter
    {
        private readonly IPersonalAreaView _view;
        private readonly PanelManager _panelManager;
        private readonly IPersonalAreaService _service;

        public PersonalAreaPresenter(
            IPersonalAreaView view,
            PanelManager panelManager,
            IPersonalAreaService service)
        {
            _view = view ?? throw new ArgumentNullException(nameof(view));
            _panelManager = panelManager ?? throw new ArgumentNullException(nameof(panelManager));
            _service = service ?? throw new ArgumentNullException(nameof(service));
        }

        /// <summary>
        /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç presenter –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è view
        /// </summary>
        public void Initialize()
        {
            SubscribeToViewEvents();
            MyLogger.Log("‚úÖ PersonalAreaPresenter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", MyLogger.LogCategory.UI);
        }

        /// <summary>
        /// –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã –∏ –æ—Ç–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π
        /// </summary>
        public void Dispose()
        {
            UnsubscribeFromViewEvents();
            MyLogger.Log("üóëÔ∏è PersonalAreaPresenter –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω", MyLogger.LogCategory.UI);
        }

        private void SubscribeToViewEvents()
        {
            _view.OnLogEmotionRequested += HandleLogEmotionAsync;
            _view.OnHistoryRequested += HandleHistoryAsync;
            _view.OnFriendsRequested += HandleFriendsAsync;
            _view.OnWorkshopRequested += HandleWorkshopAsync;
            _view.OnSettingsRequested += HandleSettingsAsync;
            _view.OnQuitRequested += HandleQuitAsync;
        }

        private void UnsubscribeFromViewEvents()
        {
            _view.OnLogEmotionRequested -= HandleLogEmotionAsync;
            _view.OnHistoryRequested -= HandleHistoryAsync;
            _view.OnFriendsRequested -= HandleFriendsAsync;
            _view.OnWorkshopRequested -= HandleWorkshopAsync;
            _view.OnSettingsRequested -= HandleSettingsAsync;
            _view.OnQuitRequested -= HandleQuitAsync;
        }

        private async Task HandleLogEmotionAsync()
        {
            try
            {
                bool success = await _panelManager.TogglePanelAsync<LogEmotionPanelController>(AssetAddresses.LogEmotionPanel);
                if (!success)
                {
                    MyLogger.LogError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –∑–∞–ø–∏—Å–∏ —ç–º–æ—Ü–∏–π", MyLogger.LogCategory.UI);
                }
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–∞–Ω–µ–ª–∏ –∑–∞–ø–∏—Å–∏ —ç–º–æ—Ü–∏–π: {ex.Message}", MyLogger.LogCategory.UI);
            }
        }

        private async Task HandleHistoryAsync()
        {
            try
            {
                bool success = await _panelManager.TogglePanelAsync<HistoryPanelController>(AssetAddresses.HistoryPanel);
                if (!success)
                {
                    MyLogger.LogError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –∏—Å—Ç–æ—Ä–∏–∏", MyLogger.LogCategory.UI);
                }
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–∞–Ω–µ–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏: {ex.Message}", MyLogger.LogCategory.UI);
            }
        }

        private async Task HandleFriendsAsync()
        {
            try
            {
                bool success = await _panelManager.TogglePanelAsync<FriendsPanelController>(AssetAddresses.FriendsPanel);
                if (!success)
                {
                    MyLogger.LogError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –¥—Ä—É–∑–µ–π", MyLogger.LogCategory.UI);
                }
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–∞–Ω–µ–ª–∏ –¥—Ä—É–∑–µ–π: {ex.Message}", MyLogger.LogCategory.UI);
            }
        }

        private async Task HandleWorkshopAsync()
        {
            try
            {
                bool success = await _panelManager.TogglePanelAsync<WorkshopPanelController>(AssetAddresses.WorkshopPanel);
                if (!success)
                {
                    MyLogger.LogError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π", MyLogger.LogCategory.UI);
                }
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–∞–Ω–µ–ª–∏ –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π: {ex.Message}", MyLogger.LogCategory.UI);
            }
        }

        private async Task HandleSettingsAsync()
        {
            try
            {
                bool success = await _panelManager.TogglePanelAsync<SettingsPanelController>(AssetAddresses.SettingsPanel);
                if (!success)
                {
                    MyLogger.LogError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫", MyLogger.LogCategory.UI);
                }
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–∞–Ω–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {ex.Message}", MyLogger.LogCategory.UI);
            }
        }

        private async Task HandleQuitAsync()
        {
            try
            {
                await _view.ShowQuitConfirmationAsync();
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {ex.Message}", MyLogger.LogCategory.UI);
            }
        }
    }
}