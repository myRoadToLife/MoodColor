using System;
using System.Collections.Generic;
using System.Linq;
using App.Develop.DI;
using App.Develop.Utils.Logging;
using TMPro;
using UnityEngine;
using UnityEngine.UI;

namespace App.Develop.Scenes.PersonalAreaScene.Panels
{
    [Serializable]
    public class LocationRegionOption
    {
        public string Id;
        public string DisplayName;
        public string Description;
        public bool IsAutomatic;

        public LocationRegionOption() { }

        public LocationRegionOption(string id, string displayName, string description = "", bool isAutomatic = false)
        {
            Id = id;
            DisplayName = displayName;
            Description = description;
            IsAutomatic = isAutomatic;
        }
    }

    public class LocationSelectionPanelController : MonoBehaviour, IInjectable
    {
        #region Serialized Fields
        [Header("–û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã")]
        [SerializeField] private TMP_Text _titleText;
        [SerializeField] private TMP_Text _currentLocationText;
        [SerializeField] private TMP_Dropdown _regionDropdown;
        [SerializeField] private Toggle _useManualSelectionToggle;
        [SerializeField] private Button _refreshLocationButton;

        [Header("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")]
        [SerializeField] private TMP_Text _locationInfoText;
        [SerializeField] private TMP_Text _descriptionText;

        [Header("–ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")]
        [SerializeField] private Button _saveButton;
        [SerializeField] private Button _resetButton;
        [SerializeField] private Button _closeButton;

        [Header("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")]
        [SerializeField] private GameObject _notificationPanel;
        [SerializeField] private TMP_Text _notificationText;
        #endregion

        #region Private Fields
        private List<LocationRegionOption> _availableRegions;
        private bool _useManualRegionSelection = false;
        private string _manuallySelectedRegion = "";
        private bool _isUpdatingUI = false;
        #endregion

        #region Unity Lifecycle
        private void Start()
        {
            InitializeUI();
            LoadCurrentSettings();
        }

        private void OnDestroy()
        {
            UnsubscribeEvents();
        }
        #endregion

        #region IInjectable
        public void Inject(DIContainer container)
        {
            MyLogger.Log("üìç LocationSelectionPanel –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", MyLogger.LogCategory.UI);
        }
        #endregion

        #region Initialization
        private void InitializeUI()
        {
            InitializeAvailableRegions();
            SetupUI();
            SubscribeEvents();
            UpdateLocationInfoText();
        }

        private void InitializeAvailableRegions()
        {
            _availableRegions = new List<LocationRegionOption>
            {
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
                new LocationRegionOption("auto", "ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏", "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ GPS", true),

                // –ú–∏–Ω—Å–∫ –∏ —Ä–∞–π–æ–Ω—ã
                new LocationRegionOption("minsk_center", "üèõÔ∏è –ú–∏–Ω—Å–∫ - –¶–µ–Ω—Ç—Ä"),
                new LocationRegionOption("minsk_north", "üèòÔ∏è –ú–∏–Ω—Å–∫ - –°–µ–≤–µ—Ä"),
                new LocationRegionOption("minsk_south", "üè¢ –ú–∏–Ω—Å–∫ - –Æ–≥"),
                new LocationRegionOption("minsk_east", "üåÖ –ú–∏–Ω—Å–∫ - –í–æ—Å—Ç–æ–∫"),
                new LocationRegionOption("minsk_west", "üåá –ú–∏–Ω—Å–∫ - –ó–∞–ø–∞–¥"),

                // –ë—Ä–µ—Å—Ç—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å
                new LocationRegionOption { DisplayName = "üè∞ –ë—Ä–µ—Å—Ç", Id = "brest" },
                new LocationRegionOption { DisplayName = "üåæ –ë–∞—Ä–∞–Ω–æ–≤–∏—á–∏", Id = "baranovichi" },
                new LocationRegionOption { DisplayName = "üå≤ –ü–∏–Ω—Å–∫", Id = "pinsk" },
                new LocationRegionOption { DisplayName = "üèûÔ∏è –ë—Ä–µ—Å—Ç—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", Id = "brest_region" },

                // –í–∏—Ç–µ–±—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å
                new LocationRegionOption { DisplayName = "üèõÔ∏è –í–∏—Ç–µ–±—Å–∫", Id = "vitebsk" },
                new LocationRegionOption { DisplayName = "üèîÔ∏è –ü–æ–ª–æ—Ü–∫", Id = "polotsk" },
                new LocationRegionOption { DisplayName = "üå≤ –û—Ä—à–∞", Id = "orsha" },
                new LocationRegionOption { DisplayName = "üçÉ –í–∏—Ç–µ–±—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", Id = "vitebsk_region" },

                // –ì–æ–º–µ–ª—å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å
                new LocationRegionOption { DisplayName = "üè≠ –ì–æ–º–µ–ª—å", Id = "gomel" },
                new LocationRegionOption { DisplayName = "‚ö° –ú–æ–∑—ã—Ä—å", Id = "mozyr" },
                new LocationRegionOption { DisplayName = "üåæ –†–µ—á–∏—Ü–∞", Id = "rechitsa" },
                new LocationRegionOption { DisplayName = "üåª –ì–æ–º–µ–ª—å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", Id = "gomel_region" },

                // –ì—Ä–æ–¥–Ω–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å
                new LocationRegionOption { DisplayName = "üè∞ –ì—Ä–æ–¥–Ω–æ", Id = "grodno" },
                new LocationRegionOption { DisplayName = "üå∏ –õ–∏–¥–∞", Id = "lida" },
                new LocationRegionOption { DisplayName = "üå≥ –°–ª–æ–Ω–∏–º", Id = "slonim" },
                new LocationRegionOption { DisplayName = "üèûÔ∏è –ì—Ä–æ–¥–Ω–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", Id = "grodno_region" },

                // –ú–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å
                new LocationRegionOption { DisplayName = "üè≠ –ë–æ—Ä–∏—Å–æ–≤", Id = "borisov" },
                new LocationRegionOption { DisplayName = "‚öôÔ∏è –°–æ–ª–∏–≥–æ—Ä—Å–∫", Id = "soligorsk" },
                new LocationRegionOption { DisplayName = "üåæ –ú–æ–ª–æ–¥–µ—á–Ω–æ", Id = "molodechno" },
                new LocationRegionOption { DisplayName = "üåø –ú–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", Id = "minsk_region" },

                // –ú–æ–≥–∏–ª–µ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å
                new LocationRegionOption { DisplayName = "üèõÔ∏è –ú–æ–≥–∏–ª–µ–≤", Id = "mogilev" },
                new LocationRegionOption { DisplayName = "üè≠ –ë–æ–±—Ä—É–π—Å–∫", Id = "bobruisk" },
                new LocationRegionOption { DisplayName = "üåæ –ö—Ä–∏—á–µ–≤", Id = "krichev" },
                new LocationRegionOption { DisplayName = "üåª –ú–æ–≥–∏–ª–µ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", Id = "mogilev_region" },

                // –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –æ–ø—Ü–∏–∏
                new LocationRegionOption { DisplayName = "üáßüáæ –î—Ä—É–≥–æ–π —Ä–µ–≥–∏–æ–Ω –ë–µ–ª–∞—Ä—É—Å–∏", Id = "other_belarus" },
                new LocationRegionOption { DisplayName = "üá∑üá∫ –†–æ—Å—Å–∏—è", Id = "russia" },
                new LocationRegionOption { DisplayName = "üá∫üá¶ –£–∫—Ä–∞–∏–Ω–∞", Id = "ukraine" },
                new LocationRegionOption { DisplayName = "üá±üáπ –õ–∏—Ç–≤–∞", Id = "lithuania" },
                new LocationRegionOption { DisplayName = "üá±üáª –õ–∞—Ç–≤–∏—è", Id = "latvia" },
                new LocationRegionOption { DisplayName = "üá™üá™ –≠—Å—Ç–æ–Ω–∏—è", Id = "estonia" },
                new LocationRegionOption { DisplayName = "üáµüá± –ü–æ–ª—å—à–∞", Id = "poland" },
                new LocationRegionOption { DisplayName = "üåç –î—Ä—É–≥–∞—è —Å—Ç—Ä–∞–Ω–∞", Id = "international" },
                new LocationRegionOption { DisplayName = "ü§ê –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å", Id = "prefer_not_say" }
            };
        }

        private void SetupUI()
        {
            if (_titleText != null)
                _titleText.text = "üó∫Ô∏è –í—ã–±–æ—Ä –ª–æ–∫–∞—Ü–∏–∏";

            if (_regionDropdown != null)
            {
                _regionDropdown.ClearOptions();
                var options = _availableRegions.Select(r => r.DisplayName).ToList();
                _regionDropdown.AddOptions(options);
            }

            if (_descriptionText != null)
            {
                _descriptionText.text = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ä–µ–≥–∏–æ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–± —ç–º–æ—Ü–∏—è—Ö –≤ –≤–∞—à–µ–º —Ä–∞–π–æ–Ω–µ. " +
                                      "–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ GPS –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å —Ä–µ–≥–∏–æ–Ω –≤—Ä—É—á–Ω—É—é.";
            }
        }

        private void SubscribeEvents()
        {
            if (_useManualSelectionToggle != null)
                _useManualSelectionToggle.onValueChanged.AddListener(OnUseManualSelectionChanged);

            if (_regionDropdown != null)
                _regionDropdown.onValueChanged.AddListener(OnRegionChanged);

            if (_refreshLocationButton != null)
                _refreshLocationButton.onClick.AddListener(OnRefreshLocationClicked);

            if (_saveButton != null)
                _saveButton.onClick.AddListener(OnSaveClicked);

            if (_resetButton != null)
                _resetButton.onClick.AddListener(OnResetClicked);

            if (_closeButton != null)
                _closeButton.onClick.AddListener(OnCloseClicked);
        }

        private void UnsubscribeEvents()
        {
            if (_useManualSelectionToggle != null)
                _useManualSelectionToggle.onValueChanged.RemoveListener(OnUseManualSelectionChanged);

            if (_regionDropdown != null)
                _regionDropdown.onValueChanged.RemoveListener(OnRegionChanged);

            if (_refreshLocationButton != null)
                _refreshLocationButton.onClick.RemoveListener(OnRefreshLocationClicked);

            if (_saveButton != null)
                _saveButton.onClick.RemoveListener(OnSaveClicked);

            if (_resetButton != null)
                _resetButton.onClick.RemoveListener(OnResetClicked);

            if (_closeButton != null)
                _closeButton.onClick.RemoveListener(OnCloseClicked);
        }
        #endregion

        #region Event Handlers
        private void OnUseManualSelectionChanged(bool value)
        {
            if (_isUpdatingUI) return;

            _useManualRegionSelection = value;
            UpdateRegionControls();
            SaveToPlayerPrefs();
            MyLogger.Log($"üó∫Ô∏è –†—É—á–Ω–æ–π –≤—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞: {value}", MyLogger.LogCategory.Regional);
        }

        private void OnRegionChanged(int index)
        {
            if (_isUpdatingUI || index < 0 || index >= _availableRegions.Count) return;

            var selectedRegion = _availableRegions[index];

            if (selectedRegion.Id == "auto")
            {
                _useManualRegionSelection = false;
                _manuallySelectedRegion = "";
                if (_useManualSelectionToggle != null)
                    _useManualSelectionToggle.isOn = false;
            }
            else
            {
                _useManualRegionSelection = true;
                _manuallySelectedRegion = selectedRegion.Id;
                if (_useManualSelectionToggle != null)
                    _useManualSelectionToggle.isOn = true;
            }

            UpdateCurrentLocationDisplay();
            UpdateRegionControls();
            SaveToPlayerPrefs();
            MyLogger.Log($"üó∫Ô∏è –í—ã–±—Ä–∞–Ω —Ä–µ–≥–∏–æ–Ω: {selectedRegion.DisplayName} ({selectedRegion.Id})", MyLogger.LogCategory.Regional);
        }

        private void OnRefreshLocationClicked()
        {
            ShowNotification("üó∫Ô∏è –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ");
            UpdateCurrentLocationDisplay();
        }

        private void OnSaveClicked()
        {
            try
            {
                SaveToPlayerPrefs();
                ShowNotification("üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–∫–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã");
                MyLogger.Log("üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–∫–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", MyLogger.LogCategory.Regional);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–æ–∫–∞—Ü–∏–∏: {ex.Message}", MyLogger.LogCategory.Regional);
                ShowNotification("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫");
            }
        }

        private void OnResetClicked()
        {
            try
            {
                _useManualRegionSelection = false;
                _manuallySelectedRegion = "";

                SaveToPlayerPrefs();
                LoadCurrentSettings();
                ShowNotification("üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–∫–∞—Ü–∏–∏ —Å–±—Ä–æ—à–µ–Ω—ã");
                MyLogger.Log("üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–∫–∞—Ü–∏–∏ —Å–±—Ä–æ—à–µ–Ω—ã", MyLogger.LogCategory.Regional);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–æ–∫–∞—Ü–∏–∏: {ex.Message}", MyLogger.LogCategory.Regional);
                ShowNotification("‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫");
            }
        }

        private void OnCloseClicked()
        {
            gameObject.SetActive(false);
        }
        #endregion

        #region Settings Management
        private void LoadCurrentSettings()
        {
            try
            {
                _isUpdatingUI = true;

                _useManualRegionSelection = PlayerPrefs.GetInt("Location_UseManualRegion", 0) == 1;
                _manuallySelectedRegion = PlayerPrefs.GetString("Location_ManualRegion", "");

                if (_useManualSelectionToggle != null)
                    _useManualSelectionToggle.isOn = _useManualRegionSelection;

                UpdateRegionDropdown();
                UpdateRegionControls();
                UpdateCurrentLocationDisplay();

                _isUpdatingUI = false;

                MyLogger.Log("üì± –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–∫–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ UI", MyLogger.LogCategory.UI);
            }
            catch (Exception ex)
            {
                _isUpdatingUI = false;
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–æ–∫–∞—Ü–∏–∏ –≤ UI: {ex.Message}", MyLogger.LogCategory.UI);
            }
        }

        private void SaveToPlayerPrefs()
        {
            try
            {
                PlayerPrefs.SetInt("Location_UseManualRegion", _useManualRegionSelection ? 1 : 0);
                PlayerPrefs.SetString("Location_ManualRegion", _manuallySelectedRegion);
                PlayerPrefs.Save();

                MyLogger.Log("üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–∫–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ PlayerPrefs", MyLogger.LogCategory.Regional);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–æ–∫–∞—Ü–∏–∏ –≤ PlayerPrefs: {ex.Message}", MyLogger.LogCategory.Regional);
            }
        }
        #endregion

        #region UI Updates
        private void UpdateRegionDropdown()
        {
            if (_regionDropdown == null) return;

            try
            {
                int selectedIndex = 0;

                if (_useManualRegionSelection && !string.IsNullOrEmpty(_manuallySelectedRegion))
                {
                    selectedIndex = _availableRegions.FindIndex(r => r.Id == _manuallySelectedRegion);
                    if (selectedIndex < 0) selectedIndex = 0;
                }

                _regionDropdown.value = selectedIndex;
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è dropdown —Ä–µ–≥–∏–æ–Ω–∞: {ex.Message}", MyLogger.LogCategory.UI);
            }
        }

        private void UpdateRegionControls()
        {
            try
            {
                if (_regionDropdown != null)
                    _regionDropdown.interactable = true; // –í—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤—ã–±–æ—Ä–∞

                if (_refreshLocationButton != null)
                    _refreshLocationButton.interactable = !_useManualRegionSelection; // –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤ —Ä–µ–≥–∏–æ–Ω–∞: {ex.Message}", MyLogger.LogCategory.UI);
            }
        }

        private void UpdateCurrentLocationDisplay()
        {
            if (_currentLocationText == null) return;

            try
            {
                if (_useManualRegionSelection && !string.IsNullOrEmpty(_manuallySelectedRegion))
                {
                    var region = _availableRegions.FirstOrDefault(r => r.Id == _manuallySelectedRegion);
                    _currentLocationText.text = region != null ? $"üìç {region.DisplayName}" : "üìç –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–≥–∏–æ–Ω";
                }
                else
                {
                    _currentLocationText.text = "üìç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ";
                }
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞—Ü–∏–∏: {ex.Message}", MyLogger.LogCategory.UI);
                _currentLocationText.text = "üìç –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è";
            }
        }

        private void UpdateLocationInfoText()
        {
            if (_locationInfoText == null) return;

            try
            {
                _locationInfoText.text = "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–∫–∞—Ü–∏–∏\n\n" +
                                       "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç GPS\n" +
                                       "‚Ä¢ –†—É—á–Ω–æ–π –≤—ã–±–æ—Ä –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–∫–∞–∑–∞—Ç—å —Ä–µ–≥–∏–æ–Ω —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ\n" +
                                       "‚Ä¢ –î–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n" +
                                       "‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è";
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {ex.Message}", MyLogger.LogCategory.UI);
            }
        }

        private void ShowNotification(string message)
        {
            if (_notificationPanel == null || _notificationText == null) return;

            try
            {
                _notificationText.text = message;
                _notificationPanel.SetActive(true);
                CancelInvoke(nameof(HideNotification));
                Invoke(nameof(HideNotification), 3f);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {ex.Message}", MyLogger.LogCategory.UI);
            }
        }

        private void HideNotification()
        {
            if (_notificationPanel != null)
            {
                _notificationPanel.SetActive(false);
            }
        }
        #endregion

        #region Public API
        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–∫–∞—Ü–∏–∏
        /// </summary>
        public (bool useManual, string regionId) GetCurrentLocationSettings()
        {
            return (_useManualRegionSelection, _manuallySelectedRegion);
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π ID —Ä–µ–≥–∏–æ–Ω–∞
        /// </summary>
        public string GetEffectiveRegionId(string gpsRegionId)
        {
            return _useManualRegionSelection && !string.IsNullOrEmpty(_manuallySelectedRegion)
                ? _manuallySelectedRegion
                : gpsRegionId ?? "auto";
        }
        #endregion
    }
} 