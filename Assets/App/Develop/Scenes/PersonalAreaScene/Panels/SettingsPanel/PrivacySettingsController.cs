using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using UnityEngine.UI;
using TMPro;
using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using UnityEngine.UI;
using TMPro;
using App.Develop.DI;
using App.Develop.Utils.Logging;
using App.Develop.CommonServices.Privacy;
using PrivacyRegionOption = App.Develop.CommonServices.Privacy.RegionOption;

namespace App.Develop.Scenes.PersonalAreaScene.Settings
{
    /// <summary>
    /// –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –ø–∞–Ω–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
    /// </summary>
    public class PrivacySettingsController : MonoBehaviour, IInjectable
    {
        #region Serialized Fields
        
        [Header("–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")]
        [SerializeField] private Toggle _allowGlobalDataSharingToggle;
        [SerializeField] private Toggle _allowLocationTrackingToggle;
        [SerializeField] private Toggle _anonymizeDataToggle;
        
        [Header("–í—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞")]
        [SerializeField] private Toggle _useManualRegionToggle;
        [SerializeField] private TMP_Dropdown _regionDropdown;
        [SerializeField] private TMP_Text _currentLocationText;
        [SerializeField] private Button _refreshLocationButton;
        
        [Header("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")]
        [SerializeField] private TMP_Text _privacyInfoText;
        [SerializeField] private TMP_Text _dataUsageText;
        
        [Header("–ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")]
        [SerializeField] private Button _saveButton;
        [SerializeField] private Button _resetButton;
        [SerializeField] private Button _revokeAllButton;
        [SerializeField] private Button _closeButton;
        
        [Header("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")]
        [SerializeField] private GameObject _notificationPanel;
        [SerializeField] private TMP_Text _notificationText;
        [SerializeField] private Button _notificationOkButton;
        
        #endregion
        
        #region Private Fields
        
        private IPrivacyService _privacyService;
        private PrivacySettings _currentSettings;
        private List<PrivacyRegionOption> _availableRegions;
        private bool _isInitialized = false;
        private bool _isUpdatingUI = false;
        
        #endregion
        
        #region Unity Lifecycle
        
        private void OnEnable()
        {
            if (_isInitialized)
            {
                LoadCurrentSettings();
            }
        }
        
        private void OnDestroy()
        {
            UnsubscribeEvents();
        }
        
        #endregion
        
        #region IInjectable
        
        public void Inject(DIContainer container)
        {
            try
            {
                _privacyService = container.Resolve<IPrivacyService>();
                
                InitializeUI();
                SubscribeEvents();
                LoadCurrentSettings();
                
                _isInitialized = true;
                MyLogger.Log("‚úÖ PrivacySettingsController –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", MyLogger.LogCategory.UI);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ PrivacySettingsController: {ex.Message}", MyLogger.LogCategory.UI);
            }
        }
        
        #endregion
        
        #region Initialization
        
        private void InitializeUI()
        {
            try
            {
                // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã
                _availableRegions = _privacyService?.GetAvailableRegions();
                if (_availableRegions == null)
                    _availableRegions = new List<PrivacyRegionOption>();
                
                // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º dropdown —Ä–µ–≥–∏–æ–Ω–æ–≤
                if (_regionDropdown != null)
                {
                    _regionDropdown.ClearOptions();
                    var options = _availableRegions.Select(r => r.DisplayName).ToList();
                    _regionDropdown.AddOptions(options);
                }
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
                UpdateInfoTexts();
                
                MyLogger.Log("üé® UI –ø–∞–Ω–µ–ª–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", MyLogger.LogCategory.UI);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ UI: {ex.Message}", MyLogger.LogCategory.UI);
            }
        }
        
        private void SubscribeEvents()
        {
            try
            {
                // –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                if (_allowGlobalDataSharingToggle != null)
                    _allowGlobalDataSharingToggle.onValueChanged.AddListener(OnGlobalDataSharingChanged);
                
                if (_allowLocationTrackingToggle != null)
                    _allowLocationTrackingToggle.onValueChanged.AddListener(OnLocationTrackingChanged);
                
                if (_anonymizeDataToggle != null)
                    _anonymizeDataToggle.onValueChanged.AddListener(OnAnonymizeDataChanged);
                
                // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–≥–∏–æ–Ω–∞
                if (_useManualRegionToggle != null)
                    _useManualRegionToggle.onValueChanged.AddListener(OnUseManualRegionChanged);
                
                if (_regionDropdown != null)
                    _regionDropdown.onValueChanged.AddListener(OnRegionChanged);
                
                if (_refreshLocationButton != null)
                    _refreshLocationButton.onClick.AddListener(OnRefreshLocationClicked);
                
                // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                if (_saveButton != null)
                    _saveButton.onClick.AddListener(OnSaveClicked);
                
                if (_resetButton != null)
                    _resetButton.onClick.AddListener(OnResetClicked);
                
                if (_revokeAllButton != null)
                    _revokeAllButton.onClick.AddListener(OnRevokeAllClicked);
                
                if (_closeButton != null)
                    _closeButton.onClick.AddListener(OnCloseClicked);
                
                if (_notificationOkButton != null)
                    _notificationOkButton.onClick.AddListener(HideNotification);
                
                // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
                if (_privacyService != null)
                    _privacyService.OnPrivacySettingsChanged += OnPrivacySettingsChanged;
                
                MyLogger.Log("üîó –°–æ–±—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã", MyLogger.LogCategory.UI);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è: {ex.Message}", MyLogger.LogCategory.UI);
            }
        }
        
        private void UnsubscribeEvents()
        {
            try
            {
                // –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                if (_allowGlobalDataSharingToggle != null)
                    _allowGlobalDataSharingToggle.onValueChanged.RemoveListener(OnGlobalDataSharingChanged);
                
                if (_allowLocationTrackingToggle != null)
                    _allowLocationTrackingToggle.onValueChanged.RemoveListener(OnLocationTrackingChanged);
                
                if (_anonymizeDataToggle != null)
                    _anonymizeDataToggle.onValueChanged.RemoveListener(OnAnonymizeDataChanged);
                
                // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–≥–∏–æ–Ω–∞
                if (_useManualRegionToggle != null)
                    _useManualRegionToggle.onValueChanged.RemoveListener(OnUseManualRegionChanged);
                
                if (_regionDropdown != null)
                    _regionDropdown.onValueChanged.RemoveListener(OnRegionChanged);
                
                if (_refreshLocationButton != null)
                    _refreshLocationButton.onClick.RemoveListener(OnRefreshLocationClicked);
                
                // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                if (_saveButton != null)
                    _saveButton.onClick.RemoveListener(OnSaveClicked);
                
                if (_resetButton != null)
                    _resetButton.onClick.RemoveListener(OnResetClicked);
                
                if (_revokeAllButton != null)
                    _revokeAllButton.onClick.RemoveListener(OnRevokeAllClicked);
                
                if (_closeButton != null)
                    _closeButton.onClick.RemoveListener(OnCloseClicked);
                
                if (_notificationOkButton != null)
                    _notificationOkButton.onClick.RemoveListener(HideNotification);
                
                // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–∫
                if (_privacyService != null)
                    _privacyService.OnPrivacySettingsChanged -= OnPrivacySettingsChanged;
                
                MyLogger.Log("üîó –°–æ–±—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–ø–∏—Å–∞–Ω—ã", MyLogger.LogCategory.UI);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —Å–æ–±—ã—Ç–∏–π: {ex.Message}", MyLogger.LogCategory.UI);
            }
        }
        
        #endregion
        
        #region Event Handlers
        
        private void OnGlobalDataSharingChanged(bool value)
        {
            if (_isUpdatingUI || _privacyService == null) return;
            
            _privacyService.AllowGlobalDataSharing = value;
            UpdateDataUsageText();
            MyLogger.Log($"üîí –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö: {value}", MyLogger.LogCategory.Regional);
        }
        
        private void OnLocationTrackingChanged(bool value)
        {
            if (_isUpdatingUI || _privacyService == null) return;
            
            _privacyService.AllowLocationTracking = value;
            UpdateRegionControls();
            MyLogger.Log($"üó∫Ô∏è –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è: {value}", MyLogger.LogCategory.Location);
        }
        
        private void OnAnonymizeDataChanged(bool value)
        {
            if (_isUpdatingUI || _privacyService == null) return;
            
            _privacyService.AnonymizeData = value;
            UpdateDataUsageText();
            MyLogger.Log($"üîí –ê–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö: {value}", MyLogger.LogCategory.Regional);
        }
        
        private void OnUseManualRegionChanged(bool value)
        {
            if (_isUpdatingUI || _privacyService == null) return;
            
            _privacyService.UseManualRegionSelection = value;
            UpdateRegionControls();
            MyLogger.Log($"üó∫Ô∏è –†—É—á–Ω–æ–π –≤—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞: {value}", MyLogger.LogCategory.Regional);
        }
        
        private void OnRegionChanged(int index)
        {
            if (_isUpdatingUI || _privacyService == null || index < 0 || index >= _availableRegions.Count) return;
            
            var selectedRegion = _availableRegions[index];
            
            // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º
            if (selectedRegion.Id == "auto")
            {
                _privacyService.UseManualRegionSelection = false;
                _privacyService.ManuallySelectedRegion = "";
            }
            else
            {
                _privacyService.UseManualRegionSelection = true;
                _privacyService.ManuallySelectedRegion = selectedRegion.Id;
            }
            
            UpdateRegionControls();
            MyLogger.Log($"üó∫Ô∏è –í—ã–±—Ä–∞–Ω —Ä–µ–≥–∏–æ–Ω: {selectedRegion.DisplayName} ({selectedRegion.Id})", MyLogger.LogCategory.Regional);
        }
        
        private void OnRefreshLocationClicked()
        {
            // TODO: –û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ LocationService
            ShowNotification("üó∫Ô∏è –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ");
        }
        
        private void OnSaveClicked()
        {
            try
            {
                _privacyService?.SaveSettings();
                ShowNotification("üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã");
                MyLogger.Log("üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", MyLogger.LogCategory.Regional);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {ex.Message}", MyLogger.LogCategory.Regional);
                ShowNotification("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫");
            }
        }
        
        private void OnResetClicked()
        {
            try
            {
                var defaultSettings = new PrivacySettings();
                _privacyService?.ApplySettings(defaultSettings);
                LoadCurrentSettings();
                ShowNotification("üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã");
                MyLogger.Log("üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–±—Ä–æ—à–µ–Ω—ã", MyLogger.LogCategory.Regional);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {ex.Message}", MyLogger.LogCategory.Regional);
                ShowNotification("‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫");
            }
        }
        
        private void OnRevokeAllClicked()
        {
            try
            {
                _privacyService?.RevokeAllConsents();
                LoadCurrentSettings();
                ShowNotification("üö´ –í—Å–µ —Å–æ–≥–ª–∞—Å–∏—è –æ—Ç–æ–∑–≤–∞–Ω—ã");
                MyLogger.Log("üö´ –í—Å–µ —Å–æ–≥–ª–∞—Å–∏—è –æ—Ç–æ–∑–≤–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", MyLogger.LogCategory.Regional);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∑—ã–≤–∞ —Å–æ–≥–ª–∞—Å–∏–π: {ex.Message}", MyLogger.LogCategory.Regional);
                ShowNotification("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∑—ã–≤–∞ —Å–æ–≥–ª–∞—Å–∏–π");
            }
        }
        
        private void OnCloseClicked()
        {
            gameObject.SetActive(false);
        }
        
        private void OnPrivacySettingsChanged(PrivacySettings settings)
        {
            _currentSettings = settings;
            LoadCurrentSettings();
        }
        
        #endregion
        
        #region UI Updates
        
        private void LoadCurrentSettings()
        {
            try
            {
                if (_privacyService == null) return;
                
                _isUpdatingUI = true;
                
                _currentSettings = _privacyService.GetCurrentSettings();
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                if (_allowGlobalDataSharingToggle != null)
                    _allowGlobalDataSharingToggle.isOn = _currentSettings.AllowGlobalDataSharing;
                
                if (_allowLocationTrackingToggle != null)
                    _allowLocationTrackingToggle.isOn = _currentSettings.AllowLocationTracking;
                
                if (_anonymizeDataToggle != null)
                    _anonymizeDataToggle.isOn = _currentSettings.AnonymizeData;
                
                if (_useManualRegionToggle != null)
                    _useManualRegionToggle.isOn = _currentSettings.UseManualRegionSelection;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞
                UpdateRegionDropdown();
                UpdateRegionControls();
                UpdateInfoTexts();
                UpdateDataUsageText();
                
                _isUpdatingUI = false;
                
                MyLogger.Log("üì± –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ UI", MyLogger.LogCategory.UI);
            }
            catch (Exception ex)
            {
                _isUpdatingUI = false;
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ UI: {ex.Message}", MyLogger.LogCategory.UI);
            }
        }
        
        private void UpdateRegionDropdown()
        {
            if (_regionDropdown == null || _currentSettings == null) return;
            
            try
            {
                // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
                int selectedIndex = 0;
                
                if (_currentSettings.UseManualRegionSelection && !string.IsNullOrEmpty(_currentSettings.ManuallySelectedRegion))
                {
                    selectedIndex = _availableRegions.FindIndex(r => r.Id == _currentSettings.ManuallySelectedRegion);
                    if (selectedIndex < 0) selectedIndex = 0;
                }
                
                _regionDropdown.value = selectedIndex;
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è dropdown —Ä–µ–≥–∏–æ–Ω–∞: {ex.Message}", MyLogger.LogCategory.UI);
            }
        }
        
        private void UpdateRegionControls()
        {
            try
            {
                if (_currentSettings == null) return;
                
                // –í–∫–ª—é—á–∞–µ–º/–æ—Ç–∫–ª—é—á–∞–µ–º dropdown –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
                bool canSelectRegion = _currentSettings.AllowLocationTracking || _currentSettings.UseManualRegionSelection;
                
                if (_regionDropdown != null)
                    _regionDropdown.interactable = canSelectRegion;
                
                if (_refreshLocationButton != null)
                    _refreshLocationButton.interactable = _currentSettings.AllowLocationTracking;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
                UpdateCurrentLocationText();
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤ —Ä–µ–≥–∏–æ–Ω–∞: {ex.Message}", MyLogger.LogCategory.UI);
            }
        }
        
        private void UpdateCurrentLocationText()
        {
            if (_currentLocationText == null || _currentSettings == null) return;
            
            try
            {
                string locationText = "üìç ";
                
                if (_currentSettings.UseManualRegionSelection && !string.IsNullOrEmpty(_currentSettings.ManuallySelectedRegion))
                {
                    var region = _availableRegions.FirstOrDefault(r => r.Id == _currentSettings.ManuallySelectedRegion);
                    locationText += $"–í—ã–±—Ä–∞–Ω: {region?.DisplayName ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}";
                }
                else if (_currentSettings.AllowLocationTracking)
                {
                    locationText += "–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏";
                }
                else
                {
                    locationText += "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ";
                }
                
                _currentLocationText.text = locationText;
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è: {ex.Message}", MyLogger.LogCategory.UI);
            }
        }
        
        private void UpdateInfoTexts()
        {
            try
            {
                if (_privacyInfoText != null)
                {
                    _privacyInfoText.text = "üîí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏\n\n" +
                        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–º, –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –∏ –∫–∞–∫ –æ–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.\n\n" +
                        "‚Ä¢ –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –≤–∞—à–∏ —ç–º–æ—Ü–∏–∏ —É—á–∞—Å—Ç–≤—É—é—Ç –≤ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ\n" +
                        "‚Ä¢ –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è - –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ –¥–ª—è –º–µ—Å—Ç–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n" +
                        "‚Ä¢ –ê–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏—è - —É–¥–∞–ª–µ–Ω–∏–µ –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π";
                }
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤: {ex.Message}", MyLogger.LogCategory.UI);
            }
        }
        
        private void UpdateDataUsageText()
        {
            if (_dataUsageText == null || _currentSettings == null) return;
            
            try
            {
                string usageText = "üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:\n\n";
                
                if (_currentSettings.AllowGlobalDataSharing)
                {
                    usageText += "‚úÖ –í–∞—à–∏ —ç–º–æ—Ü–∏–∏ —É—á–∞—Å—Ç–≤—É—é—Ç –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ\n";
                    
                    if (_currentSettings.AnonymizeData)
                    {
                        usageText += "üîí –î–∞–Ω–Ω—ã–µ –∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä—É—é—Ç—Å—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π\n";
                    }
                    else
                    {
                        usageText += "‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –±–µ–∑ –∞–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏–∏\n";
                    }
                }
                else
                {
                    usageText += "üö´ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ù–ï —É—á–∞—Å—Ç–≤—É—é—Ç –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ\n";
                }
                
                if (_currentSettings.AllowLocationTracking)
                {
                    usageText += "üìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞\n";
                }
                else
                {
                    usageText += "üö´ –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞\n";
                }
                
                _dataUsageText.text = usageText;
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {ex.Message}", MyLogger.LogCategory.UI);
            }
        }
        
        #endregion
        
        #region Notifications
        
        private void ShowNotification(string message)
        {
            try
            {
                if (_notificationPanel != null && _notificationText != null)
                {
                    _notificationText.text = message;
                    _notificationPanel.SetActive(true);
                }
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {ex.Message}", MyLogger.LogCategory.UI);
            }
        }
        
        private void HideNotification()
        {
            try
            {
                if (_notificationPanel != null)
                {
                    _notificationPanel.SetActive(false);
                }
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ —Å–∫—Ä—ã—Ç–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {ex.Message}", MyLogger.LogCategory.UI);
            }
        }
        
        #endregion
    }
} 
