using System;
using System.Collections.Generic;
using System.Linq;
using App.Develop.CommonServices.Firebase.Auth.Services;
using App.Develop.CommonServices.AssetManagement;
using App.Develop.CommonServices.SceneManagement;
using App.Develop.CommonServices.UI;
using App.Develop.DI;
using App.Develop.Utils.Logging;
using TMPro;
using UnityEngine;
using UnityEngine.UI;

namespace App.Develop.Scenes.PersonalAreaScene.Settings
{
    #region Models and Enums
    [Serializable]
    public class ThemeOption
    {
        public string DisplayName;
        public ThemeType Value;
    }

    [Serializable]
    public class LanguageOption
    {
        public string DisplayName;
        public string Value;
    }

    [Serializable]
    public class RegionOption
    {
        public string DisplayName;
        public string Id;
        public string Description;
        public bool IsAutomatic;

        public RegionOption() { }

        public RegionOption(string id, string displayName, string description = "", bool isAutomatic = false)
        {
            Id = id;
            DisplayName = displayName;
            Description = description;
            IsAutomatic = isAutomatic;
        }
    }
    #endregion

    public class SettingsPanelController : MonoBehaviour, IInjectable
    {
        #region Serialized Fields
        [Header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
        [SerializeField] private Toggle _notificationsToggle;
        [SerializeField] private Toggle _soundToggle;
        [SerializeField] private TMP_Dropdown _themeDropdown;
        [SerializeField] private TMP_Dropdown _languageDropdown;
        [SerializeField] private TMP_Dropdown _regionDropdown;

        [Header("–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞")]
        [SerializeField] private TMP_Text _currentRegionText;

        [Header("–¢–µ–º—ã")]
        [SerializeField]
        private List<ThemeOption> _themeOptions = new List<ThemeOption>
        {
            new ThemeOption { DisplayName = "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é", Value = ThemeType.Default },
            new ThemeOption { DisplayName = "–°–≤–µ—Ç–ª–∞—è", Value = ThemeType.Light },
            new ThemeOption { DisplayName = "–¢—ë–º–Ω–∞—è", Value = ThemeType.Dark }
        };

        [Header("–Ø–∑—ã–∫–∏")]
        [SerializeField]
        private List<LanguageOption> _languageOptions = new List<LanguageOption>
        {
            new LanguageOption { DisplayName = "–†—É—Å—Å–∫–∏–π", Value = "ru" },
            new LanguageOption { DisplayName = "English", Value = "en" }
        };

        [Header("–†–µ–≥–∏–æ–Ω—ã")]
        [SerializeField]
        private List<RegionOption> _regionOptions = new List<RegionOption>();

        [Header("–ö–Ω–æ–ø–∫–∏")]
        [SerializeField] private Button _saveButton;
        [SerializeField] private Button _resetButton;
        [SerializeField] private Button _deleteAccountButton;
        [SerializeField] private Button _privacySettingsButton;
        [SerializeField] private Button _locationSettingsButton;
        [SerializeField] private Button _closeButton;

        [Header("–°–æ–æ–±—â–µ–Ω–∏—è")]
        [SerializeField] private GameObject _popupPanel;
        [SerializeField] private TMP_Text _popupText;
        
        [Header("–ü–∞–Ω–µ–ª–∏")]
        [SerializeField] private GameObject _privacyPanel;
        [SerializeField] private GameObject _locationPanel;
        #endregion

        #region Private Fields
        private ISettingsManager _settingsManager;
        private PanelManager _panelManager;
        private IAuthStateService _authStateService;
        private SceneSwitcher _sceneSwitcher;
        private bool _isInitialized = false;
        private bool _isUpdatingUI = false;
        #endregion

        #region Unity Lifecycle
        private void OnEnable()
        {
            if (_isInitialized)
            {
                LoadCurrentSettings();
            }
        }

        private void OnDestroy()
        {
            UnsubscribeEvents();
        }
        #endregion

        #region Initialization
        public void Inject(DIContainer container)
        {
            _settingsManager = container.Resolve<ISettingsManager>();
            _panelManager = container.Resolve<PanelManager>();
            _authStateService = container.Resolve<IAuthStateService>();
            _sceneSwitcher = container.Resolve<SceneSwitcher>();

            InitializeRegionOptions();
            InitializeControls();
            SubscribeEvents();
            LoadCurrentSettings();

            _isInitialized = true;
        }

        private void InitializeRegionOptions()
        {
            _regionOptions = new List<RegionOption>
            {
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
                new RegionOption("auto", "ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏", "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ GPS", true),

                // –ú–∏–Ω—Å–∫ –∏ —Ä–∞–π–æ–Ω—ã
                new RegionOption("minsk_center", "üèõÔ∏è –ú–∏–Ω—Å–∫ - –¶–µ–Ω—Ç—Ä"),
                new RegionOption("minsk_north", "üèòÔ∏è –ú–∏–Ω—Å–∫ - –°–µ–≤–µ—Ä"),
                new RegionOption("minsk_south", "üè¢ –ú–∏–Ω—Å–∫ - –Æ–≥"),
                new RegionOption("minsk_east", "üåÖ –ú–∏–Ω—Å–∫ - –í–æ—Å—Ç–æ–∫"),
                new RegionOption("minsk_west", "üåá –ú–∏–Ω—Å–∫ - –ó–∞–ø–∞–¥"),

                // –ë—Ä–µ—Å—Ç—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å
                new RegionOption { DisplayName = "üè∞ –ë—Ä–µ—Å—Ç", Id = "brest" },
                new RegionOption { DisplayName = "üåæ –ë–∞—Ä–∞–Ω–æ–≤–∏—á–∏", Id = "baranovichi" },
                new RegionOption { DisplayName = "üå≤ –ü–∏–Ω—Å–∫", Id = "pinsk" },
                new RegionOption { DisplayName = "üèûÔ∏è –ë—Ä–µ—Å—Ç—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", Id = "brest_region" },

                // –í–∏—Ç–µ–±—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å
                new RegionOption { DisplayName = "üèõÔ∏è –í–∏—Ç–µ–±—Å–∫", Id = "vitebsk" },
                new RegionOption { DisplayName = "üèîÔ∏è –ü–æ–ª–æ—Ü–∫", Id = "polotsk" },
                new RegionOption { DisplayName = "üå≤ –û—Ä—à–∞", Id = "orsha" },
                new RegionOption { DisplayName = "üçÉ –í–∏—Ç–µ–±—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", Id = "vitebsk_region" },

                // –ì–æ–º–µ–ª—å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å
                new RegionOption { DisplayName = "üè≠ –ì–æ–º–µ–ª—å", Id = "gomel" },
                new RegionOption { DisplayName = "‚ö° –ú–æ–∑—ã—Ä—å", Id = "mozyr" },
                new RegionOption { DisplayName = "üåæ –†–µ—á–∏—Ü–∞", Id = "rechitsa" },
                new RegionOption { DisplayName = "üåª –ì–æ–º–µ–ª—å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", Id = "gomel_region" },

                // –ì—Ä–æ–¥–Ω–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å
                new RegionOption { DisplayName = "üè∞ –ì—Ä–æ–¥–Ω–æ", Id = "grodno" },
                new RegionOption { DisplayName = "üå∏ –õ–∏–¥–∞", Id = "lida" },
                new RegionOption { DisplayName = "üå≥ –°–ª–æ–Ω–∏–º", Id = "slonim" },
                new RegionOption { DisplayName = "üèûÔ∏è –ì—Ä–æ–¥–Ω–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", Id = "grodno_region" },

                // –ú–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å
                new RegionOption { DisplayName = "üè≠ –ë–æ—Ä–∏—Å–æ–≤", Id = "borisov" },
                new RegionOption { DisplayName = "‚öôÔ∏è –°–æ–ª–∏–≥–æ—Ä—Å–∫", Id = "soligorsk" },
                new RegionOption { DisplayName = "üåæ –ú–æ–ª–æ–¥–µ—á–Ω–æ", Id = "molodechno" },
                new RegionOption { DisplayName = "üåø –ú–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", Id = "minsk_region" },

                // –ú–æ–≥–∏–ª–µ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å
                new RegionOption { DisplayName = "üèõÔ∏è –ú–æ–≥–∏–ª–µ–≤", Id = "mogilev" },
                new RegionOption { DisplayName = "üè≠ –ë–æ–±—Ä—É–π—Å–∫", Id = "bobruisk" },
                new RegionOption { DisplayName = "üåæ –ö—Ä–∏—á–µ–≤", Id = "krichev" },
                new RegionOption { DisplayName = "üåª –ú–æ–≥–∏–ª–µ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", Id = "mogilev_region" },

                // –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –æ–ø—Ü–∏–∏
                new RegionOption { DisplayName = "üáßüáæ –î—Ä—É–≥–æ–π —Ä–µ–≥–∏–æ–Ω –ë–µ–ª–∞—Ä—É—Å–∏", Id = "other_belarus" },
                new RegionOption { DisplayName = "üá∑üá∫ –†–æ—Å—Å–∏—è", Id = "russia" },
                new RegionOption { DisplayName = "üá∫üá¶ –£–∫—Ä–∞–∏–Ω–∞", Id = "ukraine" },
                new RegionOption { DisplayName = "üá±üáπ –õ–∏—Ç–≤–∞", Id = "lithuania" },
                new RegionOption { DisplayName = "üá±üáª –õ–∞—Ç–≤–∏—è", Id = "latvia" },
                new RegionOption { DisplayName = "üá™üá™ –≠—Å—Ç–æ–Ω–∏—è", Id = "estonia" },
                new RegionOption { DisplayName = "üáµüá± –ü–æ–ª—å—à–∞", Id = "poland" },
                new RegionOption { DisplayName = "üåç –î—Ä—É–≥–∞—è —Å—Ç—Ä–∞–Ω–∞", Id = "international" },
                new RegionOption { DisplayName = "ü§ê –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å", Id = "prefer_not_say" }
            };
        }

        private void InitializeControls()
        {
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º
            if (_themeDropdown != null)
            {
                _themeDropdown.ClearOptions();
                _themeDropdown.AddOptions(_themeOptions.ConvertAll(t => t.DisplayName));
            }

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —è–∑—ã–∫–æ–≤
            if (_languageDropdown != null)
            {
                _languageDropdown.ClearOptions();
                _languageDropdown.AddOptions(_languageOptions.ConvertAll(l => l.DisplayName));
            }

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤
            if (_regionDropdown != null)
            {
                _regionDropdown.ClearOptions();
                _regionDropdown.AddOptions(_regionOptions.ConvertAll(r => r.DisplayName));
            }

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
            UpdateCurrentRegionDisplay();
        }

        private void SubscribeEvents()
        {
            if (_saveButton != null)
                _saveButton.onClick.AddListener(SaveSettings);

            if (_resetButton != null)
                _resetButton.onClick.AddListener(ResetSettings);

            if (_deleteAccountButton != null)
                _deleteAccountButton.onClick.AddListener(ShowDeleteAccountPanel);

            if (_privacySettingsButton != null)
                _privacySettingsButton.onClick.AddListener(ShowPrivacyPanel);

            if (_locationSettingsButton != null)
                _locationSettingsButton.onClick.AddListener(ShowLocationPanel);

            if (_closeButton != null)
                _closeButton.onClick.AddListener(ClosePanel);

            if (_notificationsToggle != null)
                _notificationsToggle.onValueChanged.AddListener(OnNotificationsChanged);

            if (_soundToggle != null)
                _soundToggle.onValueChanged.AddListener(OnSoundChanged);

            if (_themeDropdown != null)
                _themeDropdown.onValueChanged.AddListener(OnThemeChanged);

            if (_languageDropdown != null)
                _languageDropdown.onValueChanged.AddListener(OnLanguageChanged);

            if (_regionDropdown != null)
                _regionDropdown.onValueChanged.AddListener(OnRegionChanged);
        }

        private void UnsubscribeEvents()
        {
            if (_saveButton != null)
                _saveButton.onClick.RemoveListener(SaveSettings);

            if (_resetButton != null)
                _resetButton.onClick.RemoveListener(ResetSettings);

            if (_deleteAccountButton != null)
                _deleteAccountButton.onClick.RemoveListener(ShowDeleteAccountPanel);

            if (_privacySettingsButton != null)
                _privacySettingsButton.onClick.RemoveListener(ShowPrivacyPanel);

            if (_locationSettingsButton != null)
                _locationSettingsButton.onClick.RemoveListener(ShowLocationPanel);

            if (_closeButton != null)
                _closeButton.onClick.RemoveListener(ClosePanel);

            if (_notificationsToggle != null)
                _notificationsToggle.onValueChanged.RemoveListener(OnNotificationsChanged);

            if (_soundToggle != null)
                _soundToggle.onValueChanged.RemoveListener(OnSoundChanged);

            if (_themeDropdown != null)
                _themeDropdown.onValueChanged.RemoveListener(OnThemeChanged);

            if (_languageDropdown != null)
                _languageDropdown.onValueChanged.RemoveListener(OnLanguageChanged);

            if (_regionDropdown != null)
                _regionDropdown.onValueChanged.RemoveListener(OnRegionChanged);
        }
        #endregion

        #region UI Event Handlers
        private void OnNotificationsChanged(bool value)
        {
            _settingsManager.SetNotifications(value);
        }

        private void OnSoundChanged(bool value)
        {
            _settingsManager.SetSound(value);
        }

        private void OnThemeChanged(int index)
        {
            if (index >= 0 && index < _themeOptions.Count)
            {
                _settingsManager.SetTheme(_themeOptions[index].Value);
            }
        }

        private void OnLanguageChanged(int index)
        {
            if (index >= 0 && index < _languageOptions.Count)
            {
                _settingsManager.SetLanguage(_languageOptions[index].Value);
            }
        }

        private void OnRegionChanged(int index)
        {
            if (_isUpdatingUI || index < 0 || index >= _regionOptions.Count) return;
            
            var selectedRegion = _regionOptions[index];
            _settingsManager.SetSelectedRegion(selectedRegion.Id);
            UpdateCurrentRegionDisplay();
            
            MyLogger.Log($"üó∫Ô∏è –í—ã–±—Ä–∞–Ω —Ä–µ–≥–∏–æ–Ω: {selectedRegion.DisplayName} ({selectedRegion.Id})", MyLogger.LogCategory.Regional);
        }
        #endregion

        #region Settings Management
        private void LoadCurrentSettings()
        {
            try
            {
                _isUpdatingUI = true;
                
                var settings = _settingsManager.GetCurrentSettings();

                if (_notificationsToggle != null)
                    _notificationsToggle.isOn = settings.notifications;

                if (_soundToggle != null)
                    _soundToggle.isOn = settings.sound;

                if (_themeDropdown != null)
                {
                    int themeIndex = _themeOptions.FindIndex(t => t.Value == settings.theme);
                    _themeDropdown.value = themeIndex >= 0 ? themeIndex : 0;
                }

                if (_languageDropdown != null)
                {
                    int languageIndex = _languageOptions.FindIndex(l => l.Value == settings.language);
                    _languageDropdown.value = languageIndex >= 0 ? languageIndex : 0;
                }

                if (_regionDropdown != null)
                {
                    int regionIndex = _regionOptions.FindIndex(r => r.Id == settings.selectedRegion);
                    _regionDropdown.value = regionIndex >= 0 ? regionIndex : 0;
                }
                
                UpdateCurrentRegionDisplay();
                
                _isUpdatingUI = false;
                
                MyLogger.Log("üì± –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ UI –ø–∞–Ω–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫", MyLogger.LogCategory.UI);
            }
            catch (Exception ex)
            {
                _isUpdatingUI = false;
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ UI: {ex.Message}", MyLogger.LogCategory.UI);
            }
        }

        private void SaveSettings()
        {
            _settingsManager.SaveSettings();
            UpdateCurrentRegionDisplay();
            ShowPopup("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã");
            MyLogger.Log("üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–Ω–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", MyLogger.LogCategory.UI);
        }

        private void ResetSettings()
        {
            _settingsManager.ResetSettings();
            LoadCurrentSettings();
            ShowPopup("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã");
            MyLogger.Log("üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–Ω–µ–ª–∏ —Å–±—Ä–æ—à–µ–Ω—ã", MyLogger.LogCategory.UI);
        }
        #endregion

        #region Privacy Settings
        private void ShowPrivacyPanel()
        {
            try
            {
                if (_privacyPanel != null)
                {
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–≤–µ—Ä—Ö –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏
                    _privacyPanel.SetActive(true);
                    
                    // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø–∞–Ω–µ–ª—å –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø–æ–≤–µ—Ä—Ö
                    _privacyPanel.transform.SetAsLastSibling();
                    
                    MyLogger.Log("üîí –û—Ç–∫—Ä—ã—Ç–∞ –ø–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏", MyLogger.LogCategory.UI);
                }
                else
                {
                    MyLogger.LogWarning("‚ö†Ô∏è –ü–∞–Ω–µ–ª—å –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞", MyLogger.LogCategory.UI);
                    ShowPopup("–ü–∞–Ω–µ–ª—å –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
                }
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–∞–Ω–µ–ª–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏: {ex.Message}", MyLogger.LogCategory.UI);
                ShowPopup("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏");
            }
        }
        #endregion

        #region Location Settings
        private void ShowLocationPanel()
        {
            try
            {
                if (_locationPanel != null)
                {
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏ –ø–æ–≤–µ—Ä—Ö –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏
                    _locationPanel.SetActive(true);
                    
                    // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø–∞–Ω–µ–ª—å –ª–æ–∫–∞—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø–æ–≤–µ—Ä—Ö
                    _locationPanel.transform.SetAsLastSibling();
                    
                    MyLogger.Log("üìç –û—Ç–∫—Ä—ã—Ç–∞ –ø–∞–Ω–µ–ª—å –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏", MyLogger.LogCategory.UI);
                }
                else
                {
                    MyLogger.LogWarning("‚ö†Ô∏è –ü–∞–Ω–µ–ª—å –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞", MyLogger.LogCategory.UI);
                    ShowPopup("–ü–∞–Ω–µ–ª—å –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
                }
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–∞–Ω–µ–ª–∏ –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏: {ex.Message}", MyLogger.LogCategory.UI);
                ShowPopup("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏ –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏");
            }
        }
        #endregion

        #region Account Deletion
        private void ShowDeleteAccountPanel()
        {
            MyLogger.Log("üîò –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫–∞–∑ –ø–∞–Ω–µ–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞");

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –ø–∞–Ω–µ–ª–∏
            if (_authStateService == null || !_authStateService.IsAuthenticated)
            {
                MyLogger.LogError("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–∫–∞–∑–∞—Ç—å –ø–∞–Ω–µ–ª—å —É–¥–∞–ª–µ–Ω–∏—è");
                ShowPopup("–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.");

                // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —ç–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
                Invoke(nameof(RedirectToAuth), 2f);
                return;
            }

            MyLogger.Log($"‚úÖ –ü–æ–∫–∞–∑ –ø–∞–Ω–µ–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {_authStateService.CurrentUser.Email}");
            _ = _panelManager.TogglePanelAsync<AccountDeletionManager>(AssetAddresses.DeletionAccountPanel);
        }

        private void RedirectToAuth()
        {
            _sceneSwitcher.ProcessSwitchSceneFor(new OutputPersonalAreaScreenArgs(new AuthSceneInputArgs()));
        }

        private void ClosePanel()
        {
            if (_panelManager != null)
            {
                _ = _panelManager.TogglePanelAsync<SettingsPanelController>(AssetAddresses.SettingsPanel);
            }
        }
        #endregion

        #region Utilities
        private void ShowPopup(string message)
        {
            if (_popupPanel == null || _popupText == null) return;

            _popupText.text = message;
            _popupPanel.SetActive(true);
            CancelInvoke(nameof(HidePopup));
            Invoke(nameof(HidePopup), 3f);
        }

        private void HidePopup()
        {
            if (_popupPanel != null)
                _popupPanel.SetActive(false);
        }

        private void UpdateCurrentRegionDisplay()
        {
            if (_currentRegionText != null && _settingsManager != null)
            {
                try
                {
                    var settings = _settingsManager.GetCurrentSettings();
                    var region = _regionOptions.FirstOrDefault(r => r.Id == settings.selectedRegion);
                    
                    if (region != null)
                    {
                        _currentRegionText.text = $"üìç –¢–µ–∫—É—â–∏–π —Ä–µ–≥–∏–æ–Ω: {region.DisplayName}";
                    }
                    else
                    {
                        _currentRegionText.text = "üìç –¢–µ–∫—É—â–∏–π —Ä–µ–≥–∏–æ–Ω: –ù–µ –≤—ã–±—Ä–∞–Ω";
                    }
                }
                catch (Exception ex)
                {
                    MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞: {ex.Message}", MyLogger.LogCategory.UI);
                    _currentRegionText.text = "üìç –¢–µ–∫—É—â–∏–π —Ä–µ–≥–∏–æ–Ω: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏";
                }
            }
        }
        #endregion
    }
}