using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using App.Develop.CommonServices.Firebase.Auth.Services;
using App.Develop.CommonServices.Firebase.Common.SecureStorage;
using App.Develop.Utils.Logging;
using Firebase.Auth;
using Firebase.Database;
using Firebase.Extensions;
using UnityEngine;

namespace App.Develop.Scenes.PersonalAreaScene.Settings
{
    /// <summary>
    /// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    /// –°–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–≥–∏–∫—É —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ Firebase.
    /// </summary>
    public class AccountDeletionHelper
    {
        #region Private Fields
        private readonly DatabaseReference _database;
        private readonly IAuthStateService _authStateService;
        #endregion
        
        #region Public Events
        public event Action<string> OnMessage;
        public event Action<string> OnError;
        public event Action OnUserDeleted;
        public event Action OnRedirectToAuth;
        #endregion
        
        #region Constructor
        public AccountDeletionHelper(DatabaseReference database, IAuthStateService authStateService)
        {
            _database = database ?? throw new ArgumentNullException(nameof(database));
            _authStateService = authStateService ?? throw new ArgumentNullException(nameof(authStateService));
        }
        #endregion
        
        #region Public Methods
        /// <summary>
        /// –£–¥–∞–ª—è–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        /// </summary>
        public void DeleteAccount(string password)
        {
            if (string.IsNullOrWhiteSpace(password))
            {
                OnError?.Invoke("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.");
                return;
            }
            
            if (!_authStateService.IsAuthenticated)
            {
                OnError?.Invoke("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤—Ö–æ–¥.");
                OnRedirectToAuth?.Invoke();
                return;
            }
            
            var user = _authStateService.CurrentUser;
            var email = user.Email;
            MyLogger.Log($"üìß –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {email ?? "null"}, UID: {user.UserId}");
            
            if (string.IsNullOrEmpty(email))
            {
                OnError?.Invoke("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å email. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç.");
                return;
            }
            
            try
            {
                var credential = EmailAuthProvider.GetCredential(email, password);
                
                user.ReauthenticateAsync(credential).ContinueWithOnMainThread(task =>
                {
                    if (task.IsFaulted)
                    {
                        MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {task.Exception?.GetBaseException()?.Message}");
                        OnError?.Invoke("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏–ª–∏ –æ—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.");
                        return;
                    }
                    
                    DeleteUserData();
                });
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {ex.Message}");
                OnError?.Invoke("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.");
            }
        }
        #endregion
        
        #region Private Methods
        /// <summary>
        /// –£–¥–∞–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        /// </summary>
        private void DeleteUserData()
        {
            if (!_authStateService.IsAuthenticated)
            {
                OnError?.Invoke("–û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –í–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.");
                OnRedirectToAuth?.Invoke();
                return;
            }
            
            var uid = _authStateService.CurrentUser.UserId;
            MyLogger.Log($"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {uid}");
            
            _database
                .Child("users")
                .Child(uid)
                .RemoveValueAsync()
                .ContinueWithOnMainThread(task =>
                {
                    if (task.IsFaulted)
                    {
                        MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {task.Exception?.GetBaseException()?.Message}");
                        MyLogger.LogWarning("‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –∞–∫–∫–∞—É–Ω—Ç–∞, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö");
                    }
                    else
                    {
                        MyLogger.Log("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã");
                    }
                    
                    if (!_authStateService.IsAuthenticated)
                    {
                        OnError?.Invoke("–û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —É–¥–∞–ª–µ–Ω–∏—è. –î–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã, –Ω–æ –∞–∫–∫–∞—É–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω.");
                        OnRedirectToAuth?.Invoke();
                        return;
                    }
                    
                    DeleteFirebaseUser();
                });
        }
        
        /// <summary>
        /// –£–¥–∞–ª—è–µ—Ç —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Firebase
        /// </summary>
        private void DeleteFirebaseUser()
        {
            if (!_authStateService.IsAuthenticated)
            {
                OnError?.Invoke("–û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –í–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.");
                OnRedirectToAuth?.Invoke();
                return;
            }
            
            MyLogger.Log($"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ Firebase: {_authStateService.CurrentUser.Email}");
            
            _authStateService.CurrentUser.DeleteAsync().ContinueWithOnMainThread(task =>
            {
                if (task.IsFaulted)
                {
                    MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {task.Exception?.GetBaseException()?.Message}");
                    
                    bool requiresReauth = task.Exception?.InnerExceptions.Any(ex => 
                        ex.Message.Contains("requires recent authentication") || 
                        ex.Message.Contains("requires a recent login")) ?? false;
                    
                    if (requiresReauth)
                    {
                        OnError?.Invoke("–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.");
                        OnRedirectToAuth?.Invoke();
                    }
                    else
                    {
                        OnError?.Invoke("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.");
                    }
                    
                    return;
                }
                
                MyLogger.Log("‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω");
                CleanupStoredCredentials();
                OnMessage?.Invoke("–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.");
                OnUserDeleted?.Invoke();
            });
        }
        
        /// <summary>
        /// –û—á–∏—â–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        /// </summary>
        private void CleanupStoredCredentials()
        {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —è–≤–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
            SecurePlayerPrefs.SetBool("explicit_logout", true);
            SecurePlayerPrefs.Save();
            MyLogger.Log("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥ —è–≤–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞");
        }
        #endregion
    }
} 