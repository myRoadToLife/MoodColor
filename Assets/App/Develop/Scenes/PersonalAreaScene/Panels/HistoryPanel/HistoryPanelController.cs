using App.Develop.CommonServices.AssetManagement;
using App.Develop.CommonServices.UI;
using App.Develop.DI;
using App.Develop.Utils.Logging;
using UnityEngine;
using UnityEngine.UI;
using TMPro;
using App.Develop.CommonServices.Emotion;
using System.Collections.Generic;
using System.Linq;
using App.Develop.Scenes.PersonalAreaScene.Panels.HistoryPanel;
using System;
using Firebase.Auth;

namespace App.Develop.Scenes.PersonalAreaScene.UI
{
    public class HistoryPanelController : MonoBehaviour, IInjectable
    {
        #region Serialized Fields
        [Header("UI Elements")]
        [SerializeField] private Transform _historyItemsContainer;
        [SerializeField] private GameObject _historyItemPrefab;

        [Header("–ö–Ω–æ–ø–∫–∏")]
        [SerializeField] private Button _closeButton;
        
        [Header("–°–æ–æ–±—â–µ–Ω–∏—è")]
        [SerializeField] private GameObject _popupPanel;
        [SerializeField] private TMP_Text _popupText;
        #endregion

        #region Private Fields
        private PanelManager _panelManager;
        private EmotionService _emotionService;
        private bool _isInitialized = false;
        #endregion

        #region Unity Lifecycle
        private void OnEnable()
        {
            MyLogger.Log("[HistoryPanelController] OnEnable –≤—ã–∑–≤–∞–Ω - –Ω–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∏—Å—Ç–æ—Ä–∏–∏", MyLogger.LogCategory.Sync);
            
            if (_isInitialized)
            {
                LoadHistoryData();
            }
            else
            {
                MyLogger.LogWarning("[HistoryPanelController] OnEnable: –ø–∞–Ω–µ–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");
            }
        }
        
        private void OnDisable()
        {
            MyLogger.Log("[HistoryPanelController] OnDisable –≤—ã–∑–≤–∞–Ω - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –æ–±–ª–∞–∫–æ", MyLogger.LogCategory.Sync);
            
            if (_isInitialized && _emotionService != null)
            {
                // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å –æ–±–ª–∞–∫–æ–º –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–∞–Ω–µ–ª–∏
                SyncLocalChangesToCloud();
            }
        }
        
        private void OnDestroy()
        {
            UnsubscribeEvents();
        }
        #endregion

        #region Initialization
        public void Inject(DIContainer container)
        {
            _panelManager = container.Resolve<PanelManager>();
            _emotionService = container.Resolve<EmotionService>();

            if (_emotionService == null)
            {
                MyLogger.LogError("[HistoryPanelController] EmotionService –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞!");
            }

            SubscribeEvents();
            
            _isInitialized = true;
            
            if (gameObject.activeInHierarchy)
            {
                LoadHistoryData();
            }
        }

        private void SubscribeEvents()
        {
            if (_closeButton != null)
                _closeButton.onClick.AddListener(ClosePanel);
        }

        private void UnsubscribeEvents()
        {
            if (_closeButton != null)
                _closeButton.onClick.RemoveListener(ClosePanel);
        }
        #endregion

        #region UI Event Handlers
        private void LoadHistoryData()
        {
            if (!_isInitialized)
            {
                MyLogger.LogWarning("[HistoryPanelController] –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.");
                return;
            }

            if (_emotionService == null)
            {
                MyLogger.LogError("[HistoryPanelController] EmotionService –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –ù–µ –º–æ–≥—É –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é.");
                return;
            }

            MyLogger.Log("[HistoryPanelController] –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —ç–º–æ—Ü–∏–π...", MyLogger.LogCategory.UI);
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –∏—Å—Ç–æ—Ä–∏–∏
            StartCoroutine(LoadHistoryWithSync());
        }

        private System.Collections.IEnumerator LoadHistoryWithSync()
        {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            if (_popupPanel != null)
            {
                _popupPanel.SetActive(true);
                if (_popupText != null)
                    _popupText.text = "–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏...";
            }
            
            MyLogger.Log("[HistoryPanelController] üîÑ –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π", MyLogger.LogCategory.Sync);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏ –î–û —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            int recordsBeforeSync = 0;
            if (_emotionService != null)
            {
                var historyBeforeSync = _emotionService.GetEmotionHistory().ToList();
                recordsBeforeSync = historyBeforeSync.Count;
                MyLogger.Log($"[HistoryPanelController] üìä –ó–∞–ø–∏—Å–µ–π –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –î–û —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {recordsBeforeSync}", MyLogger.LogCategory.Sync);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º Firebase —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            bool canSync = _emotionService != null && _emotionService.IsFirebaseInitialized && _emotionService.IsAuthenticated;
            MyLogger.Log($"[HistoryPanelController] üîó –°–æ—Å—Ç–æ—è–Ω–∏–µ Firebase: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω={_emotionService?.IsFirebaseInitialized}, –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω={_emotionService?.IsAuthenticated}", MyLogger.LogCategory.Firebase);
            
            if (canSync)
            {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
                if (_popupText != null)
                    _popupText.text = "–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏...";
                
                MyLogger.Log("[HistoryPanelController] ‚òÅÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å Firebase (–∑–∞–º–µ—â–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)...", MyLogger.LogCategory.Sync);
                
                // –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Firebase
                var refreshTask = _emotionService.ReplaceHistoryFromFirebase();
                
                // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
                while (!refreshTask.IsCompleted)
                {
                    yield return null;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
                if (refreshTask.IsFaulted)
                {
                    MyLogger.LogError($"[HistoryPanelController] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Firebase: {refreshTask.Exception?.GetBaseException()?.Message}", MyLogger.LogCategory.Sync);
                    if (_popupText != null)
                        _popupText.text = "–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏";
                    yield return new WaitForSeconds(2f);
                }
                else
                {
                    MyLogger.Log("[HistoryPanelController] ‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Firebase –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ", MyLogger.LogCategory.Sync);
                }
            }
            else
            {
                MyLogger.LogWarning("[HistoryPanelController] ‚ö†Ô∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", MyLogger.LogCategory.Sync);
                if (_popupText != null)
                    _popupText.text = "–ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...";
                yield return new WaitForSeconds(0.5f);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏ –ü–û–°–õ–ï —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            int recordsAfterSync = 0;
            if (_emotionService != null)
            {
                var historyAfterSync = _emotionService.GetEmotionHistory().ToList();
                recordsAfterSync = historyAfterSync.Count;
                MyLogger.Log($"[HistoryPanelController] üìä –ó–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏ –ü–û–°–õ–ï —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {recordsAfterSync} (–∏–∑–º–µ–Ω–µ–Ω–∏–µ: {recordsAfterSync - recordsBeforeSync})", MyLogger.LogCategory.Sync);
            }
            
            // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
            if (_popupPanel != null)
                _popupPanel.SetActive(false);

            // –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            MyLogger.Log("[HistoryPanelController] üé® –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ UI...", MyLogger.LogCategory.UI);
            DisplayHistory();
        }

        private void DisplayHistory()
        {
            MyLogger.Log("[HistoryPanelController] DisplayHistory –≤—ã–∑–≤–∞–Ω", MyLogger.LogCategory.UI);
            
            if (_historyItemPrefab == null)
            {
                MyLogger.LogError("[HistoryPanelController] –ü—Ä–µ—Ñ–∞–± —ç–ª–µ–º–µ–Ω—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏ (_historyItemPrefab) –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω!");
                return;
            }
            if (_historyItemsContainer == null)
            {
                 MyLogger.LogError("[HistoryPanelController] –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏—Å—Ç–æ—Ä–∏–∏ (_historyItemsContainer) –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω!");
                return;
            }

            // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            if (_historyItemsContainer != null)
            {
                MyLogger.Log($"[HistoryPanelController] –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π: {_historyItemsContainer.childCount}", MyLogger.LogCategory.UI);
                foreach (Transform child in _historyItemsContainer)
                {
                    Destroy(child.gameObject);
                }
            }

            IEnumerable<EmotionHistoryEntry> historyEntries = _emotionService.GetEmotionHistory();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∏–∑ GetEmotionHistory
            MyLogger.Log($"[HistoryPanelController] GetEmotionHistory –≤–µ—Ä–Ω—É–ª {(historyEntries == null ? "NULL" : "–Ω–µ NULL")}", MyLogger.LogCategory.UI);

            if (historyEntries == null)
            {
                MyLogger.LogWarning("[HistoryPanelController] GetEmotionHistory() –≤–µ—Ä–Ω—É–ª null.", MyLogger.LogCategory.UI);
                // TODO: –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏"
                return;
            }

            List<EmotionHistoryEntry> entriesList = historyEntries.ToList();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Å–ø–∏—Å–∫–µ
            MyLogger.Log($"[HistoryPanelController] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: {entriesList.Count}", MyLogger.LogCategory.UI);

            if (!entriesList.Any())
            {
                MyLogger.Log("[HistoryPanelController] –ò—Å—Ç–æ—Ä–∏—è —ç–º–æ—Ü–∏–π –ø—É—Å—Ç–∞ (–ø–æ—Å–ª–µ ToList()).", MyLogger.LogCategory.UI);
                // TODO: –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ "–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞" (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç)
                return;
            }
            
            // –°–û–ó–î–ê–ï–ú –°–ü–ò–°–û–ö –ö–õ–û–ù–ò–†–û–í–ê–ù–ù–´–• –ó–ê–ü–ò–°–ï–ô
            List<EmotionHistoryEntry> clonedEntriesList = new List<EmotionHistoryEntry>();
            foreach (var originalEntry in entriesList)
            {
                if (originalEntry != null)
                {
                    clonedEntriesList.Add(originalEntry.Clone());
                }
                else
                {
                    MyLogger.LogWarning("[HistoryPanelController] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ null –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Å–ø–∏—Å–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏, –ø—Ä–æ–ø—É—Å–∫.", MyLogger.LogCategory.UI);
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –ø–æ—Å–ª–µ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            MyLogger.Log($"[HistoryPanelController] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {clonedEntriesList.Count}", MyLogger.LogCategory.UI);

            var sortedEntries = clonedEntriesList.OrderByDescending(e => e.Timestamp).ToList();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –ø–æ—Å–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            MyLogger.Log($"[HistoryPanelController] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {sortedEntries.Count}", MyLogger.LogCategory.UI);

            // –ù–ï –æ—á–∏—â–∞–µ–º —Å–Ω–æ–≤–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä - –º—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ —ç—Ç–æ –≤—ã—à–µ

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º sortedEntries –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            foreach (var entry in sortedEntries) 
            {
                if (entry == null) // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —Ö–æ—Ç—è –ø–æ—Å–ª–µ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ null —ç—Ç–æ –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ
                {
                    MyLogger.LogWarning("[HistoryPanelController] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ null –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏, –ø—Ä–æ–ø—É—Å–∫.", MyLogger.LogCategory.UI);
                    continue;
                }
                
                // –ù–û–í–´–ô –õ–û–ì –ó–î–ï–°–¨
                MyLogger.Log($"[HistoryPanelController Loop] –ì–æ—Ç–æ–≤–∏–º –∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—é: Timestamp='{entry.Timestamp:O}', Kind='{entry.Timestamp.Kind}', Type='{entry.EmotionData?.Type}'", MyLogger.LogCategory.UI);

                GameObject itemInstance = Instantiate(_historyItemPrefab, _historyItemsContainer);
                var itemView = itemInstance.GetComponent<HistoryItemView>(); 
                
                if (itemView != null)
                {
                    itemView.Setup(entry);
                    MyLogger.Log($"[HistoryPanelController] –≠–ª–µ–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {entry.EmotionData?.Type}", MyLogger.LogCategory.UI);
                }
                else
                {
                    MyLogger.LogError($"[HistoryPanelController] –ù–∞ –ø—Ä–µ—Ñ–∞–±–µ '{_historyItemPrefab.name}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç HistoryItemView. –ó–∞–ø–∏—Å—å –Ω–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞: {entry.EmotionData?.Type} @ {entry.Timestamp}", MyLogger.LogCategory.UI);
                }
            }
            
            // –§–∏–Ω–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            MyLogger.Log($"[HistoryPanelController] DisplayHistory –∑–∞–≤–µ—Ä—à–µ–Ω. –°–æ–∑–¥–∞–Ω–æ {(_historyItemsContainer != null ? _historyItemsContainer.childCount : 0)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏—Å—Ç–æ—Ä–∏–∏.", MyLogger.LogCategory.UI);
        }
        
        private void ClosePanel()
        {
            if (_panelManager != null)
            {
                _ = _panelManager.TogglePanelAsync<HistoryPanelController>(AssetAddresses.HistoryPanel);
            }
        }
        
        /// <summary>
        /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å –æ–±–ª–∞–∫–æ–º –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–∞–Ω–µ–ª–∏
        /// </summary>
        private void SyncLocalChangesToCloud()
        {
            if (_emotionService == null)
            {
                MyLogger.LogWarning("[HistoryPanelController] EmotionService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏");
                return;
            }
            
            if (!_emotionService.IsFirebaseInitialized || !_emotionService.IsAuthenticated)
            {
                MyLogger.Log("[HistoryPanelController] Firebase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é.", MyLogger.LogCategory.Sync);
                return;
            }
            
            try
            {
                MyLogger.Log("[HistoryPanelController] üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –æ–±–ª–∞–∫–æ...", MyLogger.LogCategory.Sync);
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é (–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –≤ –æ–±–ª–∞–∫–æ)
                _emotionService.StartSync();
                
                MyLogger.Log("[HistoryPanelController] ‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω–∞", MyLogger.LogCategory.Sync);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"[HistoryPanelController] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π: {ex.Message}", MyLogger.LogCategory.Sync);
            }
        }
        #endregion

        #region Popup Handling
        private void ShowPopup(string message)
        {
            if (_popupPanel != null && _popupText != null)
            {
                _popupText.text = message;
                _popupPanel.SetActive(true);
                
                Invoke(nameof(HidePopup), 2f);
            }
        }

        private void HidePopup()
        {
            if (_popupPanel != null)
            {
                _popupPanel.SetActive(false);
            }
        }
        #endregion
    }
} 