using System;
using App.Develop.CommonServices.Emotion;
using App.Develop.CommonServices.SceneManagement;
using App.Develop.DI;
using App.Develop.Scenes.PersonalAreaScene.Settings;
using UnityEngine;

namespace App.Develop.Scenes.PersonalAreaScene
{
    public class PersonalAreaManager : MonoBehaviour, IInjectable
    {
        [SerializeField] private PersonalAreaUIController _ui;

        private PersonalAreaService _service;
        private SceneSwitcher _sceneSwitcher;

        public void Inject(DIContainer container)
        {
            _service = container.Resolve<PersonalAreaService>();
            _sceneSwitcher = container.Resolve<SceneSwitcher>();

            _ui.Initialize();
            _ui.SetUsername("Username"); // TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            _ui.SetCurrentEmotion(null); // –ü–æ–∫–∞ –Ω–µ—Ç —Å–ø—Ä–∞–π—Ç–∞ —ç–º–æ—Ü–∏–∏

            foreach (EmotionTypes type in Enum.GetValues(typeof(EmotionTypes)))
            {
                if (type == EmotionTypes.Disgust) continue; // ‚ùå –≤—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–∫–ª—é—á–∞–µ–º

                var variable = _service.GetEmotionVariable(type);
                _ui.SetJar(type, variable.Value.Value);

                variable.Changed += (_, newData) => _ui.SetJar(type, newData.Value);
            }

            _ui.SetPoints(0);   // TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            _ui.SetEntries(0);  // TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

            _ui.OnLogEmotion += () => Debug.Log("üìù –õ–æ–≥–∏—Ä—É–µ–º —ç–º–æ—Ü–∏—é");
            _ui.OnOpenHistory += () => Debug.Log("üìú –ò—Å—Ç–æ—Ä–∏—è");
            _ui.OnOpenFriends += () => Debug.Log("üë• –î—Ä—É–∑—å—è");
            _ui.OnOpenSettings += ShowSettingsPanel;
            _ui.OnOpenWorkshop += () => Debug.Log("üõ†Ô∏è –ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è");
        }

        private void ShowSettingsPanel()
        {
            AccountDeletionManager settingsPrefab = Resources.Load<AccountDeletionManager>("UI/SettingsPanel");
            if (settingsPrefab != null)
            {
                Instantiate(settingsPrefab);
            }
            else
            {
                Debug.LogError("‚ùå SettingsPanel –ø—Ä–µ—Ñ–∞–± –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Resources/UI/SettingsPanel");
            }
        }
    }
}
