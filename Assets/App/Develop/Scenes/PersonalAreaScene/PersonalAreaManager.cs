using System;
using App.Develop.CommonServices.Emotion;
using App.Develop.CommonServices.SceneManagement;
using App.Develop.DI;
using App.Develop.Scenes.PersonalAreaScene.Settings;
using UnityEngine;

namespace App.Develop.Scenes.PersonalAreaScene
{
    public class PersonalAreaManager : MonoBehaviour
    {
        [SerializeField] private PersonalAreaUIController _ui;

        private PersonalAreaService _service;
        private SceneSwitcher _sceneSwitcher;
        private MonoFactory _factory;
        private IInjectable _injectableImplementation;

        public void Inject(DIContainer container, MonoFactory factory)
        {
            _service = container.Resolve<PersonalAreaService>();
            _sceneSwitcher = container.Resolve<SceneSwitcher>();
            _factory = factory;

            InitializeUI();
        }

        private void InitializeUI()
        {
            _ui.Initialize();

            _ui.SetUsername("Username"); // TODO: –ø–æ–¥–≥—Ä—É–∑–∏—Ç—å –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
            _ui.SetCurrentEmotion(null); // TODO: –∏–ª–∏ –ø–µ—Ä–µ–¥–∞—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π Sprite

            // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —ç–º–æ—Ü–∏–∏
            foreach (EmotionTypes type in Enum.GetValues(typeof(EmotionTypes)))
            {
                var variable = _service.GetEmotionVariable(type);
                _ui.SetJar(type, variable.Value.Value);

                variable.Changed += (_, newData) =>
                    _ui.SetJar(type, newData.Value);
            }

            _ui.SetPoints(0); // TODO: –∑–∞–º–µ–Ω–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            _ui.SetEntries(0); // TODO: –∑–∞–º–µ–Ω–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏

            // –ö–Ω–æ–ø–∫–∏
            _ui.OnLogEmotion += () => Debug.Log("üìù –õ–æ–≥–∏—Ä—É–µ–º —ç–º–æ—Ü–∏—é");
            _ui.OnOpenHistory += () => Debug.Log("üìú –ò—Å—Ç–æ—Ä–∏—è");
            _ui.OnOpenFriends += () => Debug.Log("üë• –î—Ä—É–∑—å—è");
            _ui.OnOpenWorkshop += () => Debug.Log("üõ†Ô∏è –ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è");
            _ui.OnOpenSettings += ShowSettingsPanel;
        }

        private GameObject _settingsPanelInstance;

        private void ShowSettingsPanel()
        {
            // üîÅ –ï—Å–ª–∏ –ø–∞–Ω–µ–ª—å —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–∫—Ä—ã–≤–∞–µ–º
            if (_settingsPanelInstance != null)
            {
                bool isActive = _settingsPanelInstance.activeSelf;
                _settingsPanelInstance.SetActive(!isActive);
                Debug.Log(isActive ? "üîΩ –ü–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∫—Ä—ã—Ç–∞" : "üîº –ü–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–∫–∞–∑–∞–Ω–∞");
                return;
            }

            Debug.Log("‚öôÔ∏è –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫");

            var prefab = Resources.Load<GameObject>("UI/DeletionAccountPanel");

            if (prefab == null)
            {
                Debug.LogError("‚ùå –ü—Ä–µ—Ñ–∞–± SettingsPanel –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Resources/UI/DeletionAccountPanel");
                return;
            }

            _settingsPanelInstance = Instantiate(prefab);

            var deletionManager = _settingsPanelInstance.GetComponentInChildren<AccountDeletionManager>();

            if (deletionManager == null)
            {
                Debug.LogError("‚ùå AccountDeletionManager –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –∏–Ω—Å—Ç–∞–Ω—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø—Ä–µ—Ñ–∞–±–µ");
                return;
            }

            _factory.CreateOn<AccountDeletionManager>(deletionManager.gameObject);
        }
    }
}
