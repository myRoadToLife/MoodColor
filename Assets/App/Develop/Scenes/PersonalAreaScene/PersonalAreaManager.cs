using System;
using App.Develop.CommonServices.Emotion;
using App.Develop.CommonServices.SceneManagement;
using App.Develop.CommonServices.UI;
using App.Develop.DI;
using App.Develop.Scenes.PersonalAreaScene.Settings;
using App.Develop.Scenes.PersonalAreaScene.UI;
using Unity.VisualScripting;
using UnityEngine;
using UnityEngine.SceneManagement;

namespace App.Develop.Scenes.PersonalAreaScene
{
    public class PersonalAreaManager : MonoBehaviour
    {
        private const string DEFAULT_USERNAME = "Username";
        private const string DeletionAccount_PANEL_PATH = "UI/DeletionAccountPanel";

        [SerializeField] private PersonalAreaUIController _ui;

        private IPersonalAreaService _service;
        private SceneSwitcher _sceneSwitcher;
        private MonoFactory _factory;
        private PanelManager _panelManager;

        public void Inject(DIContainer container, MonoFactory factory)
        {
            if (container == null) throw new ArgumentNullException(nameof(container));
            if (factory == null) throw new ArgumentNullException(nameof(factory));
            if (_ui == null) throw new MissingComponentException("PersonalAreaUIController –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –≤ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–µ");

            _service = container.Resolve<IPersonalAreaService>();
            _sceneSwitcher = container.Resolve<SceneSwitcher>();
            _factory = factory;
            _panelManager = container.Resolve<PanelManager>();

            InitializeUI();
        }

        private void InitializeUI()
        {
            try
            {
                _ui.Initialize();
                SetupUserProfile();
                SetupEmotionJars();
                SetupStatistics();
                SetupButtons();
            }
            catch (Exception ex)
            {
                Debug.LogError($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ UI: {ex.Message}");
                throw;
            }
        }

        private void SetupButtons()
        {
            _ui.OnLogEmotion += () => Debug.Log("üìù –õ–æ–≥–∏—Ä—É–µ–º —ç–º–æ—Ü–∏—é");
            _ui.OnOpenHistory += () => Debug.Log("üìú –ò—Å—Ç–æ—Ä–∏—è");
            _ui.OnOpenFriends += () => Debug.Log("üë• –î—Ä—É–∑—å—è");
            _ui.OnOpenWorkshop += () => Debug.Log("üõ†Ô∏è –ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è");
            _ui.OnOpenSettings += ShowSettingsPanel;
        }

        private void ShowSettingsPanel()
        {
            _panelManager.TogglePanel<AccountDeletionManager>(DeletionAccount_PANEL_PATH);
        }

        private void SetupUserProfile()
        {
            _ui.SetUsername(DEFAULT_USERNAME); // TODO: –ø–æ–¥–≥—Ä—É–∑–∏—Ç—å –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
            _ui.SetCurrentEmotion(null); // TODO: –∏–ª–∏ –ø–µ—Ä–µ–¥–∞—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π Sprite
        }

        private void SetupEmotionJars()
        {
            foreach (EmotionTypes type in Enum.GetValues(typeof(EmotionTypes)))
            {
                var variable = _service.GetEmotionVariable(type);

                if (variable == null)
                {
                    Debug.LogWarning($"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —ç–º–æ—Ü–∏–∏ {type}");
                    continue;
                }

                _ui.SetJar(type, variable.Value.Value);
                variable.Changed += (_, newData) => _ui.SetJar(type, newData.Value);
            }
        }

        private void SetupStatistics()
        {
            _ui.SetPoints(0); // TODO: –∑–∞–º–µ–Ω–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            _ui.SetEntries(0); // TODO: –∑–∞–º–µ–Ω–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        }

        private void OnDestroy()
        {
            if (_ui != null)
            {
                _ui.ClearAll();
            }

            // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π
            _ui.OnLogEmotion -= () => Debug.Log("üìù –õ–æ–≥–∏—Ä—É–µ–º —ç–º–æ—Ü–∏—é");
            _ui.OnOpenHistory -= () => Debug.Log("üìú –ò—Å—Ç–æ—Ä–∏—è");
            _ui.OnOpenFriends -= () => Debug.Log("üë• –î—Ä—É–∑—å—è");
            _ui.OnOpenWorkshop -= () => Debug.Log("üõ†Ô∏è –ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è");
            _ui.OnOpenSettings -= ShowSettingsPanel;
        }

        private void OnEnable()
        {
            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –≤—ã–≥—Ä—É–∑–∫–∏ —Å—Ü–µ–Ω—ã
            SceneManager.sceneUnloaded += OnSceneUnloaded;
        }

        private void OnDisable()
        {
            // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏—è –≤—ã–≥—Ä—É–∑–∫–∏ —Å—Ü–µ–Ω—ã
            SceneManager.sceneUnloaded -= OnSceneUnloaded;
        }

        private void OnSceneUnloaded(Scene scene)
        {
            // –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫–∏ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ —Å—Ü–µ–Ω—ã
            _service = null;
        }
    }
}
