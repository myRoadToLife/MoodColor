using System.Collections;
using App.Develop.AppServices.Firebase.Common.SecureStorage;
using App.Develop.CommonServices.SceneManagement;
using App.Develop.DI;
using Firebase.Auth;
using Firebase.Database;
using Firebase.Extensions;
using TMPro;
using UnityEngine;
using UnityEngine.UI;
using System.Linq;
using System;
using App.Develop.AppServices.Firebase.Auth.Services;

namespace App.Develop.Scenes.PersonalAreaScene.Settings
{
    public class AccountDeletionManager : MonoBehaviour, IInjectable
    {
        [Header("Panels")]
        [SerializeField] private GameObject _popupPanel;
        [SerializeField] private TMP_Text _popupText;
        [SerializeField] private GameObject _confirmDeletePanel;
        [SerializeField] private Button _closePopupButton;

        [Header("Controls")]
        [SerializeField] private Button _logoutButton;
        [SerializeField] private Button _showDeleteButton;
        [SerializeField] private Button _cancelDeleteButton;
        [SerializeField] private Button _confirmDeleteButton;
        [SerializeField] private Toggle _showPasswordToggle;
        [SerializeField] private TMP_InputField _passwordInput;

        private SceneSwitcher _sceneSwitcher;
        private FirebaseAuth _auth;
        private DatabaseReference _database;
        private AuthStateService _authStateService;
        private string _plainPassword = "";

        public void Inject(DIContainer container)
        {
            _sceneSwitcher = container.Resolve<SceneSwitcher>();
            _auth = FirebaseAuth.DefaultInstance;
            _database = container.Resolve<DatabaseReference>();
            _authStateService = container.Resolve<AuthStateService>();

            InitializeUI();
        }

        private void Start()
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
            CheckAuthenticationState();
            // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            _authStateService.AuthStateChanged += OnAuthStateChanged;
        }

        private void OnDestroy()
        {
            // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞
            if (_authStateService != null)
            {
                _authStateService.AuthStateChanged -= OnAuthStateChanged;
            }
        }

        private void OnAuthStateChanged(FirebaseUser user)
        {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ Auth –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            _auth = FirebaseAuth.DefaultInstance;
            
            if (user == null)
            {
                Debug.LogWarning("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã –∏–ª–∏ —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞");
                ShowPopup("–í–∞—à–∞ —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.");
                
                // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–º, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ–ª –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                StartCoroutine(DelayedRedirect());
            }
            else
            {
                Debug.Log($"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {user.Email}");
            }
        }
        
        private IEnumerator DelayedRedirect()
        {
            yield return new WaitForSeconds(2f);
            _sceneSwitcher.ProcessSwitchSceneFor(new OutputPersonalAreaScreenArgs(new AuthSceneInputArgs()));
        }

        private void CheckAuthenticationState()
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
            StartCoroutine(CheckAndRestoreAuthenticationState());
        }
        
        private IEnumerator CheckAndRestoreAuthenticationState()
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if (!_authStateService.IsAuthenticated)
            {
                Debug.LogWarning("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ AccountDeletionManager");
                
                // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
                var restoreTask = _authStateService.RestoreAuthenticationAsync();
                
                // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                while (!restoreTask.IsCompleted)
                {
                    yield return null;
                }
                
                if (restoreTask.Result)
                {
                    Debug.Log("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞Auth
                    _auth = FirebaseAuth.DefaultInstance;
                }
                else
                {
                    Debug.LogError("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é");
                    ShowPopup("–í–∞—à–∞ —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.");
                    yield return new WaitForSeconds(2f);
                    _sceneSwitcher.ProcessSwitchSceneFor(new OutputPersonalAreaScreenArgs(new AuthSceneInputArgs()));
                }
            }
            else
            {
                Debug.Log($"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {_authStateService.CurrentUser.Email}");
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                yield return StartCoroutine(RefreshUserCoroutine());
            }
        }
        
        private IEnumerator RefreshUserCoroutine()
        {
            var refreshTask = _authStateService.RefreshUserAsync();
            
            while (!refreshTask.IsCompleted)
            {
                yield return null;
            }
            
            if (!refreshTask.Result)
            {
                Debug.LogWarning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ");
            }
        }

        private void InitializeUI()
        {
            Debug.Log("‚úÖ InitializeUI –≤—ã–∑–≤–∞–Ω");

            if (_logoutButton == null) Debug.LogError("‚ùå _logoutButton –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!");
            if (_showDeleteButton == null) Debug.LogError("‚ùå _showDeleteButton –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!");
            if (_confirmDeleteButton == null) Debug.LogError("‚ùå _confirmDeleteButton –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!");
            if (_passwordInput == null) Debug.LogError("‚ùå _passwordInput –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!");
            if (_popupPanel == null || _popupText == null) Debug.LogError("‚ùå Popup —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!");
            if (_closePopupButton == null) Debug.LogWarning("‚ö†Ô∏è _closePopupButton –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –∑–∞–∫—Ä—ã–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏");

            _confirmDeletePanel.SetActive(false);
            _popupPanel.SetActive(false);

            SetupButtons();
            SetupToggles();
            SetupInputFields();

            SetPasswordVisibility(false);
        }

        private void SetupButtons()
        {
            _logoutButton.onClick.RemoveAllListeners();
            _logoutButton.onClick.AddListener(Logout);

            _showDeleteButton.onClick.RemoveAllListeners();
            _showDeleteButton.onClick.AddListener(ShowDeleteConfirmation);

            _cancelDeleteButton.onClick.RemoveAllListeners();
            _cancelDeleteButton.onClick.AddListener(CancelDelete);

            _confirmDeleteButton.onClick.RemoveAllListeners();
            _confirmDeleteButton.onClick.AddListener(ConfirmDelete);
            
            if (_closePopupButton != null)
            {
                _closePopupButton.onClick.RemoveAllListeners();
                _closePopupButton.onClick.AddListener(HidePopup);
            }
        }

        private void SetupToggles()
        {
            _showPasswordToggle.onValueChanged.RemoveAllListeners();
            _showPasswordToggle.isOn = false;
            _showPasswordToggle.onValueChanged.AddListener(OnToggleShowPassword);
        }

        private void SetupInputFields()
        {
            _passwordInput.onValueChanged.RemoveAllListeners();
            _passwordInput.onValueChanged.AddListener(OnPasswordChanged);
            _passwordInput.contentType = TMP_InputField.ContentType.Password;
            _passwordInput.ForceLabelUpdate();
        }

        private void OnPasswordChanged(string newText)
        {
            Debug.Log($"‚å® –í–≤–µ–¥—ë–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏–∑–º–µ–Ω—ë–Ω: {newText}");
            _plainPassword = newText;
        }

        private void OnToggleShowPassword(bool isVisible)
        {
            Debug.Log($"üîÅ Toggle –ø–∞—Ä–æ–ª—å: {(isVisible ? "–ü–æ–∫–∞–∑–∞—Ç—å" : "–°–∫—Ä—ã—Ç—å")}");
            SetPasswordVisibility(isVisible);
        }

        private void SetPasswordVisibility(bool isVisible)
        {
            _passwordInput.DeactivateInputField();

            _passwordInput.contentType = isVisible
                ? TMP_InputField.ContentType.Standard
                : TMP_InputField.ContentType.Password;

            StartCoroutine(RefreshPasswordField());
        }

        private IEnumerator RefreshPasswordField()
        {
            _passwordInput.text = "";
            _passwordInput.ForceLabelUpdate();
            yield return new WaitForEndOfFrame();
            _passwordInput.text = _plainPassword;
            _passwordInput.ForceLabelUpdate();
            _passwordInput.caretPosition = _plainPassword.Length;
            _passwordInput.ActivateInputField();
        }

        private void Logout()
        {
            Debug.Log("üîò Logout –Ω–∞–∂–∞—Ç–∞");

            _auth.SignOut();
            ShowPopup("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.");

            _sceneSwitcher.ProcessSwitchSceneFor(
                new OutputPersonalAreaScreenArgs(new AuthSceneInputArgs()));
        }

        private void ShowDeleteConfirmation()
        {
            Debug.Log("üîò –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            if (!_authStateService.IsAuthenticated)
            {
                Debug.LogError("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–∞–Ω–µ–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è");
                ShowPopup("–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.");
                StartCoroutine(DelayedRedirect());
                return;
            }
            
            _confirmDeletePanel.SetActive(true);
            SetPasswordVisibility(_showPasswordToggle.isOn);
        }

        private void CancelDelete()
        {
            Debug.Log("üîò –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è");
            _confirmDeletePanel.SetActive(false);
        }

        private void ConfirmDelete()
        {
            Debug.Log("üîò –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ");
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π –ø–∞—Ä–æ–ª—å
            if (string.IsNullOrWhiteSpace(_plainPassword))
            {
                Debug.LogWarning("‚ö†Ô∏è –ü—É—Å—Ç–æ–π –ø–∞—Ä–æ–ª—å –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞");
                ShowPopup("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.");
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ AuthStateService
            if (!_authStateService.IsAuthenticated)
            {
                Debug.LogError("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞");
                ShowPopup("–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.");
                StartCoroutine(DelayedRedirect());
                return;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–µ—Ä–≤–∏—Å–∞
            var user = _authStateService.CurrentUser;
            var email = user.Email;
            
            Debug.Log($"üìß –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {email ?? "null"}, UID: {user.UserId}");
            
            if (string.IsNullOrEmpty(email))
            {
                Debug.LogError($"‚ùå Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. UID: {user.UserId}");
                ShowPopup("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å email. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç.");
                return;
            }
            
            try
            {
                // –ü–æ–ª—É—á–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                var credential = EmailAuthProvider.GetCredential(email, _plainPassword);
                
                // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
                user.ReauthenticateAsync(credential).ContinueWithOnMainThread(task =>
                {
                    if (task.IsFaulted)
                    {
                        Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {task.Exception?.GetBaseException()?.Message}");
                        ShowPopup("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏–ª–∏ –æ—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.");
                        return;
                    }
                    
                    // –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    DeleteUserData();
                });
            }
            catch (Exception ex)
            {
                Debug.LogError($"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {ex.Message}");
                ShowPopup("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.");
            }
        }

        private void DeleteUserData()
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ AuthStateService
            if (!_authStateService.IsAuthenticated)
            {
                Debug.LogError("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö");
                ShowPopup("–û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –í–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.");
                StartCoroutine(DelayedRedirect());
                return;
            }
            
            var uid = _authStateService.CurrentUser.UserId;
            
            Debug.Log($"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {uid}");
            
            _database
                .Child("users")
                .Child(uid)
                .RemoveValueAsync()
                .ContinueWithOnMainThread(task =>
                {
                    if (task.IsFaulted)
                    {
                        Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {task.Exception?.GetBaseException()?.Message}");
                        
                        // –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –∞–∫–∫–∞—É–Ω—Ç–∞, –¥–∞–∂–µ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ —É–¥–∞–ª–∏–ª–∏—Å—å
                        Debug.LogWarning("‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –∞–∫–∫–∞—É–Ω—Ç–∞, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö");
                    }
                    else
                    {
                        Debug.Log("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã");
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –∞–∫–∫–∞—É–Ω—Ç–∞
                    if (!_authStateService.IsAuthenticated)
                    {
                        Debug.LogError("‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö");
                        ShowPopup("–û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —É–¥–∞–ª–µ–Ω–∏—è. –î–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã, –Ω–æ –∞–∫–∫–∞—É–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω.");
                        StartCoroutine(DelayedRedirect());
                        return;
                    }
                    
                    DeleteFirebaseUser();
                });
        }

        private void DeleteFirebaseUser()
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ AuthStateService
            if (!_authStateService.IsAuthenticated)
            {
                Debug.LogError("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏");
                ShowPopup("–û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –í–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.");
                StartCoroutine(DelayedRedirect());
                return;
            }
            
            Debug.Log($"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ Firebase: {_authStateService.CurrentUser.Email}");
            
            _authStateService.CurrentUser.DeleteAsync().ContinueWithOnMainThread(task =>
            {
                if (task.IsFaulted)
                {
                    Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {task.Exception?.GetBaseException()?.Message}");
                    
                    bool requiresReauth = task.Exception?.InnerExceptions.Any(ex => 
                        ex.Message.Contains("requires recent authentication") || 
                        ex.Message.Contains("requires a recent login")) ?? false;
                    
                    if (requiresReauth)
                    {
                        ShowPopup("–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.");
                        StartCoroutine(DelayedRedirect());
                    }
                    else
                    {
                        ShowPopup("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.");
                    }
                    
                    return;
                }
                
                Debug.Log("‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω");
                CleanupStoredCredentials();
                ShowPopup("–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.");
                
                _sceneSwitcher.ProcessSwitchSceneFor(
                    new OutputPersonalAreaScreenArgs(new AuthSceneInputArgs()));
            });
        }

        private void CleanupStoredCredentials()
        {
            SecurePlayerPrefs.DeleteKey("email");
            SecurePlayerPrefs.DeleteKey("password");
            SecurePlayerPrefs.DeleteKey("remember_me");
            SecurePlayerPrefs.Save();
        }

        private void ShowPopup(string message)
        {
            if (_popupPanel == null || _popupText == null) return;
            
            Debug.Log($"üì¢ –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è: {message}");
            _popupText.text = message;
            _popupPanel.SetActive(true);
            
            CancelInvoke(nameof(HidePopup));
            
            if (_closePopupButton == null)
            {
                // –ï—Å–ª–∏ –Ω–µ—Ç –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è, —Å–∫—Ä—ã–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
                Invoke(nameof(HidePopup), 5f);
            }
        }

        private void HidePopup()
        {
            Debug.Log("üîç –°–∫—Ä—ã—Ç–∏–µ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è");
            _popupPanel?.SetActive(false);
        }
    }
}
