using System;
using System.Collections;
using App.Develop.CommonServices.AssetManagement;
using App.Develop.CommonServices.SceneManagement;
using App.Develop.DI;
using App.Develop.Scenes.PersonalAreaScene.UI;
using UnityEngine;

namespace App.Develop.Scenes.PersonalAreaScene.Infrastructure
{
    public class PersonalAreaBootstrap : MonoBehaviour
    {
        private DIContainer _container;

        public IEnumerator Run(DIContainer container, PersonalAreaInputArgs inputArgs)
        {
            try
            {
                if (container == null)
                {
                    Debug.LogError("‚ùå DIContainer –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null");
                    yield break;
                }

                _container = container;
                
                Debug.Log("üîÑ [PersonalAreaBootstrap] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...");
                _container.Initialize();
                Debug.Log("‚úÖ [PersonalAreaBootstrap] –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");

                Debug.Log("‚úÖ [PersonalAreaBootstrap] –°—Ü–µ–Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞");

                // –ü—ã—Ç–∞–µ–º—Å—è —Ä–µ–∑–æ–ª–≤–∏—Ç—å –∑–∞–≥—Ä—É–∑—á–∏–∫ —Ä–µ—Å—É—Ä—Å–æ–≤
                Debug.Log("üîÑ [PersonalAreaBootstrap] –ü–æ–ª—É—á–µ–Ω–∏–µ ResourcesAssetLoader...");
                ResourcesAssetLoader assetLoader = null;
                try 
                {
                    assetLoader = _container.Resolve<ResourcesAssetLoader>();
                    Debug.Log("‚úÖ [PersonalAreaBootstrap] ResourcesAssetLoader –ø–æ–ª—É—á–µ–Ω");
                }
                catch (Exception e)
                {
                    Debug.LogError($"‚ùå [PersonalAreaBootstrap] –û—à–∏–±–∫–∞ —Ä–µ–∑–æ–ª–≤–∞ ResourcesAssetLoader: {e.Message}\n{e.StackTrace}");
                    yield break;
                }

                var factory = new MonoFactory(_container);

                Debug.Log($"üîÑ [PersonalAreaBootstrap] –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ—Ñ–∞–±–∞ PersonalAreaCanvas –∏–∑ {AssetPaths.PersonalAreaCanvas}...");
                GameObject personalAreaPrefab = null;
                try
                {
                    personalAreaPrefab = assetLoader.LoadAsset<GameObject>(AssetPaths.PersonalAreaCanvas);
                }
                catch (Exception e)
                {
                    Debug.LogError($"‚ùå [PersonalAreaBootstrap] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ—Ñ–∞–±–∞: {e.Message}\n{e.StackTrace}");
                    yield break;
                }

                if (personalAreaPrefab == null)
                {
                    Debug.LogError($"‚ùå [PersonalAreaBootstrap] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ—Ñ–∞–± –ø–æ –ø—É—Ç–∏: {AssetPaths.PersonalAreaCanvas}");
                    yield break;
                }

                Debug.Log("‚úÖ [PersonalAreaBootstrap] –ü—Ä–µ—Ñ–∞–± PersonalAreaCanvas –∑–∞–≥—Ä—É–∂–µ–Ω, —Å–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä...");
                GameObject instance = null;
                try
                {
                    instance = Instantiate(personalAreaPrefab);
                    Debug.Log("‚úÖ [PersonalAreaBootstrap] –≠–∫–∑–µ–º–ø–ª—è—Ä PersonalAreaCanvas —Å–æ–∑–¥–∞–Ω");
                }
                catch (Exception e)
                {
                    Debug.LogError($"‚ùå [PersonalAreaBootstrap] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø—Ä–µ—Ñ–∞–±–∞: {e.Message}\n{e.StackTrace}");
                    yield break;
                }

                Debug.Log("üîÑ [PersonalAreaBootstrap] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...");
                try
                {
                    InitializeComponents(instance, factory);
                    Debug.Log("‚úÖ [PersonalAreaBootstrap] –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã");
                }
                catch (Exception e)
                {
                    Debug.LogError($"‚ùå [PersonalAreaBootstrap] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e.Message}\n{e.StackTrace}");
                }
            }
            catch (Exception e)
            {
                Debug.LogError($"‚ùå [PersonalAreaBootstrap] –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e.Message}\n{e.StackTrace}");
            }
        }

        private void InitializeComponents(GameObject instance, MonoFactory factory)
        {
            Debug.Log("[PersonalAreaBootstrap] –ü–æ–∏—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ –∏–Ω—Å—Ç–∞–Ω—Å–µ...");
            
            var uiController = instance.GetComponentInChildren<PersonalAreaUIController>();
            var manager = instance.GetComponentInChildren<PersonalAreaManager>();

            if (uiController == null)
            {
                Debug.LogError("‚ùå [PersonalAreaBootstrap] PersonalAreaUIController –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –∏–Ω—Å—Ç–∞–Ω—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø—Ä–µ—Ñ–∞–±–µ");
                return;
            }

            if (manager == null)
            {
                Debug.LogError("‚ùå [PersonalAreaBootstrap] PersonalAreaManager –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –∏–Ω—Å—Ç–∞–Ω—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø—Ä–µ—Ñ–∞–±–µ");
                return;
            }

            Debug.Log("[PersonalAreaBootstrap] –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∞–±—Ä–∏–∫—É...");
            
            try
            {
                factory.CreateOn<PersonalAreaUIController>(uiController.gameObject);
                Debug.Log("‚úÖ [PersonalAreaBootstrap] PersonalAreaUIController —Å–æ–∑–¥–∞–Ω");
            }
            catch (Exception e)
            {
                Debug.LogError($"‚ùå [PersonalAreaBootstrap] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PersonalAreaUIController: {e.Message}\n{e.StackTrace}");
            }
            
            try
            {
                manager.Inject(_container, factory);
                Debug.Log("‚úÖ [PersonalAreaBootstrap] PersonalAreaManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
            }
            catch (Exception e)
            {
                Debug.LogError($"‚ùå [PersonalAreaBootstrap] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ PersonalAreaManager: {e.Message}\n{e.StackTrace}");
            }
        }
    }
}
