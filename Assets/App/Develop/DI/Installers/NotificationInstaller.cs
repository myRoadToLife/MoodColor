using App.Develop.CommonServices.Notifications;
using App.Develop.DI;
using App.Develop.Utils.Logging;
using UnityEngine;

namespace App.Develop.DI.Installers
{
    /// <summary>
    /// Installer –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    /// </summary>
    public class NotificationInstaller : IServiceInstaller
    {
        public string InstallerName => "Notification System";

        public void RegisterServices(DIContainer container)
        {
            MyLogger.Log($"üîß –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è {InstallerName}...", MyLogger.LogCategory.Bootstrap);

            // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            RegisterNotificationServices(container);
            
            // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã –∏ —Å–∏—Å—Ç–µ–º—ã
            RegisterNotificationManagers(container);
            
            // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä
            RegisterNotificationCoordinator(container);

            MyLogger.Log($"‚úÖ {InstallerName} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞", MyLogger.LogCategory.Bootstrap);
        }

        private void RegisterNotificationServices(DIContainer container)
        {
            // PushNotificationService (MonoBehaviour –¥–ª—è –∫–æ—Ä—É—Ç–∏–Ω)
            container.RegisterAsSingle<PushNotificationService>(c =>
            {
                var pushObject = new GameObject("PushNotificationService");
                Object.DontDestroyOnLoad(pushObject);
                return pushObject.AddComponent<PushNotificationService>();
            }).NonLazy();

            // InGameNotificationService (MonoBehaviour –¥–ª—è UI)
            container.RegisterAsSingle<InGameNotificationService>(c =>
            {
                var inGameObject = new GameObject("InGameNotificationService");
                Object.DontDestroyOnLoad(inGameObject);
                return inGameObject.AddComponent<InGameNotificationService>();
            }).NonLazy();

            // EmailNotificationService (–æ–±—ã—á–Ω—ã–π –∫–ª–∞—Å—Å)
            container.RegisterAsSingle<EmailNotificationService>(c =>
                new EmailNotificationService()
            ).NonLazy();
        }

        private void RegisterNotificationManagers(DIContainer container)
        {
            // UserPreferencesManager (–æ–±—ã—á–Ω—ã–π –∫–ª–∞—Å—Å)
            container.RegisterAsSingle<UserPreferencesManager>(c =>
                new UserPreferencesManager()
            ).NonLazy();

            // NotificationTriggerSystem (–æ–±—ã—á–Ω—ã–π –∫–ª–∞—Å—Å)
            container.RegisterAsSingle<NotificationTriggerSystem>(c =>
                new NotificationTriggerSystem()
            ).NonLazy();

            // NotificationQueue (–æ–±—ã—á–Ω—ã–π –∫–ª–∞—Å—Å, –∑–∞–≤–∏—Å–∏—Ç –æ—Ç INotificationManager)
            container.RegisterAsSingle<NotificationQueue>(c =>
                new NotificationQueue(c.Resolve<INotificationManager>())
            );
        }

        private void RegisterNotificationCoordinator(DIContainer container)
        {
            // NotificationCoordinator (–æ–±—ã—á–Ω—ã–π –∫–ª–∞—Å—Å —Å –∏–Ω—ä–µ–∫—Ü–∏–µ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
            container.RegisterAsSingle<INotificationManager>(c =>
            {
                var coordinator = new NotificationCoordinator(
                    c.Resolve<PushNotificationService>(),
                    c.Resolve<InGameNotificationService>(),
                    c.Resolve<EmailNotificationService>(),
                    c.Resolve<NotificationQueue>(),
                    c.Resolve<NotificationTriggerSystem>(),
                    c.Resolve<UserPreferencesManager>()
                );
                
                coordinator.Initialize();
                return coordinator;
            }).NonLazy();

            // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–∞–∫–∂–µ –∫–∞–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –º–µ—Ç–æ–¥–∞–º
            container.RegisterAsSingle<NotificationCoordinator>(c =>
                (NotificationCoordinator)c.Resolve<INotificationManager>()
            ).NonLazy();
        }
    }
} 