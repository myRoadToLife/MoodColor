using System;
using System.Collections.Generic;
using App.Develop.DI;
using App.Develop.Utils.Logging;

namespace App.Develop.DI.Installers
{
    /// <summary>
    /// –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –≤—Å–µ—Ö installer'–æ–≤ —Å–µ—Ä–≤–∏—Å–æ–≤
    /// </summary>
    public class ServiceInstallerManager
    {
        private readonly List<IServiceInstaller> _installers;

        public ServiceInstallerManager()
        {
            _installers = new List<IServiceInstaller>();
        }

        /// <summary>
        /// –î–æ–±–∞–≤–ª—è–µ—Ç installer –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        /// </summary>
        public void AddInstaller(IServiceInstaller installer)
        {
            if (installer == null)
            {
                MyLogger.LogError("–ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å null installer", MyLogger.LogCategory.Bootstrap);
                return;
            }

            _installers.Add(installer);
            MyLogger.Log($"üì¶ –î–æ–±–∞–≤–ª–µ–Ω installer: {installer.InstallerName}", MyLogger.LogCategory.Bootstrap);
        }

        /// <summary>
        /// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã —á–µ—Ä–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ installer'—ã
        /// </summary>
        public void RegisterAllServices(DIContainer container)
        {
            if (container == null)
            {
                MyLogger.LogError("DIContainer –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null", MyLogger.LogCategory.Bootstrap);
                return;
            }

            MyLogger.Log($"üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–∏—Å–æ–≤ —á–µ—Ä–µ–∑ {_installers.Count} installer'–æ–≤", MyLogger.LogCategory.Bootstrap);

            foreach (var installer in _installers)
            {
                try
                {
                    installer.RegisterServices(container);
                }
                catch (Exception ex)
                {
                    MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –≤ installer {installer.InstallerName}: {ex.Message}\n{ex.StackTrace}", MyLogger.LogCategory.Bootstrap);
                    throw;
                }
            }

            MyLogger.Log("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã", MyLogger.LogCategory.Bootstrap);
        }

        /// <summary>
        /// –û—á–∏—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ installer'–æ–≤
        /// </summary>
        public void Clear()
        {
            _installers.Clear();
        }

        /// <summary>
        /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö installer'–æ–≤
        /// </summary>
        public int InstallerCount => _installers.Count;
    }
} 