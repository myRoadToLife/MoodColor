#define DISABLE_AUTO_ADDRESSABLES_IMPORT

using UnityEngine;
using System;
using System.Threading.Tasks;
using Firebase;
using Firebase.Database;
using Firebase.Auth;
using App.Develop.DI;
using App.Develop.CommonServices.AssetManagement;
using App.Develop.CommonServices.ConfigsManagement;
using App.Develop.CommonServices.UI;
using App.Develop.CommonServices.DataManagement.DataProviders;
using App.Develop.CommonServices.Emotion;
using App.Develop.CommonServices.Firebase.Database.Services;
using App.Develop.CommonServices.Firebase.Database.Validators;
using App.Develop.CommonServices.Firebase.Auth.Services;
using App.Develop.CommonServices.GameSystem;
using App.Develop.CommonServices.CoroutinePerformer;
using App.Develop.CommonServices.DataManagement;
using App.Develop.CommonServices.Firebase.Auth;
using App.Develop.CommonServices.Firebase.Common.Cache;
using App.Develop.CommonServices.Firebase.Database.Models;
using App.Develop.CommonServices.LoadingScreen;
using App.Develop.CommonServices.Networking;
using App.Develop.CommonServices.SceneManagement;
using App.Develop.CommonServices.Social;
using App.Develop.Scenes.PersonalAreaScene.Infrastructure;
using App.Develop.Scenes.PersonalAreaScene.Settings;
using App.Develop.Scenes.PersonalAreaScene.UI.Components;
using App.Develop.Scenes.PersonalAreaScene.Handlers;
using App.Develop.Utils.Logging;
using UnityEngine.AddressableAssets;

#if !DISABLE_AUTO_ADDRESSABLES_IMPORT
using UnityEngine.AddressableAssets;
using App.Develop.Utils.Logging;
#endif

namespace App.Develop.EntryPoint
{
    /// <summary>
    /// –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ. –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤.
    /// </summary>
    public class EntryPoint : MonoBehaviour
    {
        [SerializeField] private Bootstrap _appBootstrap;
        private const string DATABASE_URL = "https://moodcolor-3ac59-default-rtdb.firebaseio.com/";
        private const string FIREBASE_APP_NAME = "MoodColorApp"; // –ò–º—è –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Firebase

        private DIContainer _projectContainer;
        private FirebaseApp _firebaseApp; // –•—Ä–∞–Ω–∏–º —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–∞—à —ç–∫–∑–µ–º–ø–ª—è—Ä Firebase
        private FirebaseDatabase _firebaseDatabase; // –•—Ä–∞–Ω–∏–º —Å—Å—ã–ª–∫—É –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

        private void Awake()
        {
            MyLogger.Log("üöÄ EntryPoint.Awake(, MyLogger.LogCategory.Bootstrap) –≤—ã–∑–≤–∞–Ω");
            // DontDestroyOnLoad(gameObject); // –í–†–ï–ú–ï–ù–ù–û –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–¢–¨
            InitializeApplication();
        }

        /// <summary>
        /// –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        /// </summary>
        private async void InitializeApplication()
        {
            try
            {
                MyLogger.Log("üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Addressables...", MyLogger.LogCategory.Bootstrap);
                await Addressables.InitializeAsync().Task;
                
                MyLogger.Log("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...", MyLogger.LogCategory.Bootstrap);
                SetupAppSettings();
                _projectContainer = new DIContainer();
                InitializeSecureStorage(_projectContainer);
                
                MyLogger.Log("üîß –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...", MyLogger.LogCategory.Bootstrap);
                await RegisterCoreServices(_projectContainer);
                ShowInitialLoadingScreen();

                MyLogger.Log("üî• –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase...", MyLogger.LogCategory.Bootstrap);
                if (!await InitFirebaseAsync())
                {
                    MyLogger.LogError("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Firebase", MyLogger.LogCategory.Bootstrap);
                    return;
                }

                MyLogger.Log("üî• –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Firebase —Å–µ—Ä–≤–∏—Å–æ–≤...", MyLogger.LogCategory.Bootstrap);
                RegisterFirebaseServices();

                MyLogger.Log("üë§ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è PlayerDataProvider...", MyLogger.LogCategory.Bootstrap);
                _projectContainer.RegisterAsSingle(c =>
                    new PlayerDataProvider(
                        c.Resolve<ISaveLoadService>(),
                        c.Resolve<IConfigsProvider>(),
                        c.Resolve<IDatabaseService>()
                    )
                );

                MyLogger.Log("üéÆ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã...", MyLogger.LogCategory.Bootstrap);
                RegisterGameSystem(_projectContainer);
                
                MyLogger.Log("üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...", MyLogger.LogCategory.Bootstrap);
                await InitializeContainerAndLoadData();
                
                MyLogger.Log("üöÄ –ó–∞–ø—É—Å–∫ Bootstrap...", MyLogger.LogCategory.Bootstrap);
                StartBootstrapProcess();
                
                MyLogger.Log("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ", MyLogger.LogCategory.Bootstrap);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {ex}", MyLogger.LogCategory.Bootstrap);
                MyLogger.LogError($"‚ùå Stack trace: {ex.StackTrace}", MyLogger.LogCategory.Bootstrap);
            }
        }

        /// <summary>
        /// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        /// </summary>
        private void SetupAppSettings()
        {
            QualitySettings.vSyncCount = 0;
            Application.targetFrameRate = 60;
        }

        /// <summary>
        /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —ç–∫—Ä–∞–Ω
        /// </summary>
        private void ShowInitialLoadingScreen()
        {
            ILoadingScreen loadingScreen = _projectContainer.Resolve<ILoadingScreen>();
            loadingScreen.Show();
        }

        /// <summary>
        /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Firebase –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        /// </summary>
        private async Task<bool> InitFirebaseAsync()
        {
            try
            {
                // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã —Å –Ω–∞—à–∏–º –∏–º–µ–Ω–µ–º, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                try
                {
                    var existingApp = FirebaseApp.GetInstance(FIREBASE_APP_NAME);
                    if (existingApp != null)
                    {
                        existingApp.Dispose();
                    }
                }
                catch (Exception)
                {
                    // –ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
                var dependencyTask = FirebaseApp.CheckAndFixDependenciesAsync();
                await dependencyTask;

                var dependencyStatus = dependencyTask.Result;

                if (dependencyStatus != DependencyStatus.Available)
                {
                    MyLogger.LogError($"‚ùå Firebase –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {dependencyStatus}", MyLogger.LogCategory.Bootstrap);
                    return false;
                }

                // –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Firebase —Å –Ω–∞—à–∏–º URL
                var options = new Firebase.AppOptions
                {
                    DatabaseUrl = new Uri(DATABASE_URL)
                };

                _firebaseApp = FirebaseApp.Create(options, FIREBASE_APP_NAME);

                // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –Ω–∞—à–∏–º Firebase App –∏ URL
                _firebaseDatabase = FirebaseDatabase.GetInstance(_firebaseApp, DATABASE_URL);
                _firebaseDatabase.SetPersistenceEnabled(true);

                return true;
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û–®–ò–ë–ö–ê Firebase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {ex.Message}", MyLogger.LogCategory.Bootstrap);
                MyLogger.LogError($"‚ùå Firebase Stack trace: {ex.StackTrace}", MyLogger.LogCategory.Bootstrap);
                return false;
            }
        }

        /// <summary>
        /// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å—ã, –∑–∞–≤–∏—Å—è—â–∏–µ –æ—Ç Firebase
        /// </summary>
        private void RegisterFirebaseServices()
        {
            RegisterFirebase(_projectContainer);
            RegisterAuthServices(_projectContainer);

            // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
            _projectContainer.RegisterAsSingle<ISocialService>(container =>
            {
                var socialServiceObject = new GameObject("FirebaseSocialService");
                DontDestroyOnLoad(socialServiceObject);
                var socialService = socialServiceObject.AddComponent<FirebaseSocialService>();

                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞–º–∏ Firebase
                socialService.Initialize(
                    container.Resolve<FirebaseDatabase>(),
                    container.Resolve<FirebaseAuth>()
                );

                return socialService;
            }).NonLazy();
        }

        /// <summary>
        /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ
        /// </summary>
        private async Task InitializeContainerAndLoadData()
        {
            // –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ConfigsProviderService –∏ EmotionConfigService
            var configsProvider = _projectContainer.Resolve<IConfigsProvider>() as ConfigsProviderService;

            if (configsProvider != null)
            {
                await configsProvider.InitializeAsync();
            }
            else
            {
                MyLogger.LogError("[EntryPoint] ConfigsProviderService –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑—Ä–µ–∑–æ–ª–≤–∏—Ç—å –∫–∞–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø –¥–ª—è InitializeAsync.", MyLogger.LogCategory.Bootstrap);
            }

            var emotionCfgService = _projectContainer.Resolve<EmotionConfigService>();

            if (emotionCfgService != null)
            {
                await emotionCfgService.InitializeAsync();
            }
            else
            {
                MyLogger.LogWarning("[EntryPoint] EmotionConfigService –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑—Ä–µ–∑–æ–ª–≤–∏—Ç—å –∫–∞–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø –¥–ª—è InitializeAsync.", MyLogger.LogCategory.Bootstrap);
            }

            // –ó–∞—Ç–µ–º –∑–∞–≥—Ä—É–∂–∞–µ–º PlayerDataProvider –ü–ï–†–ï–î —Å–æ–∑–¥–∞–Ω–∏–µ–º EmotionService
            await _projectContainer.Resolve<PlayerDataProvider>().Load();

            // –¢–ï–ü–ï–†–¨ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º EmotionService –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ PlayerDataProvider
            _projectContainer.RegisterAsSingle<EmotionService>(c =>
                new EmotionService(
                    c.Resolve<PlayerDataProvider>(),
                    c.Resolve<IConfigsProvider>(),
                    c.Resolve<EmotionConfigService>(),
                    c.Resolve<IPointsService>(),
                    c.Resolve<ILevelSystem>()
                )
            ).NonLazy();

            MyLogger.Log("‚úÖ EmotionService –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω (–≤ InitializeContainerAndLoadData, MyLogger.LogCategory.Bootstrap).");
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º PointsService –ü–û–°–õ–ï EmotionService
            var pointsService = _projectContainer.Resolve<IPointsService>();

            if (pointsService != null)
            {
                // IPointsService –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç InitializeAsync(), –ø–æ—ç—Ç–æ–º—É –º–æ–∂–µ–º –≤—ã–∑—ã–≤–∞—Ç—å –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é
                await pointsService.InitializeAsync();
            }
            else
            {
                MyLogger.LogError("[EntryPoint] IPointsService –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑—Ä–µ–∑–æ–ª–≤–∏—Ç—å –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞.", MyLogger.LogCategory.Bootstrap);
            }

            await RegisterPersonalAreaServices(_projectContainer);

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Firebase —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–ª—è EmotionService –ü–û–°–õ–ï —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
            var emotionService = _projectContainer.Resolve<EmotionService>();
            var databaseService = _projectContainer.Resolve<IDatabaseService>();
            var syncService = _projectContainer.Resolve<EmotionSyncService>();
            
            if (emotionService != null && databaseService != null && syncService != null)
            {
                emotionService.InitializeFirebaseSync(databaseService, syncService);
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
                if (databaseService.IsAuthenticated)
                {
                    emotionService.StartSync();
                    MyLogger.Log("‚úÖ Firebase —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–ª—è EmotionService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∏ –∑–∞–ø—É—â–µ–Ω–∞", MyLogger.LogCategory.Bootstrap);
                }
                else
                {
                    MyLogger.LogWarning("‚ö†Ô∏è Firebase —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –Ω–æ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω", MyLogger.LogCategory.Bootstrap);
                }
            }
            else
            {
                MyLogger.LogError("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Firebase —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–ª—è EmotionService", MyLogger.LogCategory.Bootstrap);
            }
        }

        /// <summary>
        /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        /// </summary>
        private void StartBootstrapProcess()
        {
            _projectContainer.Resolve<ICoroutinePerformer>()
                .StartCoroutine(InitializeAndRunBootstrap());
        }

        private System.Collections.IEnumerator InitializeAndRunBootstrap()
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
            // (—ç—Ç–æ —É–∂–µ –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –≤ InitializeApplication)
            if (_projectContainer == null)
            {
                MyLogger.LogError("[EntryPoint] –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º Bootstrap!", MyLogger.LogCategory.Bootstrap);
                yield break;
            }

            yield return _appBootstrap.Run(_projectContainer);
        }

        /// <summary>
        /// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
        /// </summary>
        private async Task RegisterCoreServices(DIContainer container)
        {
            try
            {
                container.RegisterAsSingle<IAssetLoader>(c => new AddressablesLoader()).NonLazy();
                container.RegisterAsSingle<ICoroutinePerformer>(c => CoroutinePerformerFactory.Create());

                container.RegisterAsSingle<ILoadingScreen>(c =>
                {
                    var assetLoader = c.Resolve<IAssetLoader>();
                    var go = new GameObject("LoadingScreenService");
                    DontDestroyOnLoad(go);
                    var loadingScreenComponent = go.AddComponent<LoadingScreen>();
                    loadingScreenComponent.Initialize(assetLoader, AssetAddresses.LoadingScreen);
                    go.SetActive(false);
                    return loadingScreenComponent;
                }).NonLazy();

                container.RegisterAsSingle<ISceneLoader>(c => new SceneLoader());

                container.RegisterAsSingle(c =>
                    new SceneSwitcher(
                        c.Resolve<ICoroutinePerformer>(),
                        c.Resolve<ILoadingScreen>(),
                        c.Resolve<ISceneLoader>(),
                        c
                    )
                );

                container.RegisterAsSingle<UIFactory>(c =>
                    new UIFactory(
                        c.Resolve<IAssetLoader>(),
                        new MonoFactory(c)
                    )
                ).NonLazy();

                container.RegisterAsSingle<ISaveLoadService>(c =>
                    new SaveLoadService(new JsonSerializer(), new LocalDataRepository())
                );

                container.RegisterAsSingle<IConfigsProvider>(c =>
                    new ConfigsProviderService(c.Resolve<IAssetLoader>())
                ).NonLazy();

                container.RegisterAsSingle<EmotionConfigService>(c =>
                    new EmotionConfigService(c.Resolve<IAssetLoader>())
                ).NonLazy();

                container.RegisterAsSingle(c =>
                    new PanelManager(
                        c.Resolve<IAssetLoader>(),
                        new MonoFactory(c)
                    )
                ).NonLazy();

                RegisterNotificationSystem(container);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–∞–∑–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤: {ex}", MyLogger.LogCategory.Bootstrap);
                throw;
            }
        }

        /// <summary>
        /// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
        /// </summary>
        private void RegisterNotificationSystem(DIContainer container)
        {
            try
            {
                // –°–æ–∑–¥–∞–µ–º GameObject –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                GameObject notificationManagerObject = new GameObject("NotificationManager");

                // –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –ø–æ –∏–º–µ–Ω–∏ —á–µ—Ä–µ–∑ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –≤—Å–µ —Ñ–∞–π–ª—ã –º–æ–≥–ª–∏ –±—ã—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω—ã
                Type notificationManagerType =
                    Type.GetType("App.Develop.CommonServices.Notifications.NotificationManager, App.Develop.CommonServices.Notifications");

                if (notificationManagerType == null)
                {
                    MyLogger.LogError("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∏–ø NotificationManager. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–±–æ—Ä–∫–∞ App.Develop.CommonServices.Notifications —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–∞.", MyLogger.LogCategory.Bootstrap);
                    return;
                }

                // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —á–µ—Ä–µ–∑ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é
                Component manager = notificationManagerObject.AddComponent(notificationManagerType);

                // –ù–µ —É–Ω–∏—á—Ç–æ–∂–∞—Ç—å –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –º–µ–∂–¥—É —Å—Ü–µ–Ω–∞–º–∏
                DontDestroyOnLoad(notificationManagerObject);

                // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –ª—è–º–±–¥—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å —Ç–∏–ø–∞–º–∏
                container.RegisterAsSingle(c => manager).NonLazy();

                MyLogger.Log("‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞", MyLogger.LogCategory.Bootstrap);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {ex.Message}", MyLogger.LogCategory.Bootstrap);
                throw;
            }
        }

        /// <summary>
        /// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
        /// </summary>
        private void RegisterAuthServices(DIContainer container)
        {
            try
            {
                // –°–µ—Ä–≤–∏—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                container.RegisterAsSingle<ValidationService>(container => new ValidationService()).NonLazy();

                // CredentialStorage —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ InitializeSecureStorage
                // –û—Å—Ç–∞–≤–∏–º —ç—Ç—É —á–∞—Å—Ç—å –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
                /*
                // –•—Ä–∞–Ω–∏–ª–∏—â–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                container.RegisterAsSingle<CredentialStorage>(container =>
                    new CredentialStorage("UltraSecretKey!üî•")
                ).NonLazy();
                */

                // –°–µ—Ä–≤–∏—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                container.RegisterAsSingle<IAuthService>(container =>
                    new AuthService(
                        container.Resolve<FirebaseAuth>(),
                        container.Resolve<DatabaseService>(),
                        container.Resolve<ValidationService>()
                    )
                ).NonLazy();

                // –°–µ—Ä–≤–∏—Å –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                container.RegisterAsSingle<UserProfileService>(container =>
                    new UserProfileService(
                        container.Resolve<DatabaseService>()
                    )
                ).NonLazy();

                // –°–µ—Ä–≤–∏—Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                container.RegisterAsSingle<IAuthStateService>(container =>
                    new AuthStateService(
                        container.Resolve<FirebaseAuth>(),
                        container.Resolve<IAuthService>()
                    )
                ).NonLazy();

                // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º AuthManager –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å, –∞ –Ω–µ MonoBehaviour
                container.RegisterAsSingle<IAuthManager>(container =>
                {
                    var authManager = new AuthManager();
                    authManager.Inject(container);
                    return authManager;
                }).NonLazy();
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤: {ex.Message}", MyLogger.LogCategory.Bootstrap);
                throw;
            }
        }

        /// <summary>
        /// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
        /// </summary>
        private async Task RegisterPersonalAreaServices(DIContainer container)
        {
            try
            {
                // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º SettingsManager –¥–ª—è —Ä–∞–±–æ—Ç—ã –ø–∞–Ω–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                container.RegisterAsSingle<ISettingsManager>(c =>
                {
                    var settingsManager = new SettingsManager();
                    settingsManager.Inject(c);
                    return settingsManager;
                }).NonLazy();

                // –°–µ—Ä–≤–∏—Å –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
                container.RegisterAsSingle<IPersonalAreaService>(c =>
                    new PersonalAreaService(
                        c.Resolve<EmotionService>(),
                        c.Resolve<IPointsService>()
                    )
                );

                // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º EmotionJarView —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º IAssetLoader –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                container.RegisterAsSingle<EmotionJarView>(c =>
                {
                    var assetLoader = c.Resolve<IAssetLoader>();

                    // –°–æ–∑–¥–∞–¥–∏–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–∞–≥–ª—É—à–∫—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
                    var tempJarObject = new GameObject("TempEmotionJarView");
                    var tempJarView = tempJarObject.AddComponent<EmotionJarView>();

                    // –ù–∞—á–∏–Ω–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
                    var loadTask = assetLoader.LoadAssetAsync<EmotionJarView>(AssetAddresses.EmotionJarView);

                    // –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏, –∑–∞–º–µ–Ω–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–π
                    loadTask.ContinueWith(t =>
                    {
                        if (t.Result != null)
                        {
                            var realJarView = Instantiate(t.Result);

                            // –£–Ω–∏—á—Ç–æ–∂–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
                            if (tempJarObject != null)
                                Destroy(tempJarObject);
                        }
                        else
                        {
                            MyLogger.LogError($"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å EmotionJarView —Å –∫–ª—é—á–æ–º: {AssetAddresses.EmotionJarView}", MyLogger.LogCategory.Bootstrap);
                        }
                    }, TaskContinuationOptions.OnlyOnRanToCompletion);

                    return tempJarView;
                });
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞: {ex.Message}", MyLogger.LogCategory.Bootstrap);
                throw;
            }
        }

        /// <summary>
        /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç SecurePlayerPrefs –¥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        /// </summary>
        private void InitializeSecureStorage(DIContainer container)
        {
            try
            {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø –±–µ–∑ –ø–æ–ª–Ω–æ–≥–æ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
                var credentialStorage = new CredentialStorage("UltraSecretKey!üî•");
                container.RegisterAsSingle<CredentialStorage>(c => credentialStorage).NonLazy();
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SecurePlayerPrefs: {ex.Message}", MyLogger.LogCategory.Bootstrap);
                throw;
            }
        }

        /// <summary>
        /// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å—ã –∏–≥—Ä–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        /// </summary>
        private void RegisterGameSystem(DIContainer container)
        {
            // –°–µ—Ä–≤–∏—Å –æ—á–∫–æ–≤
            container.RegisterAsSingle<IPointsService>(container =>
                new PointsService(
                    container.Resolve<PlayerDataProvider>()
                )
            ).NonLazy();

            // –°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π
            container.RegisterAsSingle<ILevelSystem>(container =>
                new LevelSystem(
                    container.Resolve<PlayerDataProvider>(),
                    container.Resolve<IPointsService>()
                )
            ).NonLazy();

            // –°–µ—Ä–≤–∏—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π (—Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å—é –æ—Ç —Å–∏—Å—Ç–µ–º—ã —É—Ä–æ–≤–Ω–µ–π)
            container.RegisterAsSingle<IAchievementService>(container =>
                new AchievementService(
                    container.Resolve<PlayerDataProvider>(),
                    container.Resolve<IPointsService>(),
                    container.Resolve<ILevelSystem>()
                )
            ).NonLazy();
        }

        /// <summary>
        /// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å—ã Firebase –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
        /// </summary>
        private void RegisterFirebase(DIContainer container)
        {
            try
            {
                if (_firebaseApp == null)
                {
                    throw new InvalidOperationException("Firebase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
                }

                if (_firebaseDatabase == null)
                {
                    throw new InvalidOperationException("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö Firebase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");
                }

                // –°–µ—Ä–≤–∏—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Firebase
                container.RegisterAsSingle<FirebaseAuth>(container => FirebaseAuth.GetAuth(_firebaseApp)).NonLazy();

                // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–∞—à —ç–∫–∑–µ–º–ø–ª—è—Ä FirebaseApp
                container.RegisterAsSingle<FirebaseApp>(container => _firebaseApp).NonLazy();

                // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä FirebaseDatabase
                container.RegisterAsSingle<FirebaseDatabase>(container => _firebaseDatabase).NonLazy();

                // –°—Å—ã–ª–∫–∞ –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö Firebase
                container.RegisterAsSingle<DatabaseReference>(container => _firebaseDatabase.RootReference).NonLazy();

                // –ú–µ–Ω–µ–¥–∂–µ—Ä –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è Firebase
                container.RegisterAsSingle<FirebaseCacheManager>(container =>
                    new FirebaseCacheManager(
                        container.Resolve<ISaveLoadService>()
                    )
                ).NonLazy();

                // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —ç–º–æ—Ü–∏–π
                container.RegisterAsSingle<EmotionHistoryCache>(c =>
                    new EmotionHistoryCache(
                        c.Resolve<FirebaseCacheManager>()));

                // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
                container.RegisterAsSingle<DataValidationService>(c =>
                {
                    var validationService = new DataValidationService();

                    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤
                    validationService.RegisterValidator(new EmotionHistoryRecordValidator());
                    validationService.RegisterValidator(new UserDataValidator());

                    return validationService;
                }).NonLazy();

                // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ConnectivityManager –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ç—å—é
                container.RegisterAsSingle<ConnectivityManager>(c =>
                    new ConnectivityManager(
                        c.Resolve<ICoroutinePerformer>()
                    )
                ).NonLazy();

                // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö Firebase
                container.RegisterAsSingle<IDatabaseService>(c =>
                    new DatabaseService(
                        c.Resolve<DatabaseReference>(),
                        c.Resolve<FirebaseCacheManager>(),
                        c.Resolve<DataValidationService>())
                ).NonLazy();

                // –¢–∞–∫–∂–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º DatabaseService –Ω–∞–ø—Ä—è–º—É—é (–¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø)
                container.RegisterAsSingle<DatabaseService>(c =>
                    c.Resolve<IDatabaseService>() as DatabaseService
                ).NonLazy();

                // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                var syncSettings = new EmotionSyncSettings();

                // –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ (–∫–∞—Å—Ç–∏–º IDatabaseService –∫ DatabaseService, —Ç.–∫. —ç—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É)
                container.RegisterAsSingle<ConflictResolutionManager>(c =>
                    new ConflictResolutionManager(
                        c.Resolve<IDatabaseService>() as DatabaseService, // –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–∞
                        syncSettings)
                ).NonLazy();

                // –°–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —ç–º–æ—Ü–∏–π (—ç—Ç–æ MonoBehaviour, —Å–æ–∑–¥–∞–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º)
                container.RegisterAsSingle<EmotionSyncService>(c =>
                {
                    var syncService = new GameObject("EmotionSyncService").AddComponent<EmotionSyncService>();

                    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å
                    syncService.Initialize(
                        c.Resolve<IDatabaseService>(),
                        c.Resolve<EmotionHistoryCache>(),
                        c.Resolve<ConnectivityManager>());

                    DontDestroyOnLoad(syncService.gameObject);
                    return syncService;
                }).NonLazy();
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Firebase —Å–µ—Ä–≤–∏—Å–æ–≤: {ex.Message}", MyLogger.LogCategory.Bootstrap);
                throw;
            }
        }
    }
}
