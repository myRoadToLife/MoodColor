// Assets/App/Develop/EntryPoint/EntryPoint.cs (–ø–æ–ª–Ω—ã–π –∫–æ–¥ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏)
using System;
using System.Threading.Tasks;
using App.Develop.AppServices.Auth;
using App.Develop.AppServices.Firebase.Auth;
using App.Develop.AppServices.Firebase.Database.Services;
using App.Develop.AppServices.Firebase.Auth.Services;
using App.Develop.AppServices.Firebase.Common.SecureStorage;
using App.Develop.CommonServices.AssetManagement;
using App.Develop.CommonServices.ConfigsManagement;
using App.Develop.CommonServices.CoroutinePerformer;
using App.Develop.CommonServices.DataManagement;
using App.Develop.CommonServices.DataManagement.DataProviders;
using App.Develop.CommonServices.Emotion;
using App.Develop.CommonServices.LoadingScreen;
using App.Develop.CommonServices.SceneManagement;
using App.Develop.CommonServices.UI;
using App.Develop.DI;
using App.Develop.Scenes.PersonalAreaScene;
using Firebase;
using Firebase.Auth;
using Firebase.Database;
using UnityEngine;

namespace App.Develop.EntryPoint
{
    public class EntryPoint : MonoBehaviour
    {
        [SerializeField] private Bootstrap _appBootstrap;
        private DIContainer _projectContainer;

        private async void Start()
        {
            try
            {
                SetupAppSettings();

                _projectContainer = new DIContainer();

                RegisterCoreServices(_projectContainer);
                
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–µ—Ä–≤–æ–π
                if (!await InitFirebaseAsync())
                {
                    Debug.LogError("‚ùå Firebase –Ω–µ –≥–æ—Ç–æ–≤. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É.");
                    return;
                }
                
                RegisterFirebase(_projectContainer);
                RegisterAuthServices(_projectContainer);
                RegisterPersonalAreaServices(_projectContainer);

                _projectContainer.Initialize();
                
                _projectContainer.Resolve<PlayerDataProvider>().Load();

                _projectContainer.Resolve<ICoroutinePerformer>()
                    .StartPerformCoroutine(_appBootstrap.Run(_projectContainer));
            }
            catch (Exception ex)
            {
                Debug.LogError($"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {ex}");
            }
        }

        // Assets/App/Develop/EntryPoint/EntryPoint.cs - –º–µ—Ç–æ–¥ RegisterPersonalAreaServices

        private void RegisterPersonalAreaServices(DIContainer projectContainer)
        {
            try
            {
                projectContainer.RegisterAsSingle<IPersonalAreaService>(di =>
                    new PersonalAreaService(
                        di.Resolve<EmotionService>()
                    )
                ).NonLazy();
        
                Debug.Log("‚úÖ PersonalAreaService –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω");
            }
            catch (Exception ex)
            {
                Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ PersonalAreaService: {ex.Message}");
                throw;
            }
        }

        private void SetupAppSettings()
        {
            QualitySettings.vSyncCount = 0;
            Application.targetFrameRate = 60;
            Debug.Log("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã");
        }

        private async Task<bool> InitFirebaseAsync()
        {
            try
            {
                Debug.Log("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase...");
                var task = FirebaseApp.CheckAndFixDependenciesAsync();
                await task;
                
                var result = task.Result;
                if (result == DependencyStatus.Available)
                {
                    Debug.Log("‚úÖ Firebase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ");
                    return true;
                }
                
                Debug.LogError($"‚ùå Firebase –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: {result}");
                return false;
            }
            catch (Exception ex)
            {
                Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase: {ex.Message}");
                return false;
            }
        }

        private void RegisterCoreServices(DIContainer container)
        {
            try
            {
                container.RegisterAsSingle(_ => new ResourcesAssetLoader());

                container.RegisterAsSingle<ICoroutinePerformer>(di =>
                    Instantiate(di.Resolve<ResourcesAssetLoader>().LoadResource<CoroutinePerformer>(AssetPaths.CoroutinePerformer))
                );

                container.RegisterAsSingle<ILoadingScreen>(di =>
                    Instantiate(di.Resolve<ResourcesAssetLoader>().LoadResource<LoadingScreen>(AssetPaths.LoadingScreen))
                );

                container.RegisterAsSingle<ISceneLoader>(_ => new SceneLoader());

                container.RegisterAsSingle(di =>
                    new SceneSwitcher(
                        di.Resolve<ICoroutinePerformer>(),
                        di.Resolve<ILoadingScreen>(),
                        di.Resolve<ISceneLoader>(),
                        di
                    )
                );

                container.RegisterAsSingle<ISaveLoadService>(_ =>
                    new SaveLoadService(new JsonSerializer(), new LocalDataRepository()));

                container.RegisterAsSingle(di =>
                    new ConfigsProviderService(di.Resolve<ResourcesAssetLoader>())
                );

                container.RegisterAsSingle(di =>
                    new PlayerDataProvider(
                        di.Resolve<ISaveLoadService>(),
                        di.Resolve<ConfigsProviderService>()
                    )
                );

                container.RegisterAsSingle(di =>
                    new EmotionService(di.Resolve<PlayerDataProvider>())
                ).NonLazy();

                container.RegisterAsSingle(di =>
                    new PanelManager(
                        di.Resolve<ResourcesAssetLoader>(),
                        new MonoFactory(di)
                    )
                ).NonLazy();
                
                Debug.Log("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã");
            }
            catch (Exception ex)
            {
                Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤: {ex.Message}");
                throw;
            }
        }

        // Assets/App/Develop/EntryPoint/EntryPoint.cs - –º–µ—Ç–æ–¥ RegisterFirebase

        private void RegisterFirebase(DIContainer container)
        {
            try
            {
                // –ë–∞–∑–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã Firebase
                container.RegisterAsSingle<FirebaseAuth>(_ => FirebaseAuth.DefaultInstance).NonLazy();
        
                // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é DatabaseReference, –¥–æ–±–∞–≤–ª—è—è URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                container.RegisterAsSingle<DatabaseReference>(_ => {
                    // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ URL –≤–∞—à–µ–π Firebase –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                    string databaseUrl = "https://moodcolor-3ac59-default-rtdb.firebaseio.com/";
            
                    // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º URL
                    var database = FirebaseDatabase.GetInstance(FirebaseApp.DefaultInstance, databaseUrl);
            
                    return database.RootReference;
                }).NonLazy();

                // –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - –±–µ–∑ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                container.RegisterAsSingle<DatabaseService>(di =>
                    new DatabaseService(
                        di.Resolve<DatabaseReference>()
                    )
                ).NonLazy();
        
                Debug.Log("‚úÖ Firebase —Å–µ—Ä–≤–∏—Å—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã");
            }
            catch (Exception ex)
            {
                Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Firebase —Å–µ—Ä–≤–∏—Å–æ–≤: {ex.Message}");
                throw;
            }
        }

        private void RegisterAuthServices(DIContainer container)
        {
            try
            {
                // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é ValidationService - –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–±—Ä–∏–∫—É
                container.RegisterAsSingle<ValidationService>(di => new ValidationService()).NonLazy();
        
                container.RegisterAsSingle<CredentialStorage>(_ => 
                    new CredentialStorage("UltraSecretKey!üî•")
                ).NonLazy();

                container.RegisterAsSingle<IAuthService>(di =>
                    new AuthService(
                        di.Resolve<FirebaseAuth>(),
                        di.Resolve<DatabaseService>(),
                        di.Resolve<ValidationService>()
                    )
                ).NonLazy();

                container.RegisterAsSingle<UserProfileService>(di =>
                    new UserProfileService(
                        di.Resolve<DatabaseService>()
                    )
                ).NonLazy();
        
                Debug.Log("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã");
            }
            catch (Exception ex)
            {
                Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤: {ex.Message}");
                throw;
            }
        }
    }
}