using System;
using System.Threading.Tasks;
using App.Develop.AppServices.Firebase.Auth;
using App.Develop.AppServices.Firebase.Auth.Services;
using App.Develop.AppServices.Firebase.Database.Services;
using App.Develop.CommonServices.AssetManagement;
using App.Develop.CommonServices.ConfigsManagement;
using App.Develop.CommonServices.CoroutinePerformer;
using App.Develop.CommonServices.DataManagement;
using App.Develop.CommonServices.DataManagement.DataProviders;
using App.Develop.CommonServices.Emotion;
using App.Develop.CommonServices.LoadingScreen;
using App.Develop.CommonServices.SceneManagement;
using App.Develop.CommonServices.UI;
using App.Develop.DI;
using App.Develop.Scenes.PersonalAreaScene;
using Firebase;
using Firebase.Auth;
using Firebase.Database;
using UnityEngine;

namespace App.Develop.EntryPoint
{
    /// <summary>
    /// –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ. –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤.
    /// </summary>
    public class EntryPoint : MonoBehaviour
    {
        [SerializeField] private Bootstrap _appBootstrap;
        private DIContainer _projectContainer;

        private async void Start()
        {
            try
            {
                await InitializeApplication();
            }
            catch (Exception ex)
            {
                Debug.LogError($"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {ex}");
            }
        }

        /// <summary>
        /// –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        /// </summary>
        private async Task InitializeApplication()
        {
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            SetupAppSettings();

            // –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            _projectContainer = new DIContainer();
            RegisterCoreServices(_projectContainer);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —ç–∫—Ä–∞–Ω —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            ShowInitialLoadingScreen();

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
            if (!await InitFirebaseAsync())
            {
                Debug.LogError("‚ùå Firebase –Ω–µ –≥–æ—Ç–æ–≤. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É.");
                return;
            }

            // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤, –∑–∞–≤–∏—Å—è—â–∏—Ö –æ—Ç Firebase
            RegisterFirebaseServices();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            InitializeContainerAndLoadData();
            
            // –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            StartBootstrapProcess();
        }

        /// <summary>
        /// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        /// </summary>
        private void SetupAppSettings()
        {
            QualitySettings.vSyncCount = 0;
            Application.targetFrameRate = 60;
            Debug.Log("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã");
        }

        /// <summary>
        /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —ç–∫—Ä–∞–Ω
        /// </summary>
        private void ShowInitialLoadingScreen()
        {
            ILoadingScreen loadingScreen = _projectContainer.Resolve<ILoadingScreen>();
            loadingScreen.Show();
        }

        /// <summary>
        /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Firebase –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        /// </summary>
        private async Task<bool> InitFirebaseAsync()
        {
            try
            {
                Debug.Log("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase...");
                var task = FirebaseApp.CheckAndFixDependenciesAsync();
                await task;

                var result = task.Result;
                if (result == DependencyStatus.Available)
                {
                    Debug.Log("‚úÖ Firebase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ");
                    return true;
                }
                
                Debug.LogError($"‚ùå Firebase –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: {result}");
                return false;
            }
            catch (Exception ex)
            {
                Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å—ã, –∑–∞–≤–∏—Å—è—â–∏–µ –æ—Ç Firebase
        /// </summary>
        private void RegisterFirebaseServices()
        {
            RegisterFirebase(_projectContainer);
            RegisterAuthServices(_projectContainer);
        }

        /// <summary>
        /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ
        /// </summary>
        private void InitializeContainerAndLoadData()
        {
            RegisterPersonalAreaServices(_projectContainer);
            _projectContainer.Initialize();
            _projectContainer.Resolve<PlayerDataProvider>().Load();
        }

        /// <summary>
        /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        /// </summary>
        private void StartBootstrapProcess()
        {
            _projectContainer.Resolve<ICoroutinePerformer>()
                .StartPerformCoroutine(_appBootstrap.Run(_projectContainer));
        }

        /// <summary>
        /// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
        /// </summary>
        private void RegisterCoreServices(DIContainer container)
        {
            try
            {
                // –ó–∞–≥—Ä—É–∑—á–∏–∫ —Ä–µ—Å—É—Ä—Å–æ–≤
                container.RegisterAsSingle(container => new ResourcesAssetLoader());

                // –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∫–æ—Ä—É—Ç–∏–Ω
                container.RegisterAsSingle<ICoroutinePerformer>(container =>
                    Instantiate(container.Resolve<ResourcesAssetLoader>().LoadResource<CoroutinePerformer>(AssetPaths.CoroutinePerformer))
                );

                // –ó–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —ç–∫—Ä–∞–Ω
                container.RegisterAsSingle<ILoadingScreen>(container =>
                    Instantiate(container.Resolve<ResourcesAssetLoader>().LoadResource<LoadingScreen>(AssetPaths.LoadingScreen))
                );

                // –ó–∞–≥—Ä—É–∑—á–∏–∫ —Å—Ü–µ–Ω
                container.RegisterAsSingle<ISceneLoader>(container => new SceneLoader());

                // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Å—Ü–µ–Ω
                container.RegisterAsSingle(container =>
                    new SceneSwitcher(
                        container.Resolve<ICoroutinePerformer>(),
                        container.Resolve<ILoadingScreen>(),
                        container.Resolve<ISceneLoader>(),
                        container
                    )
                );

                // –°–µ—Ä–≤–∏—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–∑–∞–≥—Ä—É–∑–∫–∏
                container.RegisterAsSingle<ISaveLoadService>(container =>
                    new SaveLoadService(new JsonSerializer(), new LocalDataRepository())
                );

                // –°–µ—Ä–≤–∏—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
                container.RegisterAsSingle(container =>
                    new ConfigsProviderService(container.Resolve<ResourcesAssetLoader>())
                ).NonLazy();

                // –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞
                container.RegisterAsSingle(container =>
                    new PlayerDataProvider(
                        container.Resolve<ISaveLoadService>(),
                        container.Resolve<ConfigsProviderService>()
                    )
                );

                // –°–µ—Ä–≤–∏—Å —ç–º–æ—Ü–∏–π
                container.RegisterAsSingle(container =>
                    new EmotionService(container.Resolve<PlayerDataProvider>())
                ).NonLazy();

                // –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–Ω–µ–ª–µ–π UI
                container.RegisterAsSingle(container =>
                    new PanelManager(
                        container.Resolve<ResourcesAssetLoader>(),
                        new MonoFactory(container)
                    )
                ).NonLazy();

                Debug.Log("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã");
            }
            catch (Exception ex)
            {
                Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤: {ex.Message}");
                throw;
            }
        }

        /// <summary>
        /// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å—ã Firebase –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
        /// </summary>
        private void RegisterFirebase(DIContainer container)
        {
            try
            {
                // –°–µ—Ä–≤–∏—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Firebase
                container.RegisterAsSingle<FirebaseAuth>(container => FirebaseAuth.DefaultInstance).NonLazy();

                // –°—Å—ã–ª–∫–∞ –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö Firebase
                container.RegisterAsSingle<DatabaseReference>(container =>
                {
                    string databaseUrl = "https://moodcolor-3ac59-default-rtdb.firebaseio.com/";
                    var database = FirebaseDatabase.GetInstance(FirebaseApp.DefaultInstance, databaseUrl);
                    return database.RootReference;
                }).NonLazy();

                // –°–µ—Ä–≤–∏—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                container.RegisterAsSingle<DatabaseService>(container =>
                    new DatabaseService(
                        container.Resolve<DatabaseReference>()
                    )
                ).NonLazy();

                Debug.Log("‚úÖ Firebase —Å–µ—Ä–≤–∏—Å—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã");
            }
            catch (Exception ex)
            {
                Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Firebase —Å–µ—Ä–≤–∏—Å–æ–≤: {ex.Message}");
                throw;
            }
        }

        /// <summary>
        /// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
        /// </summary>
        private void RegisterAuthServices(DIContainer container)
        {
            try
            {
                // –°–µ—Ä–≤–∏—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                container.RegisterAsSingle<ValidationService>(container => new ValidationService()).NonLazy();

                // –•—Ä–∞–Ω–∏–ª–∏—â–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                container.RegisterAsSingle<CredentialStorage>(container =>
                    new CredentialStorage("UltraSecretKey!üî•")
                ).NonLazy();

                // –°–µ—Ä–≤–∏—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                container.RegisterAsSingle<IAuthService>(container =>
                    new AuthService(
                        container.Resolve<FirebaseAuth>(),
                        container.Resolve<DatabaseService>(),
                        container.Resolve<ValidationService>()
                    )
                ).NonLazy();

                // –°–µ—Ä–≤–∏—Å –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                container.RegisterAsSingle<UserProfileService>(container =>
                    new UserProfileService(
                        container.Resolve<DatabaseService>()
                    )
                ).NonLazy();

                Debug.Log("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã");
            }
            catch (Exception ex)
            {
                Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤: {ex.Message}");
                throw;
            }
        }

        /// <summary>
        /// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å—ã –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
        /// </summary>
        private void RegisterPersonalAreaServices(DIContainer container)
        {
            try
            {
                container.RegisterAsSingle<IPersonalAreaService>(container =>
                    new PersonalAreaService(
                        container.Resolve<EmotionService>()
                    )
                ).NonLazy();

                Debug.Log("‚úÖ PersonalAreaService –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω");
            }
            catch (Exception ex)
            {
                Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ PersonalAreaService: {ex.Message}");
                throw;
            }
        }
    }
}
