using System;
using System.Collections;
using App.Develop.CommonServices.DataManagement.DataProviders;
using App.Develop.CommonServices.Firebase.Common.SecureStorage;
using App.Develop.CommonServices.Firebase.Database.Services;
using App.Develop.CommonServices.Firebase.Database.Models;
using App.Develop.CommonServices.SceneManagement;
using App.Develop.CommonServices.Emotion;
using App.Develop.DI;
using App.Develop.Scenes.AuthScene;
using App.Develop.Scenes.PersonalAreaScene;
using Firebase.Auth;
using UnityEngine;
using UserProfile = App.Develop.CommonServices.Firebase.Database.Models.UserProfile;
using App.Develop.Utils.Logging;

namespace App.Develop.EntryPoint
{
    public class Bootstrap : MonoBehaviour
    {
        public IEnumerator Run(DIContainer container)
        {
            var sceneSwitcher = container.Resolve<SceneSwitcher>();
            var auth = container.Resolve<FirebaseAuth>();
            var databaseService = container.Resolve<IDatabaseService>();

            MyLogger.Log("üöÄ –ó–∞–ø—É—Å–∫ Bootstrap...", MyLogger.LogCategory.Bootstrap);

            MyLogger.Log($"üöÄ –ü—Ä–æ–≤–µ—Ä—è–µ–º CurrentUser: {(auth.CurrentUser != null ? "–ï–°–¢–¨" : "–ù–ï–¢")}", MyLogger.LogCategory.Bootstrap);

            if (auth.CurrentUser != null)
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ —è–≤–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞ - –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã,
                // —Ç–æ –Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –Ω–∞ —ç–∫—Ä–∞–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                bool explicitLogout = SecurePlayerPrefs.GetBool("explicit_logout", false);
                if (explicitLogout)
                {
                    MyLogger.Log("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–ª–∞–≥ —è–≤–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã. –ü–µ—Ä–µ—Ö–æ–¥ –∫ —ç–∫—Ä–∞–Ω—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.", MyLogger.LogCategory.Bootstrap);
                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
                    SecurePlayerPrefs.SetBool("explicit_logout", false);
                    SecurePlayerPrefs.Save();

                    auth.SignOut();
                    sceneSwitcher.ProcessSwitchSceneFor(new OutputBootstrapArgs(new AuthSceneInputArgs()));
                    yield break;
                }

                var user = auth.CurrentUser;
                MyLogger.Log($"–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.Email}. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏...", MyLogger.LogCategory.Bootstrap);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é
                MyLogger.Log("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é...", MyLogger.LogCategory.Bootstrap);
                bool sessionValid = true;

                // –í—ã–Ω–µ—Å–µ–º yield return –∑–∞ –ø—Ä–µ–¥–µ–ª—ã try-catch
                var reloadTask = user.ReloadAsync();

                while (!reloadTask.IsCompleted)
                {
                    yield return null;
                }

                try
                {
                    if (reloadTask.IsFaulted || reloadTask.IsCanceled)
                    {
                        MyLogger.LogError("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", MyLogger.LogCategory.Bootstrap);
                        sessionValid = false;
                    }
                }
                catch (Exception ex)
                {
                    MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Å—Å–∏–∏: {ex.Message}", MyLogger.LogCategory.Bootstrap);
                    sessionValid = false;
                }

                if (!sessionValid)
                {
                    MyLogger.Log("‚ö†Ô∏è –°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞. –í—ã—Ö–æ–¥ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.", MyLogger.LogCategory.Bootstrap);
                    auth.SignOut();
                    sceneSwitcher.ProcessSwitchSceneFor(new OutputBootstrapArgs(new AuthSceneInputArgs()));
                    yield break;
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ—Ä–≤–∏—Å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                databaseService.UpdateUserId(user.UserId);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ - –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –≤—Ö–æ–¥ —Å —Ä–∞–∑–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                MyLogger.Log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –≤—Ö–æ–¥–∞...", MyLogger.LogCategory.Bootstrap);

                string currentDeviceId = ActiveSessionData.GetCurrentDeviceId();
                MyLogger.Log($"üîç –¢–µ–∫—É—â–∏–π Device ID: {currentDeviceId}", MyLogger.LogCategory.Bootstrap);

                if (string.IsNullOrEmpty(currentDeviceId))
                {
                    MyLogger.LogError("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", MyLogger.LogCategory.Bootstrap);
                    auth.SignOut();
                    sceneSwitcher.ProcessSwitchSceneFor(new OutputBootstrapArgs(new AuthSceneInputArgs()));
                    yield break;
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ —Å –¥—Ä—É–≥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                var sessionCheckTask = databaseService.CheckActiveSessionExists(currentDeviceId);
                while (!sessionCheckTask.IsCompleted)
                {
                    yield return null;
                }

                if (sessionCheckTask.IsFaulted)
                {
                    MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {sessionCheckTask.Exception?.Message}", MyLogger.LogCategory.Bootstrap);
                    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
                }
                else if (sessionCheckTask.Result)
                {
                    MyLogger.Log("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è —Å –¥—Ä—É–≥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥.", MyLogger.LogCategory.Bootstrap);
                    auth.SignOut();
                    databaseService.UpdateUserId(null);
                    sceneSwitcher.ProcessSwitchSceneFor(new OutputBootstrapArgs(new AuthSceneInputArgs()));
                    yield break;
                }
                else
                {
                    MyLogger.Log("‚úÖ –î—Ä—É–≥–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º...", MyLogger.LogCategory.Bootstrap);
                }

                // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                MyLogger.Log("üîç –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...", MyLogger.LogCategory.Bootstrap);
                var sessionRegisterTask = databaseService.RegisterActiveSession();
                while (!sessionRegisterTask.IsCompleted)
                {
                    yield return null;
                }

                if (sessionRegisterTask.IsFaulted)
                {
                    MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏: {sessionRegisterTask.Exception?.Message}", MyLogger.LogCategory.Bootstrap);
                    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
                }
                else if (sessionRegisterTask.Result)
                {
                    MyLogger.Log("‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞", MyLogger.LogCategory.Bootstrap);
                }
                else
                {
                    MyLogger.LogWarning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é (Result = false)", MyLogger.LogCategory.Bootstrap);
                }

                MyLogger.Log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–∞–Ω–µ–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏.", MyLogger.LogCategory.Bootstrap);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é email
                if (!user.IsEmailVerified)
                {
                    MyLogger.Log("üìß Email –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –ü–µ—Ä–µ—Ö–æ–¥ –≤ AuthScene ‚Üí EmailVerification.", MyLogger.LogCategory.Bootstrap);
                    sceneSwitcher.ProcessSwitchSceneFor(new OutputBootstrapArgs(new AuthSceneInputArgs()));
                    yield break;
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                MyLogger.Log("–ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...", MyLogger.LogCategory.Bootstrap);
                UserProfile profile = null;

                // –í—ã–Ω–µ—Å–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ try-catch
                var profileTask = databaseService.GetUserProfile(user.UserId);

                while (!profileTask.IsCompleted)
                {
                    yield return null;
                }

                try
                {
                    if (profileTask.IsFaulted)
                    {
                        MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è: {profileTask.Exception?.InnerException?.Message}", MyLogger.LogCategory.Bootstrap);

                        throw profileTask.Exception?.InnerException ??
                              new Exception("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è");
                    }

                    profile = profileTask.Result;
                }
                catch (Exception ex)
                {
                    MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è: {ex.Message}", MyLogger.LogCategory.Bootstrap);
                    auth.SignOut();
                    databaseService.UpdateUserId(null);
                    sceneSwitcher.ProcessSwitchSceneFor(new OutputBootstrapArgs(new AuthSceneInputArgs()));
                    yield break;
                }

                if (profile == null)
                {
                    MyLogger.Log("üë§ –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–µ—Ä–µ—Ö–æ–¥ –≤ AuthScene ‚Üí –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è.", MyLogger.LogCategory.Bootstrap);
                    sceneSwitcher.ProcessSwitchSceneFor(new OutputBootstrapArgs(new AuthSceneInputArgs()));
                    yield break;
                }

                if (string.IsNullOrEmpty(profile.Nickname))
                {
                    MyLogger.Log("üë§ –ù–∏–∫–Ω–µ–π–º –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω. –ü–µ—Ä–µ—Ö–æ–¥ –≤ AuthScene ‚Üí –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è.", MyLogger.LogCategory.Bootstrap);
                    sceneSwitcher.ProcessSwitchSceneFor(new OutputBootstrapArgs(new AuthSceneInputArgs()));
                    yield break;
                }

                MyLogger.Log($"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {profile.Nickname}. –ü–µ—Ä–µ—Ö–æ–¥ –≤ PersonalArea.", MyLogger.LogCategory.Bootstrap);
                sceneSwitcher.ProcessSwitchSceneFor(new OutputBootstrapArgs(new PersonalAreaInputArgs()));
            }
            else
            {
                MyLogger.Log("üîê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –ü–µ—Ä–µ—Ö–æ–¥ –≤ AuthScene.", MyLogger.LogCategory.Bootstrap);
                sceneSwitcher.ProcessSwitchSceneFor(new OutputBootstrapArgs(new AuthSceneInputArgs()));
            }
        }
    }
}