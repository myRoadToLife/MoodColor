// Assets/App/Develop/EntryPoint/Bootstrap.cs

using System;
using System.Collections;
using App.Develop.CommonServices.DataManagement.DataProviders;
using App.Develop.CommonServices.Firebase.Common.SecureStorage;
using App.Develop.CommonServices.Firebase.Database.Services;
using App.Develop.CommonServices.SceneManagement;
using App.Develop.DI;
using App.Develop.Scenes.AuthScene;
using App.Develop.Scenes.PersonalAreaScene;
using Firebase.Auth;
using UnityEngine;
using UserProfile = App.Develop.CommonServices.Firebase.Database.Models.UserProfile;

namespace App.Develop.EntryPoint
{
    public class Bootstrap : MonoBehaviour
    {
        public IEnumerator Run(DIContainer container)
        {
            var sceneSwitcher = container.Resolve<SceneSwitcher>();
            var auth = container.Resolve<FirebaseAuth>();
            var databaseService = container.Resolve<DatabaseService>();

            Debug.Log("üöÄ –ó–∞–ø—É—Å–∫ Bootstrap...");

            if (auth.CurrentUser != null)
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ —è–≤–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞ - –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã,
                // —Ç–æ –Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –Ω–∞ —ç–∫—Ä–∞–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                bool explicitLogout = SecurePlayerPrefs.GetBool("explicit_logout", false);
                if (explicitLogout)
                {
                    Debug.Log("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–ª–∞–≥ —è–≤–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã. –ü–µ—Ä–µ—Ö–æ–¥ –∫ —ç–∫—Ä–∞–Ω—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.");
                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
                    SecurePlayerPrefs.SetBool("explicit_logout", false);
                    SecurePlayerPrefs.Save();
                    
                    auth.SignOut();
                    sceneSwitcher.ProcessSwitchSceneFor(new OutputBootstrapArgs(new AuthSceneInputArgs()));
                    yield break;
                }

                var user = auth.CurrentUser;
                Debug.Log($"–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.Email}. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏...");

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é
                Debug.Log("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é...");
                bool sessionValid = true;

                // –í—ã–Ω–µ—Å–µ–º yield return –∑–∞ –ø—Ä–µ–¥–µ–ª—ã try-catch
                var reloadTask = user.ReloadAsync();

                while (!reloadTask.IsCompleted)
                {
                    yield return null;
                }

                try
                {
                    if (reloadTask.IsFaulted || reloadTask.IsCanceled)
                    {
                        Debug.LogError("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
                        sessionValid = false;
                    }
                }
                catch (Exception ex)
                {
                    Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Å—Å–∏–∏: {ex.Message}");
                    sessionValid = false;
                }

                if (!sessionValid)
                {
                    Debug.Log("‚ö†Ô∏è –°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞. –í—ã—Ö–æ–¥ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.");
                    auth.SignOut();
                    sceneSwitcher.ProcessSwitchSceneFor(new OutputBootstrapArgs(new AuthSceneInputArgs()));
                    yield break;
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ—Ä–≤–∏—Å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                databaseService.UpdateUserId(user.UserId);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é email
                if (!user.IsEmailVerified)
                {
                    Debug.Log("üìß Email –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –ü–µ—Ä–µ—Ö–æ–¥ –≤ AuthScene ‚Üí EmailVerification.");
                    sceneSwitcher.ProcessSwitchSceneFor(new OutputBootstrapArgs(new AuthSceneInputArgs()));
                    yield break;
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                Debug.Log("–ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...");
                UserProfile profile = null;

                // –í—ã–Ω–µ—Å–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ try-catch
                var profileTask = databaseService.GetUserProfile(user.UserId);

                while (!profileTask.IsCompleted)
                {
                    yield return null;
                }

                try
                {
                    if (profileTask.IsFaulted)
                    {
                        Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è: {profileTask.Exception?.InnerException?.Message}");

                        throw profileTask.Exception?.InnerException ??
                              new Exception("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è");
                    }

                    profile = profileTask.Result;
                }
                catch (Exception ex)
                {
                    Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è: {ex.Message}");
                    auth.SignOut();
                    databaseService.UpdateUserId(null);
                    sceneSwitcher.ProcessSwitchSceneFor(new OutputBootstrapArgs(new AuthSceneInputArgs()));
                    yield break;
                }

                if (profile == null)
                {
                    Debug.Log("üë§ –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–µ—Ä–µ—Ö–æ–¥ –≤ AuthScene ‚Üí –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è.");
                    sceneSwitcher.ProcessSwitchSceneFor(new OutputBootstrapArgs(new AuthSceneInputArgs()));
                    yield break;
                }

                if (string.IsNullOrEmpty(profile.Nickname))
                {
                    Debug.Log("üë§ –ù–∏–∫–Ω–µ–π–º –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω. –ü–µ—Ä–µ—Ö–æ–¥ –≤ AuthScene ‚Üí –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è.");
                    sceneSwitcher.ProcessSwitchSceneFor(new OutputBootstrapArgs(new AuthSceneInputArgs()));
                    yield break;
                }

                Debug.Log($"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {profile.Nickname}. –ü–µ—Ä–µ—Ö–æ–¥ –≤ PersonalArea.");
                sceneSwitcher.ProcessSwitchSceneFor(new OutputBootstrapArgs(new PersonalAreaInputArgs()));
            }
            else
            {
                Debug.Log("üîê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –ü–µ—Ä–µ—Ö–æ–¥ –≤ AuthScene.");
                sceneSwitcher.ProcessSwitchSceneFor(new OutputBootstrapArgs(new AuthSceneInputArgs()));
            }
        }
    }
}
