using System.Collections;
using System.Threading.Tasks;
using App.Develop.CommonServices.SceneManagement;
using App.Develop.DI;
using Firebase.Auth;
using Firebase.Extensions;
using Firebase.Firestore;
using UnityEngine;

namespace App.Develop.EntryPoint
{
    public class Bootstrap : MonoBehaviour
    {
        public IEnumerator Run(DIContainer container)
        {
            SceneSwitcher sceneSwitcher = container.Resolve<SceneSwitcher>();
            FirebaseAuth auth = FirebaseAuth.DefaultInstance;
            FirebaseFirestore db = FirebaseFirestore.DefaultInstance;

            Debug.Log("üöÄ –ó–∞–ø—É—Å–∫ Bootstrap...");

            if (auth.CurrentUser != null)
            {
                FirebaseUser user = auth.CurrentUser;
                Debug.Log($"–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.Email}. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏...");

                Task reloadTask = user.ReloadAsync();
                yield return new WaitUntil(() => reloadTask.IsCompleted);

                if (reloadTask.IsFaulted || reloadTask.IsCanceled)
                {
                    Debug.LogWarning("‚ö†Ô∏è –°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞. –í—ã—Ö–æ–¥ –∏ –≤–æ–∑–≤—Ä–∞—Ç –∫ AuthScene.");
                    auth.SignOut();
                    sceneSwitcher.ProcessSwitchSceneFor(new OutputBootstrapArgs(new AuthSceneInputArgs()));
                    yield break;
                }

                if (!user.IsEmailVerified)
                {
                    Debug.Log("üìß Email –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –ü–µ—Ä–µ—Ö–æ–¥ –≤ AuthScene ‚Üí EmailVerification.");
                    sceneSwitcher.ProcessSwitchSceneFor(new OutputBootstrapArgs(new AuthSceneInputArgs()));
                    yield break;
                }

                Task<DocumentSnapshot> userDocTask = db.Collection("users").Document(user.UserId).GetSnapshotAsync();
                yield return new WaitUntil(() => userDocTask.IsCompleted);

                if (userDocTask.IsFaulted || userDocTask.IsCanceled || !userDocTask.Result.Exists)
                {
                    Debug.Log("‚ùì –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è. –ü–µ—Ä–µ—Ö–æ–¥ –≤ AuthScene ‚Üí –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è.");
                    sceneSwitcher.ProcessSwitchSceneFor(new OutputBootstrapArgs(new AuthSceneInputArgs()));
                    yield break;
                }

                DocumentSnapshot doc = userDocTask.Result;

                bool hasNickname = doc.ContainsField("nickname");
                bool hasGender = doc.ContainsField("gender");

                if (hasNickname && hasGender)
                {
                    Debug.Log("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–ø–æ–ª–Ω–µ–Ω. –ü–µ—Ä–µ—Ö–æ–¥ –≤ PersonalArea.");
                    sceneSwitcher.ProcessSwitchSceneFor(new OutputBootstrapArgs(new PersonalAreaInputArgs()));
                }
                else
                {
                    Debug.Log("üë§ –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω. –ü–µ—Ä–µ—Ö–æ–¥ –≤ AuthScene ‚Üí –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è.");
                    sceneSwitcher.ProcessSwitchSceneFor(new OutputBootstrapArgs(new AuthSceneInputArgs()));
                }
            }
            else
            {
                Debug.Log("üîê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –ü–µ—Ä–µ—Ö–æ–¥ –≤ AuthScene.");
                sceneSwitcher.ProcessSwitchSceneFor(new OutputBootstrapArgs(new AuthSceneInputArgs()));
            }
        }
    }
}
