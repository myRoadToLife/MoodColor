using System;
using System.Collections.Generic;
using System.Linq;
using App.Develop.CommonServices.DataManagement.DataProviders;
using App.Develop.Utils.Reactive;
using UnityEngine;

namespace App.Develop.CommonServices.Emotion
{
    public class EmotionService : IDataReader<PlayerData>, IDataWriter<PlayerData>
    {
        private readonly Dictionary<EmotionTypes, ReactiveVariable<EmotionData>> _emotions = new Dictionary<EmotionTypes, ReactiveVariable<EmotionData>>();
        private readonly PlayerDataProvider _playerDataProvider;

        public EmotionService(PlayerDataProvider playerDataProvider)
        {
            _playerDataProvider = playerDataProvider;
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å —Å–æ –≤—Å–µ–º–∏ —Ç–∏–ø–∞–º–∏ —ç–º–æ—Ü–∏–π
            foreach (EmotionTypes type in Enum.GetValues(typeof(EmotionTypes)))
            {
                _emotions[type] = new ReactiveVariable<EmotionData>(new EmotionData
                {
                    Type = type.ToString(),
                    Value = 0,
                });
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å
            LoadEmotions();
        }

        public List<EmotionTypes> AvailableEmotions => _emotions.Keys.ToList();

        public ReactiveVariable<EmotionData> GetEmotion(EmotionTypes type)
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ
            if (!_emotions.ContainsKey(type))
            {
                Debug.LogWarning($"‚ö†Ô∏è –≠–º–æ—Ü–∏—è {type} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é.");
                
                // –ï—Å–ª–∏ –∫–ª—é—á–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                _emotions[type] = new ReactiveVariable<EmotionData>(new EmotionData
                {
                    Type = type.ToString(),
                    Value = 0,
                });
            }
            
            return _emotions[type];
        }

        public bool HasEnough(EmotionTypes type, int amount)
            => GetEmotion(type).Value.Value >= amount;

        public void SpendEmotion(EmotionTypes type, int amount)
        {
            if (!HasEnough(type, amount))
                throw new ArgumentException($"Not enough {type} emotion");

            var current = GetEmotion(type).Value;
            current.Value = current.Value - amount;
        }

        public void AddEmotion(EmotionTypes type, int amount)
        {
            var current = GetEmotion(type).Value;
            current.Value = current.Value + amount;
        }

        public void ReadFrom(PlayerData data)
        {
            if (data?.EmotionData == null)
            {
                Debug.LogWarning("‚ö†Ô∏è EmotionData –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∏ ReadFrom. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.");
                return;
            }

            foreach (var emotion in data.EmotionData)
            {
                if (_emotions.ContainsKey(emotion.Key))
                    GetEmotion(emotion.Key).Value = emotion.Value;
                else
                    _emotions.Add(emotion.Key, new ReactiveVariable<EmotionData>(emotion.Value));
            }

            // üß© –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —ç–º–æ—Ü–∏–∏ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            foreach (EmotionTypes type in Enum.GetValues(typeof(EmotionTypes)))
            {
                if (!_emotions.ContainsKey(type))
                {
                    Debug.LogWarning($"‚ö†Ô∏è Emotion {type} –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω. –°–æ–∑–¥–∞—ë–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.");
                    _emotions[type] = new ReactiveVariable<EmotionData>(new EmotionData
                    {
                        Type = type.ToString(),
                        Value = 0,
                    });
                }
            }
        }

        public void WriteTo(PlayerData data)
        {
            foreach (var emotion in _emotions)
            {
                if (data.EmotionData.ContainsKey(emotion.Key))
                {
                    data.EmotionData[emotion.Key] = emotion.Value.Value;
                }
                else
                {
                    data.EmotionData.Add(emotion.Key, emotion.Value.Value);
                }
            }
        }

        // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ —ç–º–æ—Ü–∏–∏
        public Color GetEmotionColor(EmotionTypes type)
        {
            return GetEmotion(type).Value.Color;
        }

        private void LoadEmotions()
        {
            // –ó–∞–≥—Ä—É–∑–∫–∞ —ç–º–æ—Ü–∏–π –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–ª–∏ API
            var savedEmotions = _playerDataProvider.GetEmotions();
            
            if (savedEmotions != null && savedEmotions.Count > 0)
            {
                foreach (var emotion in savedEmotions)
                {
                    if (Enum.TryParse<EmotionTypes>(emotion.Type, out var type))
                    {
                        if (!_emotions.ContainsKey(type))
                        {
                            _emotions[type] = new ReactiveVariable<EmotionData>(new EmotionData());
                        }
                        _emotions[type].Value = emotion;
                    }
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ç–∏–ø—ã —ç–º–æ—Ü–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
            foreach (EmotionTypes type in Enum.GetValues(typeof(EmotionTypes)))
            {
                if (!_emotions.ContainsKey(type))
                {
                    Debug.LogWarning($"‚ö†Ô∏è –≠–º–æ—Ü–∏—è {type} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞—ë–º —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.");
                    _emotions[type] = new ReactiveVariable<EmotionData>(new EmotionData
                    {
                        Type = type.ToString(),
                        Value = 0,
                        Intensity = 0
                    });
                }
            }
        }
    }
}