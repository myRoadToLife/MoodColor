using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using App.App.Develop.Scenes.PersonalAreaScene.UI.Components;
using App.Develop.CommonServices.Firebase.Database.Models;
using App.Develop.CommonServices.Firebase.Database.Services;
using App.Develop.CommonServices.DataManagement;
using App.Develop.CommonServices.DataManagement.DataProviders;
using App.Develop.CommonServices.ConfigsManagement;
using App.Develop.CommonServices.Networking;
using App.Develop.Configs.Common.Emotion;
using UnityEngine;
using App.Develop.CommonServices.Firebase.Common.SecureStorage;
using App.Develop.CommonServices.GameSystem;
using App.Develop.CommonServices.Location;
using App.Develop.DI;
using App.Develop.Utils.Logging;
using Firebase.Auth;
using App.Develop.CommonServices.Firebase.Common.Cache;
using App.Develop.CommonServices.Regional;

// –ò—Å–ø–æ–ª—å–∑—É–µ–º IDatabaseService —Ç–æ–ª—å–∫–æ –∏–∑ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∏–º–µ–Ω Services
using IDatabaseService = App.Develop.CommonServices.Firebase.Database.Services.IDatabaseService;

namespace App.Develop.CommonServices.Emotion
{
    public class EmotionService : IDataReader<PlayerData>, IDataWriter<PlayerData>, IEmotionService, IInitializable, IDisposable
    {
        #region Private Fields

        private readonly Dictionary<EmotionTypes, EmotionData> _emotions;
        private readonly PlayerDataProvider _playerDataProvider;
        private readonly EmotionMixingRules _emotionMixingRules;
        private readonly Dictionary<EmotionTypes, EmotionConfig> _emotionConfigs;
        private readonly EmotionHistory _emotionHistory;
        private readonly EmotionConfigService _emotionConfigService;

        // Firebase –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        private IDatabaseService _databaseService;
        private EmotionHistoryCache _emotionHistoryCache;
        private EmotionSyncService _syncService;
        private ConnectivityManager _connectivityManager;

        // –°–µ—Ä–≤–∏—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        private ILocationService _locationService;

        // –§–ª–∞–≥–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        private bool _isInitialized;
        private bool _isFirebaseInitialized;

        #region Dependencies

        private readonly IConfigsProvider _configsProvider;
        private readonly IPointsService _pointsService;
        private readonly ILevelSystem _levelSystem;
        private readonly IRegionalStatsService _regionalStatsService;

        #endregion

        #endregion

        #region Events

        // –°–æ–±—ã—Ç–∏—è –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
        public event EventHandler<EmotionEvent> OnEmotionEvent;

        // –°–æ–±—ã—Ç–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        public event Action<bool, string> OnSyncComplete;
        public event Action<float> OnSyncProgress;

        #endregion

        #region Constructors

        public EmotionService(
            PlayerDataProvider playerDataProvider,
            IConfigsProvider configsProvider,
            EmotionConfigService emotionConfigService,
            EmotionHistoryCache emotionHistoryCache = null,
            IPointsService pointsService = null,
            ILevelSystem levelSystem = null,
            IRegionalStatsService regionalStatsService = null)
        {
            _playerDataProvider = playerDataProvider ?? throw new ArgumentNullException(nameof(playerDataProvider));
            _configsProvider = configsProvider;
            _emotionConfigService = emotionConfigService;
            _pointsService = pointsService;
            _levelSystem = levelSystem;
            _regionalStatsService = regionalStatsService;
            _emotions = new Dictionary<EmotionTypes, EmotionData>();
            _emotionMixingRules = new EmotionMixingRules();
            _emotionConfigs = new Dictionary<EmotionTypes, EmotionConfig>();

            try
            {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –∫—ç—à –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                _emotionHistoryCache = emotionHistoryCache ?? new EmotionHistoryCache();
                _emotionHistory = new EmotionHistory(_emotionHistoryCache);

                MyLogger.Log($"üîß [EmotionService] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∫—ç—à–µ–º: {(_emotionHistoryCache != null ? "–î–ê" : "–ù–ï–¢")}", MyLogger.LogCategory.Firebase);
            }
            catch (Exception ex)
            {
                // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—ç—à–∞, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é –∏—Å—Ç–æ—Ä–∏—é
                MyLogger.LogWarning($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫—ç—à–∞ –∏—Å—Ç–æ—Ä–∏–∏ —ç–º–æ—Ü–∏–π: {ex.Message}. –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –ø—É—Å—Ç–∞—è –∏—Å—Ç–æ—Ä–∏—è.");
                _emotionHistory = new EmotionHistory();
            }

            InitializeEmotions();

            if (_emotionConfigService != null)
            {
                LoadEmotionConfigsFromService();
            }
            else
            {
                LoadEmotionConfigs(configsProvider);
            }

            _isInitialized = true;
        }

        // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        internal EmotionService(Dictionary<EmotionTypes, EmotionData> initialEmotions)
        {
            _emotions = initialEmotions ?? throw new ArgumentNullException(nameof(initialEmotions));
            _emotionMixingRules = new EmotionMixingRules();
            _emotionConfigs = new Dictionary<EmotionTypes, EmotionConfig>();
            _emotionHistory = new EmotionHistory();
        }

        #endregion

        #region Firebase Integration

        /// <summary>
        /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        /// </summary>
        public void SetLocationService(ILocationService locationService)
        {
            _locationService = locationService;
            MyLogger.Log("üó∫Ô∏è [EmotionService] LocationService —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", MyLogger.LogCategory.Location);
        }

        /// <summary>
        /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Firebase
        /// </summary>
        public void InitializeFirebaseSync(IDatabaseService databaseService, EmotionSyncService syncService, ConnectivityManager connectivityManager)
        {
            MyLogger.Log("üîó [InitializeFirebaseSync] –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é Firebase —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...", MyLogger.LogCategory.ClearHistory);

            _databaseService = databaseService;
            _syncService = syncService;
            _connectivityManager = connectivityManager;

            MyLogger.Log(
                $"üîç [InitializeFirebaseSync] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: _syncService!=null={_syncService != null}, _emotionHistoryCache!=null={_emotionHistoryCache != null}, _connectivityManager!=null={_connectivityManager != null}, _databaseService!=null={_databaseService != null}",
                MyLogger.LogCategory.ClearHistory);

            if (_syncService != null && _emotionHistoryCache != null && _connectivityManager != null && _databaseService != null)
            {
                _syncService.Initialize(_databaseService, _emotionHistoryCache, _connectivityManager);

                // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                _syncService.OnSyncComplete += HandleSyncComplete;
                _syncService.OnSyncProgress += HandleSyncProgress;
                _syncService.OnRecordSynced += HandleRecordSynced;
                _syncService.OnSyncConflict += HandleSyncConflict;

                _isFirebaseInitialized = true;

                MyLogger.Log("üîó [InitializeFirebaseSync] ‚úÖ Firebase Sync Services —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã. _isFirebaseInitialized = true.",
                    MyLogger.LogCategory.ClearHistory);
            }
            else
            {
                MyLogger.LogWarning("üîó [InitializeFirebaseSync] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Firebase Sync. –û–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Ä–∞–≤–Ω—ã null: " +
                                    $"_syncService is null: {_syncService == null}, " +
                                    $"_emotionHistoryCache is null: {_emotionHistoryCache == null}, " +
                                    $"_connectivityManager is null: {_connectivityManager == null}, " +
                                    $"_databaseService is null: {_databaseService == null}",
                    MyLogger.LogCategory.ClearHistory);

                _isFirebaseInitialized = false; // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
            }
        }

        /// <summary>
        /// –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å Firebase, –µ—Å–ª–∏ –æ–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
        /// </summary>
        public void StartSync()
        {
            if (_databaseService == null || !_databaseService.IsAuthenticated)
            {
                MyLogger.LogWarning("üî• [SYNC] ‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é: DatabaseService –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω.",
                    MyLogger.LogCategory.Firebase);

                return;
            }

            if (!_isFirebaseInitialized)
            {
                MyLogger.LogWarning(
                    "üî• [SYNC] ‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é: Firebase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–æ–ª–∂–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –≤ EmotionService (InitializeFirebaseSync –Ω–µ –±—ã–ª —É—Å–ø–µ—à–µ–Ω –∏–ª–∏ –Ω–µ –≤—ã–∑—ã–≤–∞–ª—Å—è).",
                    MyLogger.LogCategory.Firebase);

                return;
            }

            if (_syncService == null)
            {
                MyLogger.LogWarning("üî• [SYNC] ‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é: _syncService is null.", MyLogger.LogCategory.Firebase);
                return;
            }

            var unsyncedCount = _emotionHistoryCache?.GetUnsyncedRecords().Count ?? 0;
            MyLogger.Log($"üî• [SYNC] üìä –ù–∞–π–¥–µ–Ω–æ {unsyncedCount} –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏", MyLogger.LogCategory.Firebase);

            _syncService.StartSync(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ StartSync()
            MyLogger.Log("üî• [SYNC] ‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞ —á–µ—Ä–µ–∑ _syncService.StartSync().", MyLogger.LogCategory.Firebase);
        }

        /// <summary>
        /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏ —Å –æ–±–ª–∞–∫–æ–º
        /// </summary>
        public async Task<bool> ForceSyncLocalToCloud()
        {
            MyLogger.Log("üîÑ [FORCE-SYNC] üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –æ–±–ª–∞–∫–æ–º...", MyLogger.LogCategory.Firebase);

            if (!_isFirebaseInitialized || _databaseService == null || !_databaseService.IsAuthenticated)
            {
                MyLogger.LogWarning(
                    "üîÑ [FORCE-SYNC] ‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é: Firebase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω",
                    MyLogger.LogCategory.Firebase);

                return false;
            }

            if (_emotionHistoryCache == null)
            {
                MyLogger.LogWarning("üîÑ [FORCE-SYNC] ‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é: –∫—ç—à –∏—Å—Ç–æ—Ä–∏–∏ —ç–º–æ—Ü–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω",
                    MyLogger.LogCategory.Firebase);

                return false;
            }

            try
            {
                // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏ (–Ω–µ —Ç–æ–ª—å–∫–æ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
                var allLocalRecords = _emotionHistoryCache.GetAllRecords();

                if (allLocalRecords == null || !allLocalRecords.Any())
                {
                    MyLogger.LogWarning("üîÑ [FORCE-SYNC] ‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏", MyLogger.LogCategory.Firebase);
                    return false;
                }

                MyLogger.Log($"üîÑ [FORCE-SYNC] üìä –í—Å–µ–≥–æ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {allLocalRecords.Count}", MyLogger.LogCategory.Firebase);

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ–º –∑–∞–ø–∏—Å—è–º —Å—Ç–∞—Ç—É—Å "–ù–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ" –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                foreach (var record in allLocalRecords)
                {
                    record.SyncStatus = SyncStatus.NotSynced;
                    _emotionHistoryCache.UpdateRecord(record);
                }

                MyLogger.Log($"üîÑ [FORCE-SYNC] üìù –í—Å–µ {allLocalRecords.Count} –∑–∞–ø–∏—Å–∏ –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ", MyLogger.LogCategory.Firebase);

                // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
                StartSync();

                // –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                await Task.Delay(2000);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                var stillUnsyncedCount = _emotionHistoryCache.GetUnsyncedRecords().Count;

                if (stillUnsyncedCount > 0)
                {
                    MyLogger.Log($"üîÑ [FORCE-SYNC] ‚è≥ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞, –Ω–æ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Å—Ç–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å: {stillUnsyncedCount} –∑–∞–ø–∏—Å–µ–π",
                        MyLogger.LogCategory.Firebase);
                }
                else
                {
                    MyLogger.Log("üîÑ [FORCE-SYNC] ‚úÖ –í—Å–µ –∑–∞–ø–∏—Å–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é!", MyLogger.LogCategory.Firebase);
                }

                return true;
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"üîÑ [FORCE-SYNC] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {ex.Message}", MyLogger.LogCategory.Firebase);
                return false;
            }
        }

        /// <summary>
        /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∏–∑ Firebase (–º—è–≥–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏)
        /// </summary>
        public async Task<bool> RefreshHistoryFromFirebase()
        {
            MyLogger.Log(
                $"üîÑ [RefreshHistoryFromFirebase] –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. _isFirebaseInitialized: {_isFirebaseInitialized}, _databaseService null?: {_databaseService == null}, _databaseService.IsAuthenticated: {(_databaseService?.IsAuthenticated ?? false)}",
                MyLogger.LogCategory.Firebase);

            if (!_isFirebaseInitialized || _databaseService == null || !_databaseService.IsAuthenticated)
            {
                MyLogger.LogWarning("üîÑ –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–∑ Firebase: —Å–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω",
                    MyLogger.LogCategory.Firebase);

                return false;
            }

            try
            {
                MyLogger.Log("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ Firebase...", MyLogger.LogCategory.Firebase);

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
                var unsyncedRecords = _emotionHistoryCache?.GetUnsyncedRecords();
                int unsyncedCount = unsyncedRecords?.Count ?? 0;
                MyLogger.Log($"üìù –ù–∞–π–¥–µ–Ω–æ {unsyncedCount} –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π", MyLogger.LogCategory.Firebase);

                // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Firebase
                var firebaseRecords = await _databaseService.GetEmotionHistory();

                if (firebaseRecords == null || !firebaseRecords.Any())
                {
                    MyLogger.Log("‚òÅÔ∏è –í Firebase –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", MyLogger.LogCategory.Firebase);

                    if (unsyncedCount > 0)
                    {
                        MyLogger.Log("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –≤ Firebase...", MyLogger.LogCategory.Firebase);
                        StartSync(); // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    }

                    return true;
                }

                MyLogger.Log($"üì• –ü–æ–ª—É—á–µ–Ω–æ {firebaseRecords.Count} –∑–∞–ø–∏—Å–µ–π –∏–∑ Firebase", MyLogger.LogCategory.Firebase);

                // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à, —Å–æ—Ö—Ä–∞–Ω—è—è –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
                if (_emotionHistoryCache != null)
                {
                    // –û—á–∏—â–∞–µ–º –∫—ç—à, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
                    var allRecords = _emotionHistoryCache.GetAllRecords();
                    _emotionHistoryCache.ClearCache();

                    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑ Firebase
                    foreach (var record in firebaseRecords)
                    {
                        record.SyncStatus = SyncStatus.Synced;
                        _emotionHistoryCache.AddRecord(record);
                    }

                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ –∫—ç—à
                    if (unsyncedRecords != null)
                    {
                        foreach (var record in unsyncedRecords)
                        {
                            _emotionHistoryCache.AddRecord(record);
                        }
                    }

                    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∫—ç—à–∞
                    _emotionHistory.SetCache(_emotionHistoryCache);

                    MyLogger.Log("‚úÖ –ò—Å—Ç–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ Firebase —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π", MyLogger.LogCategory.Firebase);
                    return true;
                }

                return false;
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ Firebase: {ex.Message}", MyLogger.LogCategory.Firebase);
                throw;
            }
        }

        /// <summary>
        /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é —Å Firebase (–∑–∞–º–µ–Ω—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Firebase)
        /// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        /// </summary>
        public async Task<bool> ForceSyncWithFirebase()
        {
            MyLogger.Log(
                $"üîÑ [ForceSyncWithFirebase] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Firebase. _isFirebaseInitialized: {_isFirebaseInitialized}, _databaseService null?: {_databaseService == null}, _databaseService.IsAuthenticated: {(_databaseService?.IsAuthenticated ?? false)}",
                MyLogger.LogCategory.ClearHistory);

            if (!_isFirebaseInitialized || _databaseService == null || !_databaseService.IsAuthenticated)
            {
                MyLogger.LogWarning(
                    "üîÑ [ForceSyncWithFirebase] –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å Firebase: —Å–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω",
                    MyLogger.LogCategory.ClearHistory);

                return false;
            }

            try
            {
                MyLogger.Log("üîÑ [ForceSyncWithFirebase] –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å Firebase...", MyLogger.LogCategory.ClearHistory);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                bool isConnected = await _databaseService.CheckConnection();

                if (!isConnected)
                {
                    MyLogger.LogWarning("üîÑ [ForceSyncWithFirebase] –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Firebase", MyLogger.LogCategory.ClearHistory);
                    return false;
                }

                MyLogger.Log($"üîç [ForceSyncWithFirebase] –í—ã–∑—ã–≤–∞–µ–º _databaseService.GetEmotionHistory() –¥–ª—è UserId: {_databaseService.UserId}",
                    MyLogger.LogCategory.ClearHistory);

                // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Firebase
                var firebaseRecords = await _databaseService.GetEmotionHistory();

                MyLogger.Log($"üì• [ForceSyncWithFirebase] –ü–æ–ª—É—á–µ–Ω–æ {firebaseRecords?.Count ?? 0} –∑–∞–ø–∏—Å–µ–π –∏–∑ Firebase", MyLogger.LogCategory.ClearHistory);

                if (firebaseRecords == null)
                {
                    MyLogger.LogWarning("‚ö†Ô∏è [ForceSyncWithFirebase] GetEmotionHistory –≤–µ—Ä–Ω—É–ª NULL", MyLogger.LogCategory.ClearHistory);
                }

                // –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Firebase
                if (_emotionHistoryCache != null)
                {
                    MyLogger.Log("üóëÔ∏è [ForceSyncWithFirebase] –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à...", MyLogger.LogCategory.ClearHistory);
                    _emotionHistoryCache.ClearCache();

                    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑ Firebase (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
                    if (firebaseRecords != null && firebaseRecords.Any())
                    {
                        int addedCount = 0;

                        foreach (var record in firebaseRecords)
                        {
                            try
                            {
                                // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
                                record.SyncStatus = SyncStatus.Synced;
                                _emotionHistoryCache.AddRecord(record);
                                addedCount++;
                            }
                            catch (Exception recordEx)
                            {
                                MyLogger.LogError($"‚ùå [ForceSyncWithFirebase] –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –≤ –∫—ç—à: {recordEx.Message}",
                                    MyLogger.LogCategory.ClearHistory);
                                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ –∑–∞–ø–∏—Å—è–º–∏
                            }
                        }

                        MyLogger.Log($"‚ûï [ForceSyncWithFirebase] –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {addedCount} –∏–∑ {firebaseRecords.Count} –∑–∞–ø–∏—Å–µ–π –∏–∑ Firebase –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à",
                            MyLogger.LogCategory.ClearHistory);
                    }
                    else
                    {
                        MyLogger.Log("üì≠ [ForceSyncWithFirebase] Firebase –ø—É—Å—Ç - –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à –æ—Å—Ç–∞–µ—Ç—Å—è –ø—É—Å—Ç—ã–º", MyLogger.LogCategory.ClearHistory);
                    }

                    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∫—ç—à–∞
                    _emotionHistory.SetCache(_emotionHistoryCache);

                    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
                    await Task.Delay(500);

                    MyLogger.Log("‚úÖ [ForceSyncWithFirebase] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ", MyLogger.LogCategory.ClearHistory);
                    return true;
                }

                MyLogger.LogError("‚ùå [ForceSyncWithFirebase] EmotionHistoryCache –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", MyLogger.LogCategory.ClearHistory);
                return false;
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå [ForceSyncWithFirebase] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Firebase: {ex.Message}",
                    MyLogger.LogCategory.ClearHistory);

                return false;
            }
        }

        /// <summary>
        /// –û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        /// </summary>
        public async void UpdateSyncSettings(EmotionSyncSettings settings)
        {
            if (!_isFirebaseInitialized || _syncService == null)
            {
                MyLogger.LogWarning("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: Firebase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", MyLogger.LogCategory.Firebase);
                return;
            }

            await _syncService.UpdateSyncSettings(settings);
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        /// </summary>
        public EmotionSyncSettings GetSyncSettings()
        {
            if (_emotionHistoryCache != null)
            {
                return _emotionHistoryCache.GetSyncSettings();
            }

            return null;
        }

        /// <summary>
        /// –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö
        /// </summary>
        public async void CreateBackup()
        {
            if (!_isFirebaseInitialized || _syncService == null)
            {
                MyLogger.LogWarning("–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: Firebase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", MyLogger.LogCategory.Firebase);
                return;
            }

            await _syncService.CreateBackup();
        }

        /// <summary>
        /// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        /// </summary>
        public async void RestoreFromBackup(string backupId)
        {
            if (!_isFirebaseInitialized || _syncService == null)
            {
                MyLogger.LogWarning("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: Firebase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", MyLogger.LogCategory.Firebase);
                return;
            }

            await _syncService.RestoreFromBackup(backupId);

            // –ü–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            await RefreshEmotionsFromFirebase();
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        /// </summary>
        public async void CheckAndCreateBackup()
        {
            if (!_isFirebaseInitialized || _syncService == null)
            {
                return;
            }

            await _syncService.CheckAndCreateBackup();
        }

        /// <summary>
        /// –û–±–Ω–æ–≤–ª—è–µ—Ç —ç–º–æ—Ü–∏–∏ –∏–∑ Firebase
        /// </summary>
        private async System.Threading.Tasks.Task RefreshEmotionsFromFirebase()
        {
            if (!_isFirebaseInitialized || _databaseService == null)
            {
                MyLogger.LogWarning("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–º–æ—Ü–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: Firebase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", MyLogger.LogCategory.Firebase);
                return;
            }

            try
            {
                // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± —ç–º–æ—Ü–∏—è—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
                var emotions = await _databaseService.GetUserEmotions();

                if (emotions != null && emotions.Count > 0)
                {
                    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —ç–º–æ—Ü–∏–∏
                    foreach (var emotion in emotions)
                    {
                        if (Enum.TryParse<EmotionTypes>(emotion.Value.Type, out var emotionType))
                        {
                            if (_emotions.ContainsKey(emotionType))
                            {
                                _emotions[emotionType] = emotion.Value;
                            }
                            else
                            {
                                _emotions.Add(emotionType, emotion.Value);
                            }
                        }
                    }

                    MyLogger.Log($"–û–±–Ω–æ–≤–ª–µ–Ω–æ {emotions.Count} —ç–º–æ—Ü–∏–π –∏–∑ Firebase", MyLogger.LogCategory.Firebase);
                }
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —ç–º–æ—Ü–∏–π –∏–∑ Firebase: {ex.Message}", MyLogger.LogCategory.Firebase);
            }
        }

        #region Event Handlers

        /// <summary>
        /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        /// </summary>
        private void HandleSyncComplete(bool success, string message)
        {
            MyLogger.Log($"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —ç–º–æ—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—Ö: {success}. {message}", MyLogger.LogCategory.Firebase);
            OnSyncComplete?.Invoke(success, message);
        }

        /// <summary>
        /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        /// </summary>
        private void HandleSyncProgress(float progress)
        {
            OnSyncProgress?.Invoke(progress);
        }

        /// <summary>
        /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–ø–∏—Å–∏
        /// </summary>
        private void HandleRecordSynced(EmotionHistoryRecord record)
        {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏
            _emotionHistory.UpdateSyncStatus(record.Id, true);
        }

        /// <summary>
        /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        /// </summary>
        private void HandleSyncConflict(EmotionHistoryRecord record)
        {
            MyLogger.LogWarning($"–ö–æ–Ω—Ñ–ª–∏–∫—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏ {record.Id} —Ç–∏–ø–∞ {record.Type}", MyLogger.LogCategory.Firebase);
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–∫–∞–∑–∞—Ç—å UI –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        }

        #endregion

        #endregion

        #region Emotion Management

        public List<EmotionTypes> AvailableEmotions => _emotions.Keys.ToList();

        public EmotionData GetEmotion(EmotionTypes type)
        {
            if (_emotions.TryGetValue(type, out var emotion))
            {
                return emotion;
            }

            MyLogger.LogWarning($"‚ö†Ô∏è –≠–º–æ—Ü–∏—è {type} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", MyLogger.LogCategory.Emotion);
            return null;
        }

        public bool HasEnough(EmotionTypes type, float amount)
        {
            var emotion = GetEmotion(type);
            return emotion != null && emotion.Value >= amount;
        }

        public void SpendEmotion(EmotionTypes type, float amount)
        {
            if (!HasEnough(type, amount))
                throw new ArgumentException($"Not enough {type} emotion");

            var emotion = GetEmotion(type);
            UpdateEmotionValue(type, emotion.Value - amount);
        }

        public void AddEmotion(EmotionTypes type, float amount)
        {
            var emotion = GetEmotion(type);

            if (emotion != null)
            {
                UpdateEmotionValue(type, emotion.Value + amount);
            }
        }

        public void ReadFrom(PlayerData data)
        {
            if (data?.EmotionData == null)
            {
                MyLogger.LogWarning("‚ö†Ô∏è EmotionData –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∏ ReadFrom. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.", MyLogger.LogCategory.Emotion);
                return;
            }

            foreach (var emotion in data.EmotionData)
            {
                if (_emotions.ContainsKey(emotion.Key))
                {
                    _emotions[emotion.Key] = emotion.Value;
                }
                else
                {
                    _emotions.Add(emotion.Key, emotion.Value);
                }
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —ç–º–æ—Ü–∏–∏ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            foreach (EmotionTypes type in Enum.GetValues(typeof(EmotionTypes)))
            {
                if (!_emotions.ContainsKey(type))
                {
                    MyLogger.LogWarning($"‚ö†Ô∏è Emotion {type} –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω. –°–æ–∑–¥–∞—ë–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.", MyLogger.LogCategory.Emotion);

                    _emotions[type] = new EmotionData
                    {
                        Type = type.ToString(),
                        Value = 0f,
                        LastUpdate = DateTime.UtcNow
                    };
                }
            }
        }

        public void WriteTo(PlayerData data)
        {
            foreach (var emotion in _emotions)
            {
                if (data.EmotionData.ContainsKey(emotion.Key))
                {
                    data.EmotionData[emotion.Key] = emotion.Value;
                }
                else
                {
                    data.EmotionData.Add(emotion.Key, emotion.Value);
                }
            }
        }

        private void InitializeEmotions()
        {
            try
            {
                var emotionsList = _playerDataProvider.GetEmotions();

                if (emotionsList == null || emotionsList.Count == 0)
                {
                    MyLogger.LogWarning("‚ö†Ô∏è PlayerDataProvider –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —ç–º–æ—Ü–∏–π. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —ç–º–æ—Ü–∏–∏.", MyLogger.LogCategory.Emotion);
                    InitializeDefaultEmotions();
                    return;
                }

                foreach (var emotionData in emotionsList)
                {
                    if (emotionData == null)
                    {
                        MyLogger.LogWarning("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–∞ NULL —ç–º–æ—Ü–∏—è –≤ —Å–ø–∏—Å–∫–µ. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.", MyLogger.LogCategory.Emotion);
                        continue;
                    }

                    if (string.IsNullOrEmpty(emotionData.Type))
                    {
                        MyLogger.LogWarning("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–∞ —ç–º–æ—Ü–∏—è —Å –ø—É—Å—Ç—ã–º Type. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.", MyLogger.LogCategory.Emotion);
                        continue;
                    }

                    if (Enum.TryParse(emotionData.Type, out EmotionTypes type))
                    {
                        _emotions[type] = emotionData;
                    }
                    else
                    {
                        MyLogger.LogWarning($"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ç–∏–ø —ç–º–æ—Ü–∏–∏: {emotionData.Type}", MyLogger.LogCategory.Emotion);
                    }
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ç–∏–ø—ã —ç–º–æ—Ü–∏–π –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
                foreach (EmotionTypes type in Enum.GetValues(typeof(EmotionTypes)))
                {
                    if (!_emotions.ContainsKey(type))
                    {
                        MyLogger.LogWarning($"‚ö†Ô∏è –≠–º–æ—Ü–∏—è {type} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –°–æ–∑–¥–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.", MyLogger.LogCategory.Emotion);
                        _emotions[type] = CreateDefaultEmotion(type);
                    }
                }
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —ç–º–æ—Ü–∏–π: {ex.Message}. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —ç–º–æ—Ü–∏–∏.", MyLogger.LogCategory.Emotion);
                InitializeDefaultEmotions();
            }
        }

        /// <summary>
        /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —ç–º–æ—Ü–∏–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        /// </summary>
        private void InitializeDefaultEmotions()
        {
            _emotions.Clear();

            foreach (EmotionTypes type in Enum.GetValues(typeof(EmotionTypes)))
            {
                _emotions[type] = CreateDefaultEmotion(type);
            }
        }

        /// <summary>
        /// –°–æ–∑–¥–∞–µ—Ç —ç–º–æ—Ü–∏—é —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        /// </summary>
        private EmotionData CreateDefaultEmotion(EmotionTypes type)
        {
            var config = _emotionConfigs.ContainsKey(type) ? _emotionConfigs[type] : null;

            return new EmotionData
            {
                Type = type.ToString(),
                Value = 0f,
                Intensity = 0f,
                Color = config?.BaseColor ?? GetDefaultColor(type),
                MaxCapacity = config?.MaxCapacity ?? 100f,
                DrainRate = config?.DefaultDrainRate ?? 0.1f,
                BubbleThreshold = config?.BubbleThreshold ?? 80f,
                LastUpdate = DateTime.UtcNow
            };
        }

        /// <summary>
        /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è —ç–º–æ—Ü–∏–∏
        /// </summary>
        private Color GetDefaultColor(EmotionTypes type)
        {
            return type switch
            {
                EmotionTypes.Joy => new Color(1f, 0.85f, 0.1f), // –ñ–µ–ª—Ç—ã–π
                EmotionTypes.Sadness => new Color(0.15f, 0.3f, 0.8f), // –°–∏–Ω–∏–π
                EmotionTypes.Anger => new Color(0.9f, 0.1f, 0.1f), // –ö—Ä–∞—Å–Ω—ã–π
                EmotionTypes.Fear => new Color(0.5f, 0.1f, 0.6f), // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
                EmotionTypes.Disgust => new Color(0.1f, 0.6f, 0.2f), // –ó–µ–ª–µ–Ω—ã–π
                EmotionTypes.Trust => new Color(0f, 0.6f, 0.9f), // –ì–æ–ª—É–±–æ–π
                EmotionTypes.Anticipation => new Color(1f, 0.5f, 0f), // –û—Ä–∞–Ω–∂–µ–≤—ã–π
                EmotionTypes.Surprise => new Color(0.8f, 0.4f, 0.9f), // –õ–∞–≤–∞–Ω–¥–æ–≤—ã–π
                EmotionTypes.Love => new Color(0.95f, 0.3f, 0.6f), // –†–æ–∑–æ–≤—ã–π
                EmotionTypes.Anxiety => new Color(0.7f, 0.7f, 0.7f), // –°–µ—Ä—ã–π
                EmotionTypes.Neutral => Color.white,
                _ => Color.white
            };
        }

        private void LoadEmotionConfigs(IConfigsProvider configsProvider)
        {
            if (configsProvider == null) return;

            foreach (EmotionTypes type in Enum.GetValues(typeof(EmotionTypes)))
            {
                var config = configsProvider.LoadEmotionConfig(type);

                if (config != null)
                {
                    _emotionConfigs[type] = config;
                }
            }
        }

        private void LoadEmotionConfigsFromService()
        {
            if (_emotionConfigService == null) return;

            foreach (EmotionTypes type in Enum.GetValues(typeof(EmotionTypes)))
            {
                var config = _emotionConfigService.GetConfig(type);

                if (config != null)
                {
                    _emotionConfigs[type] = config;
                }
            }
        }

        public void UpdateEmotionValue(EmotionTypes type, float value)
        {
            var emotion = GetEmotion(type);
            if (emotion == null) return;

            float oldValue = emotion.Value;
            ValidateAndUpdateEmotion(emotion, value);

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
            EmotionEventType eventType = oldValue < emotion.BubbleThreshold && value >= emotion.BubbleThreshold
                ? EmotionEventType.CapacityExceeded
                : EmotionEventType.ValueChanged;

            MyLogger.Log(
                $"[EmotionService] Before AddEntry in UpdateEmotionValue: EmotionType='{emotion.Type}', LastUpdate='{emotion.LastUpdate}', CurrentTime='{DateTime.Now}'",
                MyLogger.LogCategory.Emotion);

            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            _emotionHistory.AddEntry(emotion, eventType, emotion.LastUpdate);

            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å Firebase
            if (_isFirebaseInitialized && _databaseService != null)
            {
                SyncEmotionWithFirebase(emotion, eventType);
            }

            // –í—ã–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
            RaiseEmotionEvent(new EmotionEvent(type, eventType, emotion.Value, emotion.Intensity));

            // –ù–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω —Å–µ—Ä–≤–∏—Å –æ—á–∫–æ–≤ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ
            if (_pointsService != null && value > 0)
            {
                _pointsService.AddPointsForEmotion();
            }

            // –ù–∞—á–∏—Å–ª—è–µ–º –æ–ø—ã—Ç, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ
            if (_levelSystem != null && value > 0)
            {
                // –ë–∞–∑–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞ –∑–∞ –æ—Ç–º–µ—Ç–∫—É —ç–º–æ—Ü–∏–∏
                int baseXp = 5;
                _levelSystem.AddXP(baseXp, XPSource.EmotionMarked);
            }
        }

        private void ValidateAndUpdateEmotion(EmotionData emotion, float newValue)
        {
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —É—á–∏—Ç—ã–≤–∞—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
            emotion.Value = Mathf.Clamp(newValue, 0f, emotion.MaxCapacity);
            emotion.LastUpdate = DateTime.UtcNow;
        }

        public void UpdateEmotionIntensity(EmotionTypes type, float intensity)
        {
            var emotion = GetEmotion(type);
            if (emotion == null) return;

            emotion.Intensity = Mathf.Clamp01(intensity);
            emotion.LastUpdate = DateTime.Now;

            MyLogger.Log(
                $"[EmotionService] Before AddEntry in UpdateEmotionIntensity: EmotionType='{emotion.Type}', LastUpdate='{emotion.LastUpdate}', CurrentTime='{DateTime.Now}'",
                MyLogger.LogCategory.Emotion);

            _emotionHistory.AddEntry(emotion, EmotionEventType.IntensityChanged, emotion.LastUpdate);

            RaiseEmotionEvent(new EmotionEvent(type, EmotionEventType.IntensityChanged, emotion.Value, emotion.Intensity));
        }

        public bool TryMixEmotions(EmotionTypes source1, EmotionTypes source2)
        {
            if (_emotionMixingRules.TryGetMixResult(source1, source2, out var mixResult))
            {
                var emotion1 = GetEmotion(source1);
                var emotion2 = GetEmotion(source2);

                if (emotion1 != null && emotion2 != null)
                {
                    var newValue = (emotion1.Value + emotion2.Value) * mixResult.ResultIntensity;
                    var resultEmotion = GetEmotion(mixResult.ResultType);

                    if (resultEmotion != null)
                    {
                        resultEmotion.Color = mixResult.ResultColor;
                        resultEmotion.Note = $"{source1} + {source2}";
                        resultEmotion.LastUpdate = DateTime.UtcNow;
                        ValidateAndUpdateEmotion(resultEmotion, newValue);

                        MyLogger.Log(
                            $"[EmotionService] Before AddEntry in TryMixEmotions: EmotionType='{resultEmotion.Type}', LastUpdate='{resultEmotion.LastUpdate}', CurrentTime='{DateTime.Now}'",
                            MyLogger.LogCategory.Emotion);

                        _emotionHistory.AddEntry(resultEmotion, EmotionEventType.EmotionMixed, resultEmotion.LastUpdate);

                        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å Firebase
                        if (_isFirebaseInitialized && _databaseService != null)
                        {
                            SyncEmotionWithFirebase(resultEmotion, EmotionEventType.EmotionMixed);
                        }

                        RaiseEmotionEvent(new EmotionEvent(mixResult.ResultType,
                            EmotionEventType.EmotionMixed, newValue, mixResult.ResultIntensity));

                        return true;
                    }
                }
            }

            return false;
        }

        public void ProcessTimeBasedEffects()
        {
            foreach (var emotionPair in _emotions)
            {
                var emotion = emotionPair.Value;
                var timeSinceLastUpdate = (DateTime.Now - emotion.LastUpdate).TotalSeconds;

                if (emotion.Value > 0)
                {
                    var drain = emotion.DrainRate * (float)timeSinceLastUpdate;
                    emotion.Value = Mathf.Max(0f, emotion.Value - drain);

                    if (emotion.Value <= 0)
                    {
                        RaiseEmotionEvent(new EmotionEvent(emotionPair.Key,
                            EmotionEventType.EmotionDepleted));
                    }
                }

                if (emotion.Value >= emotion.BubbleThreshold)
                {
                    RaiseEmotionEvent(new EmotionEvent(emotionPair.Key,
                        EmotionEventType.BubbleCreated, emotion.Value, emotion.Intensity));
                }

                emotion.LastUpdate = DateTime.Now;
            }
        }

        public IEnumerable<EmotionHistoryEntry> GetEmotionHistory(DateTime? from = null, DateTime? to = null)
        {
            MyLogger.Log(
                $"üîç [EmotionService.GetEmotionHistory] –ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ —ç–º–æ—Ü–∏–π. _emotionHistory!=null={_emotionHistory != null}, _emotionHistoryCache!=null={_emotionHistoryCache != null}",
                MyLogger.LogCategory.Firebase);

            var history = _emotionHistory.GetHistory(from, to);
            var historyList = history?.ToList();

            MyLogger.Log($"üìä [EmotionService.GetEmotionHistory] –ü–æ–ª—É—á–µ–Ω–æ {historyList?.Count ?? 0} –∑–∞–ø–∏—Å–µ–π –∏–∑ _emotionHistory", MyLogger.LogCategory.Firebase);

            if (_emotionHistoryCache != null)
            {
                var cacheRecords = _emotionHistoryCache.GetAllRecords();
                MyLogger.Log($"üìä [EmotionService.GetEmotionHistory] –í –∫—ç—à–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è {cacheRecords?.Count ?? 0} –∑–∞–ø–∏—Å–µ–π", MyLogger.LogCategory.Firebase);
            }

            // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–≤—ã—Ö –∑–∞–ø–∏—Å—è—Ö
            if (historyList != null && historyList.Count > 0)
            {
                MyLogger.Log($"üîç [EmotionService.GetEmotionHistory] –ü–µ—Ä–≤—ã–µ –∑–∞–ø–∏—Å–∏:", MyLogger.LogCategory.Firebase);

                for (int i = 0; i < Math.Min(3, historyList.Count); i++)
                {
                    var entry = historyList[i];

                    MyLogger.Log(
                        $"  [{i}] Type={entry.EmotionData?.Type}, Value={entry.EmotionData?.Value}, Timestamp={entry.Timestamp:yyyy-MM-dd HH:mm:ss}, SyncId={entry.SyncId}",
                        MyLogger.LogCategory.Firebase);
                }
            }
            else
            {
                MyLogger.Log($"üì≠ [EmotionService.GetEmotionHistory] –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫", MyLogger.LogCategory.Firebase);
            }

            return historyList ?? new List<EmotionHistoryEntry>();
        }

        public IEnumerable<EmotionHistoryEntry> GetEmotionHistoryByType(EmotionTypes type, DateTime? from = null, DateTime? to = null)
        {
            return _emotionHistory.GetHistoryByType(type, from, to);
        }

        public Dictionary<EmotionTypes, float> GetAverageIntensityByPeriod(DateTime from, DateTime to)
        {
            return _emotionHistory.GetAverageIntensityByPeriod(from, to);
        }

        protected virtual void RaiseEmotionEvent(EmotionEvent e)
        {
            OnEmotionEvent?.Invoke(this, e);
        }

        #region Statistics

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —ç–º–æ—Ü–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
        /// </summary>
        /// <param name="from">–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</param>
        /// <param name="to">–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</param>
        /// <returns>–°–ª–æ–≤–∞—Ä—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫</returns>
        public Dictionary<TimeOfDay, EmotionTimeStats> GetEmotionsByTimeOfDay(DateTime? from = null, DateTime? to = null)
        {
            return _emotionHistory.GetEmotionsByTimeOfDay(from, to);
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø–∏—Å–∏ —ç–º–æ—Ü–∏–π
        /// </summary>
        /// <param name="from">–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞</param>
        /// <param name="to">–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞</param>
        /// <param name="groupByDay">–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ –¥–Ω—è–º (true) –∏–ª–∏ –ø–æ —á–∞—Å–∞–º (false)</param>
        /// <returns>–°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø–∏—Å–µ–π</returns>
        public List<EmotionFrequencyStats> GetLoggingFrequency(DateTime from, DateTime to, bool groupByDay = true)
        {
            return _emotionHistory.GetLoggingFrequency(from, to, groupByDay).ToList();
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π —ç–º–æ—Ü–∏–π
        /// </summary>
        /// <param name="from">–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</param>
        /// <param name="to">–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</param>
        /// <param name="topCount">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π</param>
        /// <returns>–°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π</returns>
        public List<EmotionCombinationStats> GetPopularEmotionCombinations(DateTime? from = null, DateTime? to = null, int topCount = 5)
        {
            return _emotionHistory.GetPopularEmotionCombinations(from, to, topCount);
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–µ–Ω–¥–æ–≤ —ç–º–æ—Ü–∏–π
        /// </summary>
        /// <param name="from">–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞</param>
        /// <param name="to">–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞</param>
        /// <param name="groupByDay">–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ –¥–Ω—è–º (true) –∏–ª–∏ –ø–æ —á–∞—Å–∞–º (false)</param>
        /// <returns>–°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—Ä–µ–Ω–¥–æ–≤</returns>
        public List<EmotionTrendStats> GetEmotionTrends(DateTime from, DateTime to, bool groupByDay = true)
        {
            return _emotionHistory.GetEmotionTrends(from, to, groupByDay);
        }

        #endregion

        #endregion

        #region IInitializable Implementation

        /// <summary>
        /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å —ç–º–æ—Ü–∏–π
        /// </summary>
        public void Initialize()
        {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —ç–º–æ—Ü–∏–∏ –∏–∑ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
            InitializeEmotions();

            MyLogger.Log("EmotionService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", MyLogger.LogCategory.Bootstrap);
        }

        #endregion

        #region IEmotionService Implementation

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —ç–º–æ—Ü–∏–∏
        /// </summary>
        public float GetEmotionValue(EmotionTypes type)
        {
            var emotion = GetEmotion(type);
            return emotion?.Value ?? 0f;
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —ç–º–æ—Ü–∏–∏
        /// </summary>
        public float GetEmotionIntensity(EmotionTypes type)
        {
            var emotion = GetEmotion(type);
            return emotion?.Intensity ?? 0f;
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç —ç–º–æ—Ü–∏–∏
        /// </summary>
        public Color GetEmotionColor(EmotionTypes type)
        {
            var emotion = GetEmotion(type);
            return emotion?.Color ?? Color.white;
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —ç–º–æ—Ü–∏–∏
        /// </summary>
        public EmotionData GetEmotionData(EmotionTypes type)
        {
            return GetEmotion(type);
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —ç–º–æ—Ü–∏–∏
        /// </summary>
        public Dictionary<EmotionTypes, EmotionData> GetAllEmotions()
        {
            return new Dictionary<EmotionTypes, EmotionData>(_emotions);
        }

        /// <summary>
        /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —ç–º–æ—Ü–∏–∏
        /// </summary>
        public void SetEmotionValue(EmotionTypes type, float value, bool needSave = true)
        {
            var emotion = GetEmotion(type);

            if (emotion != null)
            {
                UpdateEmotionValue(type, value);

                if (needSave && _playerDataProvider != null)
                {
                    _playerDataProvider.Save();
                }
            }
        }

        /// <summary>
        /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —ç–º–æ—Ü–∏–∏
        /// </summary>
        public void SetEmotionIntensity(EmotionTypes type, float intensity, bool needSave = true)
        {
            var emotion = GetEmotion(type);

            if (emotion != null)
            {
                UpdateEmotionIntensity(type, intensity);

                if (needSave && _playerDataProvider != null)
                {
                    _playerDataProvider.Save();
                }
            }
        }

        /// <summary>
        /// –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —ç–º–æ—Ü–∏–∏ –∫ –Ω–∞—á–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
        /// </summary>
        public void ResetAllEmotions(bool needSave = true)
        {
            foreach (var type in Enum.GetValues(typeof(EmotionTypes)).Cast<EmotionTypes>())
            {
                var emotion = GetEmotion(type);

                if (emotion != null)
                {
                    emotion.Value = 0f;
                    emotion.Intensity = 0f;
                    emotion.LastUpdate = DateTime.UtcNow;
                }
            }

            if (needSave && _playerDataProvider != null)
            {
                _playerDataProvider.Save();
            }

            MyLogger.Log("–í—Å–µ —ç–º–æ—Ü–∏–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –Ω–∞—á–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º", MyLogger.LogCategory.Emotion);
        }

        #endregion

        #region Private Methods

        /// <summary>
        /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —ç–º–æ—Ü–∏—é —Å Firebase
        /// </summary>
        private async void SyncEmotionWithFirebase(EmotionData emotion, EmotionEventType eventType)
        {
            MyLogger.Log($"üì±‚û°Ô∏è‚òÅÔ∏è [SYNC-EMOTION] –ù–∞—á–∞–ª–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: Type={emotion.Type}, EventType={eventType}", MyLogger.LogCategory.Firebase);

            if (!_isFirebaseInitialized)
            {
                MyLogger.LogWarning($"‚ùå [SYNC-EMOTION] Firebase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è {emotion.Type}", MyLogger.LogCategory.Firebase);
                return;
            }

            if (_databaseService == null)
            {
                MyLogger.LogWarning($"‚ùå [SYNC-EMOTION] DatabaseService –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è {emotion.Type}", MyLogger.LogCategory.Firebase);
                return;
            }

            if (!_databaseService.IsAuthenticated)
            {
                MyLogger.LogWarning($"‚ùå [SYNC-EMOTION] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –¥–ª—è {emotion.Type}. UserID: {(_databaseService?.UserId ?? "NULL")}",
                    MyLogger.LogCategory.Firebase);

                return;
            }

            try
            {
                MyLogger.Log($"üìù [SYNC-EMOTION] –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è Firebase: Type={emotion.Type}, Value={emotion.Value}, Timestamp={emotion.LastUpdate:O}",
                    MyLogger.LogCategory.Firebase);

                // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —ç–º–æ—Ü–∏–π –≤ Firebase
                var record = new EmotionHistoryRecord(emotion, eventType);

                MyLogger.Log($"üíæ [SYNC-EMOTION] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ Firebase: Id={record.Id}, Type={record.Type}, UserId={_databaseService.UserId}",
                    MyLogger.LogCategory.Firebase);

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                await _databaseService.AddEmotionHistoryRecord(record);

                MyLogger.Log($"‚úÖ [SYNC-EMOTION] –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Firebase: Id={record.Id}", MyLogger.LogCategory.Firebase);

                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —ç–º–æ—Ü–∏—é –≤ Firebase
                if (eventType == EmotionEventType.ValueChanged || eventType == EmotionEventType.IntensityChanged)
                {
                    MyLogger.Log($"üîÑ [SYNC-EMOTION] –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —ç–º–æ—Ü–∏—é –≤ Firebase: Type={emotion.Type}, Intensity={emotion.Intensity}",
                        MyLogger.LogCategory.Firebase);

                    await _databaseService.UpdateCurrentEmotion(emotion.Type, emotion.Intensity);
                    MyLogger.Log($"‚úÖ [SYNC-EMOTION] –¢–µ–∫—É—â–∞—è —ç–º–æ—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ Firebase: Type={emotion.Type}", MyLogger.LogCategory.Firebase);
                }

                MyLogger.Log($"üéâ [SYNC-EMOTION] –≠–º–æ—Ü–∏—è {emotion.Type} –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å Firebase", MyLogger.LogCategory.Firebase);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå [SYNC-EMOTION] –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —ç–º–æ—Ü–∏–∏ {emotion.Type} —Å Firebase: {ex.Message}", MyLogger.LogCategory.Firebase);
                MyLogger.LogError($"‚ùå [SYNC-EMOTION] Stack trace: {ex.StackTrace}", MyLogger.LogCategory.Firebase);
            }
        }

        /// <summary>
        /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —ç–º–æ—Ü–∏—é —Å Firebase –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π ID
        /// </summary>
        private async void SyncEmotionWithFirebaseById(EmotionData emotion, EmotionEventType eventType, string recordId)
        {
            MyLogger.Log($"üì±‚û°Ô∏è‚òÅÔ∏è [SYNC-EMOTION-BY-ID] –ù–∞—á–∞–ª–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å ID: Type={emotion.Type}, EventType={eventType}, RecordId={recordId}",
                MyLogger.LogCategory.Firebase);

            if (!_isFirebaseInitialized)
            {
                MyLogger.LogWarning($"‚ùå [SYNC-EMOTION-BY-ID] Firebase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è {emotion.Type}", MyLogger.LogCategory.Firebase);
                return;
            }

            if (_databaseService == null)
            {
                MyLogger.LogWarning($"‚ùå [SYNC-EMOTION-BY-ID] DatabaseService –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è {emotion.Type}", MyLogger.LogCategory.Firebase);
                return;
            }

            if (!_databaseService.IsAuthenticated)
            {
                MyLogger.LogWarning(
                    $"‚ùå [SYNC-EMOTION-BY-ID] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –¥–ª—è {emotion.Type}. UserID: {(_databaseService?.UserId ?? "NULL")}",
                    MyLogger.LogCategory.Firebase);

                return;
            }

            try
            {
                MyLogger.Log(
                    $"üìù [SYNC-EMOTION-BY-ID] –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è Firebase: Type={emotion.Type}, Value={emotion.Value}, Timestamp={emotion.LastUpdate:O}, RecordId={recordId}",
                    MyLogger.LogCategory.Firebase);

                // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —ç–º–æ—Ü–∏–π –≤ Firebase —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º ID
                var record = new EmotionHistoryRecord(emotion, eventType)
                {
                    Id = recordId // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π ID –≤–º–µ—Å—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ
                };

                MyLogger.Log($"üíæ [SYNC-EMOTION-BY-ID] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ Firebase: Id={record.Id}, Type={record.Type}, UserId={_databaseService.UserId}",
                    MyLogger.LogCategory.Firebase);

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                await _databaseService.AddEmotionHistoryRecord(record);

                MyLogger.Log($"‚úÖ [SYNC-EMOTION-BY-ID] –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Firebase: Id={record.Id}", MyLogger.LogCategory.Firebase);

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏
                _emotionHistory.UpdateSyncStatus(recordId, true);

                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —ç–º–æ—Ü–∏—é –≤ Firebase
                if (eventType == EmotionEventType.ValueChanged || eventType == EmotionEventType.IntensityChanged)
                {
                    MyLogger.Log($"üîÑ [SYNC-EMOTION-BY-ID] –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —ç–º–æ—Ü–∏—é –≤ Firebase: Type={emotion.Type}, Intensity={emotion.Intensity}",
                        MyLogger.LogCategory.Firebase);

                    await _databaseService.UpdateCurrentEmotion(emotion.Type, emotion.Intensity);
                    MyLogger.Log($"‚úÖ [SYNC-EMOTION-BY-ID] –¢–µ–∫—É—â–∞—è —ç–º–æ—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ Firebase: Type={emotion.Type}", MyLogger.LogCategory.Firebase);
                }

                MyLogger.Log($"üéâ [SYNC-EMOTION-BY-ID] –≠–º–æ—Ü–∏—è {emotion.Type} –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å Firebase —Å ID {recordId}",
                    MyLogger.LogCategory.Firebase);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå [SYNC-EMOTION-BY-ID] –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —ç–º–æ—Ü–∏–∏ {emotion.Type} —Å Firebase: {ex.Message}", MyLogger.LogCategory.Firebase);
                MyLogger.LogError($"‚ùå [SYNC-EMOTION-BY-ID] Stack trace: {ex.StackTrace}", MyLogger.LogCategory.Firebase);
            }
        }

        #endregion

        // –ú–ï–¢–û–î –î–õ–Ø –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø –°–û–ë–´–¢–ò–ô (–ü–ï–†–ï–ó–ê–ü–ò–°–¨ –î–õ–Ø –ì–ê–†–ê–ù–¢–ò–ò –ü–û–†–Ø–î–ö–ê –ê–†–ì–£–ú–ï–ù–¢–û–í)
        public async void LogEmotionEvent(EmotionTypes type, EmotionEventType eventType, string note = null)
        {
            var emotion = GetEmotion(type);

            if (emotion == null)
            {
                MyLogger.LogWarning($"[EmotionService.LogEmotionEvent] Emotion type '{type}' not found.", MyLogger.LogCategory.Emotion);
                return;
            }

            if (_emotionHistory == null)
            {
                MyLogger.LogError("[EmotionService.LogEmotionEvent] _emotionHistory is null. Cannot log event.", MyLogger.LogCategory.Emotion);
                return;
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —Ç–æ—á–Ω–æ —Å –Ω–∞—Å—Ç–æ—è—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
            DateTime now = DateTime.UtcNow;
            emotion.LastUpdate = now;

            // –ü–æ–ª—É—á–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
            await TrySetLocationData(emotion);

            MyLogger.Log(
                $"[EmotionService.LogEmotionEvent] –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å: Type='{type}', EventType='{eventType}', Timestamp='{now:O}', RegionId='{emotion.RegionId}'",
                MyLogger.LogCategory.Emotion);

            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º –æ–¥–Ω—É –∑–∞–ø–∏—Å—å —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –∏ Firebase
            string uniqueId = Guid.NewGuid().ToString();

            // –°–æ–∑–¥–∞–µ–º EmotionHistoryEntry —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º SyncId
            var entry = new EmotionHistoryEntry
            {
                EmotionData = emotion.Clone(),
                Timestamp = now,
                EventType = eventType,
                Note = note,
                SyncId = uniqueId, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω ID –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –∑–∞–ø–∏—Å–∏ –∏ Firebase
                IsSynced = false
            };

            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é (–±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ SyncId)
            _emotionHistory.AddEntryDirect(entry);

            MyLogger.Log(
                $"[EmotionService.LogEmotionEvent] Logged event: Type='{type}', EventType='{eventType}', Timestamp='{now:O}', SyncId='{uniqueId}'{(string.IsNullOrEmpty(note) ? "" : $", Note='{note}'")}",
                MyLogger.LogCategory.Emotion);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
            await TryUpdateRegionalStats(emotion);

            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å Firebase, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ (–∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ—Ç –∂–µ ID)
            if (_isFirebaseInitialized && _databaseService != null && _databaseService.IsAuthenticated)
            {
                MyLogger.Log($"[EmotionService.LogEmotionEvent] –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å Firebase –∑–∞–ø–∏—Å—å: Type='{type}', SyncId='{uniqueId}'",
                    MyLogger.LogCategory.Firebase);

                SyncEmotionWithFirebaseById(emotion, eventType, uniqueId);
            }
        }

        public void ClearHistory()
        {
            // –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
            _emotionHistory.Clear();

            // –û—á–∏—â–∞–µ–º –∫—ç—à –∏—Å—Ç–æ—Ä–∏–∏, —á—Ç–æ–±—ã –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–¥—Ç—è–≥–∏–≤–∞–ª–∏—Å—å
            if (_emotionHistoryCache != null)
            {
                _emotionHistoryCache.ClearCache();
                MyLogger.Log("‚úÖ –ö—ç—à –∏—Å—Ç–æ—Ä–∏–∏ —ç–º–æ—Ü–∏–π —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω", MyLogger.LogCategory.Firebase);
            }
        }

        /// <summary>
        /// –û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —ç–º–æ—Ü–∏–π –ª–æ–∫–∞–ª—å–Ω–æ –∏ –≤ –æ–±–ª–∞–∫–µ
        /// </summary>
        /// <returns>True, –µ—Å–ª–∏ –æ—á–∏—Å—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False</returns>
        public async Task<bool> ClearHistoryWithCloud()
        {
            try
            {
                MyLogger.Log("üóëÔ∏è [ClearHistoryWithCloud] –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –∏—Å—Ç–æ—Ä–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ –∏ –≤ –æ–±–ª–∞–∫–µ", MyLogger.LogCategory.ClearHistory);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ Firebase —Å–µ—Ä–≤–∏—Å–æ–≤
                MyLogger.Log(
                    $"üîç [ClearHistoryWithCloud] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è: _isFirebaseInitialized={_isFirebaseInitialized}, _databaseService!=null={_databaseService != null}, IsAuthenticated={_databaseService?.IsAuthenticated}, _syncService!=null={_syncService != null}",
                    MyLogger.LogCategory.ClearHistory);

                // –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
                _emotionHistory.Clear();
                MyLogger.Log("‚úÖ [ClearHistoryWithCloud] –õ–æ–∫–∞–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞", MyLogger.LogCategory.ClearHistory);

                // –û—á–∏—â–∞–µ–º –∫—ç—à –∏—Å—Ç–æ—Ä–∏–∏
                if (_emotionHistoryCache != null)
                {
                    _emotionHistoryCache.ClearCache();
                    MyLogger.Log("‚úÖ [ClearHistoryWithCloud] –ö—ç—à –∏—Å—Ç–æ—Ä–∏–∏ —ç–º–æ—Ü–∏–π —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω", MyLogger.LogCategory.ClearHistory);
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—á–∏—Å—Ç–∫–∏ –≤ –æ–±–ª–∞–∫–µ
                if (!_isFirebaseInitialized)
                {
                    MyLogger.LogWarning("‚ö†Ô∏è [ClearHistoryWithCloud] Firebase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω - –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å –æ–±–ª–∞—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
                        MyLogger.LogCategory.ClearHistory);

                    return false;
                }

                if (_databaseService == null)
                {
                    MyLogger.LogWarning("‚ö†Ô∏è [ClearHistoryWithCloud] DatabaseService –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω - –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å –æ–±–ª–∞—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
                        MyLogger.LogCategory.ClearHistory);

                    return false;
                }

                if (!_databaseService.IsAuthenticated)
                {
                    MyLogger.LogWarning("‚ö†Ô∏è [ClearHistoryWithCloud] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω - –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å –æ–±–ª–∞—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
                        MyLogger.LogCategory.ClearHistory);

                    return false;
                }

                if (_syncService == null)
                {
                    MyLogger.LogWarning("‚ö†Ô∏è [ClearHistoryWithCloud] SyncService –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω - –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å –æ–±–ª–∞—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
                        MyLogger.LogCategory.ClearHistory);

                    return false;
                }

                // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –æ–±–ª–∞–∫–µ
                MyLogger.Log("üîÑ [ClearHistoryWithCloud] –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –Ω–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö –≤ –æ–±–ª–∞–∫–µ...", MyLogger.LogCategory.ClearHistory);
                bool cloudClearResult = await _syncService.ClearCloudData();

                if (cloudClearResult)
                {
                    MyLogger.Log("‚úÖ [ClearHistoryWithCloud] –û–±–ª–∞—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã", MyLogger.LogCategory.ClearHistory);

                    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º—Å—è —Å Firebase, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –æ–±–ª–∞—á–Ω—ã–º
                    MyLogger.Log("üîÑ [ClearHistoryWithCloud] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Firebase –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏...", MyLogger.LogCategory.ClearHistory);
                    bool syncSuccess = await ForceSyncWithFirebase();

                    if (syncSuccess)
                    {
                        MyLogger.Log("‚úÖ [ClearHistoryWithCloud] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ", MyLogger.LogCategory.ClearHistory);
                    }
                    else
                    {
                        MyLogger.LogWarning("‚ö†Ô∏è [ClearHistoryWithCloud] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –Ω–æ –æ–±–ª–∞—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã",
                            MyLogger.LogCategory.ClearHistory);
                    }

                    return true;
                }
                else
                {
                    MyLogger.LogError("‚ùå [ClearHistoryWithCloud] –õ–æ–∫–∞–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –æ–±–ª–∞—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
                        MyLogger.LogCategory.ClearHistory);

                    return false;
                }
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå [ClearHistoryWithCloud] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏: {ex.Message}\nStackTrace: {ex.StackTrace}",
                    MyLogger.LogCategory.ClearHistory);

                return false;
            }
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ Firebase
        /// </summary>
        public bool IsFirebaseInitialized
        {
            get
            {
                MyLogger.Log($"üîç [EmotionService.IsFirebaseInitialized] –í–æ–∑–≤—Ä–∞—â–∞–µ–º: {_isFirebaseInitialized}", MyLogger.LogCategory.ClearHistory);
                return _isFirebaseInitialized;
            }
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ Firebase
        /// </summary>
        public bool IsAuthenticated
        {
            get
            {
                bool firebaseInit = _isFirebaseInitialized;
                bool dbServiceNotNull = _databaseService != null;
                bool dbAuthenticated = _databaseService?.IsAuthenticated ?? false;
                bool result = firebaseInit && dbServiceNotNull && dbAuthenticated;

                MyLogger.Log(
                    $"üîç [EmotionService.IsAuthenticated] _isFirebaseInitialized={firebaseInit}, _databaseService!=null={dbServiceNotNull}, _databaseService.IsAuthenticated={dbAuthenticated}, result={result}",
                    MyLogger.LogCategory.ClearHistory);

                return result;
            }
        }

        #region Location and Regional Stats Integration

        /// <summary>
        /// –ü—ã—Ç–∞–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —ç–º–æ—Ü–∏–∏
        /// </summary>
        private async Task TrySetLocationData(EmotionData emotion)
        {
            try
            {
                if (_locationService == null)
                {
                    MyLogger.Log("üó∫Ô∏è LocationService –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è", MyLogger.LogCategory.Location);
                    return;
                }

                var locationData = await _locationService.GetCurrentLocationAsync();

                if (locationData != null && locationData.IsValid)
                {
                    emotion.RegionId = locationData.RegionId;
                    MyLogger.Log($"üó∫Ô∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω RegionId '{locationData.RegionId}' –¥–ª—è —ç–º–æ—Ü–∏–∏ '{emotion.Type}'", MyLogger.LogCategory.Location);
                }
                else
                {
                    MyLogger.Log("üó∫Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è", MyLogger.LogCategory.Location);
                }
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è: {ex.Message}", MyLogger.LogCategory.Location);
            }
        }

        /// <summary>
        /// –ü—ã—Ç–∞–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        /// </summary>
        private async Task TryUpdateRegionalStats(EmotionData emotion)
        {
            try
            {
                if (_regionalStatsService == null)
                {
                    MyLogger.Log("üìä RegionalStatsService –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", MyLogger.LogCategory.Regional);
                    return;
                }

                if (string.IsNullOrEmpty(emotion.RegionId))
                {
                    MyLogger.Log("üìä RegionId –ø—É—Å—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", MyLogger.LogCategory.Regional);
                    return;
                }

                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–≥–∏–æ–Ω–∞
                var currentStats = await _regionalStatsService.GetRegionalStats(emotion.RegionId);

                if (currentStats == null)
                {
                    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞
                    currentStats = new RegionalEmotionStats();
                }

                // –ü–∞—Ä—Å–∏–º —Ç–∏–ø —ç–º–æ—Ü–∏–∏
                if (Enum.TryParse<EmotionTypes>(emotion.Type, out EmotionTypes emotionType))
                {
                    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —ç–º–æ—Ü–∏–∏
                    if (currentStats.EmotionCounts.ContainsKey(emotionType))
                    {
                        currentStats.EmotionCounts[emotionType]++;
                    }
                    else
                    {
                        currentStats.EmotionCounts[emotionType] = 1;
                    }

                    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    currentStats.TotalEmotions++;

                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â—É—é —ç–º–æ—Ü–∏—é
                    var dominantEmotion = currentStats.EmotionCounts
                        .OrderByDescending(kvp => kvp.Value)
                        .First();

                    currentStats.DominantEmotion = dominantEmotion.Key;
                    currentStats.DominantEmotionPercentage = (float)dominantEmotion.Value / currentStats.TotalEmotions * 100f;

                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Å–µ—Ä–≤–∏—Å–µ
                    bool success = await _regionalStatsService.UpdateRegionalStats(emotion.RegionId, currentStats);

                    if (success)
                    {
                        MyLogger.Log(
                            $"üìä –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ '{emotion.RegionId}': {emotionType} (+1), –≤—Å–µ–≥–æ: {currentStats.TotalEmotions}",
                            MyLogger.LogCategory.Regional);
                    }
                    else
                    {
                        MyLogger.LogWarning($"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ '{emotion.RegionId}'", MyLogger.LogCategory.Regional);
                    }
                }
                else
                {
                    MyLogger.LogWarning($"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–∏–ø —ç–º–æ—Ü–∏–∏: '{emotion.Type}'", MyLogger.LogCategory.Regional);
                }
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {ex.Message}", MyLogger.LogCategory.Regional);
            }
        }

        #endregion

        public void Dispose()
        {
            // –ü–æ–∫–∞ —á—Ç–æ –æ—Å—Ç–∞–≤–∏–º –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ –Ω–µ—á–µ–≥–æ –æ—Å–≤–æ–±–æ–∂–¥–∞—Ç—å.
            // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π, –Ω–∞–ø—Ä–∏–º–µ—Ä:
            // if (_syncService != null)
            // {
            //     _syncService.OnSyncComplete -= HandleSyncComplete;
            //     _syncService.OnSyncProgress -= HandleSyncProgress;
            //     _syncService.OnRecordSynced -= HandleRecordSynced;
            //     _syncService.OnSyncConflict -= HandleSyncConflict;
            // }
            // MyLogger.Log("[EmotionService] Disposed.", MyLogger.LogCategory.Default);
        }
    }
}
