using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using UnityEngine;
using App.Develop.CommonServices.Firebase.Database.Models;
using App.Develop.CommonServices.Firebase.Database.Services;
using App.Develop.CommonServices.Firebase.Common;
using App.Develop.CommonServices.DataManagement.DataProviders;
using App.Develop.CommonServices.ConfigsManagement;
using App.Develop.CommonServices.GameSystem;
using App.Develop.Configs.Common.Emotion;
using App.Develop.Utils.Logging;
using App.Develop.DI;

namespace App.Develop.CommonServices.Emotion
{
    /// <summary>
    /// –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è EmotionService —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –Ω–æ–≤—ã—Ö Firebase –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    /// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ PerformanceMonitor, BatchOperations, OfflineManager
    /// </summary>
    public class EnhancedEmotionService : IEmotionService, IInitializable, IDisposable
    {
        #region Fields

        private readonly Dictionary<EmotionTypes, EmotionData> _emotions;
        private readonly PlayerDataProvider _playerDataProvider;

        // –ù–æ–≤—ã–µ Firebase –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        private readonly IFirebasePerformanceMonitor _performanceMonitor;
        private readonly IFirebaseBatchOperations _batchOperations;
        private readonly IOfflineManager _offlineManager;
        private readonly IDatabaseService _databaseService;

        // –§–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        private bool _isInitialized;
        private bool _isDisposed;

        #endregion

        #region Events

        /// <summary>
        /// –°–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —ç–º–æ—Ü–∏–∏
        /// </summary>
        public event EventHandler<EmotionEvent> OnEmotionEvent;

        #endregion

        #region Constructor

        /// <summary>
        /// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ EmotionService
        /// </summary>
        public EnhancedEmotionService(
            PlayerDataProvider playerDataProvider,
            IFirebasePerformanceMonitor performanceMonitor,
            IFirebaseBatchOperations batchOperations,
            IOfflineManager offlineManager,
            IDatabaseService databaseService)
        {
            _playerDataProvider = playerDataProvider ?? throw new ArgumentNullException(nameof(playerDataProvider));
            _performanceMonitor = performanceMonitor ?? throw new ArgumentNullException(nameof(performanceMonitor));
            _batchOperations = batchOperations ?? throw new ArgumentNullException(nameof(batchOperations));
            _offlineManager = offlineManager ?? throw new ArgumentNullException(nameof(offlineManager));
            _databaseService = databaseService ?? throw new ArgumentNullException(nameof(databaseService));

            _emotions = new Dictionary<EmotionTypes, EmotionData>();

            MyLogger.Log("‚úÖ [EnhancedEmotionService] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –Ω–æ–≤—ã–º–∏ Firebase –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏", MyLogger.LogCategory.Firebase);
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å
        /// </summary>
        public void Initialize()
        {
            if (_isInitialized)
                return;

            InitializeEmotions();
            _isInitialized = true;

            MyLogger.Log("‚úÖ [EnhancedEmotionService] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞", MyLogger.LogCategory.Firebase);
        }

        /// <summary>
        /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —ç–º–æ—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Performance Monitor
        /// </summary>
        public async void SetEmotionValue(EmotionTypes type, float value, bool needSave = true)
        {
            await _performanceMonitor.TrackOperationAsync($"SetEmotionValue({type})", async () =>
            {
                if (!_emotions.ContainsKey(type))
                {
                    MyLogger.LogWarning($"‚ùå [EnhancedEmotionService] –≠–º–æ—Ü–∏—è {type} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", MyLogger.LogCategory.Firebase);
                    return false;
                }

                var emotion = _emotions[type];
                var oldValue = emotion.Value;
                emotion.Value = Mathf.Clamp01(value);

                MyLogger.Log($"üé≠ [EnhancedEmotionService] –≠–º–æ—Ü–∏—è {type}: {oldValue:F2} ‚Üí {emotion.Value:F2}", MyLogger.LogCategory.Firebase);

                // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Å–æ–±—ã—Ç–∏–∏
                OnEmotionEvent?.Invoke(this, new EmotionEvent(type, EmotionEventType.ValueChanged, oldValue, emotion.Value));

                if (needSave)
                {
                    await SaveEmotionToFirebase(emotion);
                }

                return true;
            });
        }

        /// <summary>
        /// –û–±–Ω–æ–≤–ª—è–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —ç–º–æ—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Batch Operations
        /// </summary>
        public async Task<bool> UpdateMultipleEmotionsAsync(Dictionary<EmotionTypes, float> emotionUpdates)
        {
            return await _performanceMonitor.TrackOperationAsync("UpdateMultipleEmotions", async () =>
            {
                var updates = new Dictionary<string, object>();
                var userId = GetCurrentUserId();

                if (string.IsNullOrEmpty(userId))
                {
                    MyLogger.LogError("‚ùå [EnhancedEmotionService] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω", MyLogger.LogCategory.Firebase);
                    return false;
                }

                foreach (var update in emotionUpdates)
                {
                    if (!_emotions.ContainsKey(update.Key))
                        continue;

                    var emotion = _emotions[update.Key];
                    var oldValue = emotion.Value;
                    emotion.Value = Mathf.Clamp01(update.Value);

                    // Fan-out —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
                    updates[$"users/{userId}/emotions/{update.Key.ToString()}/value"] = emotion.Value;
                    updates[$"users/{userId}/emotions/{update.Key.ToString()}/lastUpdate"] = DateTime.UtcNow.ToString("O");
                    updates[$"emotion-stats/{userId}/lastActivity"] = DateTime.UtcNow.ToString("O");

                    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Å–æ–±—ã—Ç–∏–∏
                    OnEmotionEvent?.Invoke(this, new EmotionEvent(update.Key, EmotionEventType.ValueChanged, oldValue, emotion.Value));
                }

                // –í—ã–ø–æ–ª–Ω—è–µ–º batch –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                var success = await _batchOperations.UpdateMultipleRecordsAsync(updates);

                if (success)
                {
                    MyLogger.Log($"‚úÖ [EnhancedEmotionService] Batch –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ {emotionUpdates.Count} —ç–º–æ—Ü–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", MyLogger.LogCategory.Firebase);
                }

                return success;
            });
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        /// </summary>
        public void ShowPerformanceStats()
        {
            var overallStats = _performanceMonitor.GetStats();
            var emotionStats = _performanceMonitor.GetStats("SetEmotionValue");

            MyLogger.Log("üìä === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –≠–ú–û–¶–ò–ô ===", MyLogger.LogCategory.Firebase);
            MyLogger.Log($"üìä –û–±—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: {overallStats.TotalExecutions} (—É—Å–ø–µ—à–Ω–æ—Å—Ç—å: {overallStats.SuccessRate:F1}%)", MyLogger.LogCategory.Firebase);
            MyLogger.Log($"üìä SetEmotionValue: {emotionStats.TotalExecutions} –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π, —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {emotionStats.AverageExecutionTime.TotalMilliseconds:F2}ms", MyLogger.LogCategory.Firebase);
            MyLogger.Log("üìä ===============================================", MyLogger.LogCategory.Firebase);
        }

        #endregion

        #region IEmotionService Implementation

        public List<EmotionTypes> AvailableEmotions => _emotions.Keys.ToList();

        public EmotionData GetEmotion(EmotionTypes type)
        {
            return _emotions.TryGetValue(type, out var emotion) ? emotion : null;
        }

        public bool HasEnough(EmotionTypes type, float amount)
        {
            return _emotions.TryGetValue(type, out var emotion) && emotion.Value >= amount;
        }

        public void SpendEmotion(EmotionTypes type, float amount)
        {
            if (_emotions.TryGetValue(type, out var emotion))
            {
                emotion.Value = Mathf.Max(0, emotion.Value - amount);
                MyLogger.Log($"üí∏ [EnhancedEmotionService] –ü–æ—Ç—Ä–∞—á–µ–Ω–æ {amount} —ç–º–æ—Ü–∏–∏ {type}, –æ—Å—Ç–∞–ª–æ—Å—å: {emotion.Value}", MyLogger.LogCategory.Firebase);
            }
        }

        public void AddEmotion(EmotionTypes type, float amount)
        {
            if (_emotions.TryGetValue(type, out var emotion))
            {
                emotion.Value = Mathf.Min(1f, emotion.Value + amount);
                MyLogger.Log($"üí∞ [EnhancedEmotionService] –î–æ–±–∞–≤–ª–µ–Ω–æ {amount} —ç–º–æ—Ü–∏–∏ {type}, –≤—Å–µ–≥–æ: {emotion.Value}", MyLogger.LogCategory.Firebase);
            }
        }

        public float GetEmotionValue(EmotionTypes type)
        {
            return _emotions.TryGetValue(type, out var emotion) ? emotion.Value : 0f;
        }

        public float GetEmotionIntensity(EmotionTypes type)
        {
            return _emotions.TryGetValue(type, out var emotion) ? emotion.Intensity : 0f;
        }

        public Color GetEmotionColor(EmotionTypes type)
        {
            return _emotions.TryGetValue(type, out var emotion) ? emotion.Color : Color.white;
        }

        public void LogEmotionEvent(EmotionTypes type, EmotionEventType eventType, string note = null)
        {
            MyLogger.Log($"üìù [EnhancedEmotionService] –°–æ–±—ã—Ç–∏–µ —ç–º–æ—Ü–∏–∏: {type} - {eventType}", MyLogger.LogCategory.Firebase);
        }

        public EmotionData GetEmotionData(EmotionTypes type)
        {
            return GetEmotion(type);
        }

        public Dictionary<EmotionTypes, EmotionData> GetAllEmotions()
        {
            return new Dictionary<EmotionTypes, EmotionData>(_emotions);
        }

        public void SetEmotionIntensity(EmotionTypes type, float intensity, bool needSave = true)
        {
            if (_emotions.TryGetValue(type, out var emotion))
            {
                emotion.Intensity = Mathf.Clamp01(intensity);
                MyLogger.Log($"üé≠ [EnhancedEmotionService] –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å {type}: {emotion.Intensity:F2}", MyLogger.LogCategory.Firebase);

                if (needSave)
                {
                    _ = SaveEmotionToFirebase(emotion);
                }
            }
        }

        public void ResetAllEmotions(bool needSave = true)
        {
            foreach (var emotion in _emotions.Values)
            {
                emotion.Value = 0.5f;
                emotion.Intensity = 0.5f;
                emotion.LastUpdate = DateTime.UtcNow;
            }

            MyLogger.Log("üîÑ [EnhancedEmotionService] –í—Å–µ —ç–º–æ—Ü–∏–∏ —Å–±—Ä–æ—à–µ–Ω—ã", MyLogger.LogCategory.Firebase);

            if (needSave)
            {
                var updates = new Dictionary<EmotionTypes, float>();
                foreach (var kvp in _emotions)
                {
                    updates[kvp.Key] = kvp.Value.Value;
                }
                _ = UpdateMultipleEmotionsAsync(updates);
            }
        }

        #endregion

        #region Private Methods

        /// <summary>
        /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—ã–µ —ç–º–æ—Ü–∏–∏
        /// </summary>
        private void InitializeEmotions()
        {
            var emotionTypes = Enum.GetValues(typeof(EmotionTypes)).Cast<EmotionTypes>();

            foreach (var type in emotionTypes)
            {
                _emotions[type] = new EmotionData
                {
                    Type = type.ToString(),
                    Value = 0.5f,
                    Intensity = 0.5f,
                    Color = GetDefaultColor(type),
                    LastUpdate = DateTime.UtcNow
                };
            }

            MyLogger.Log($"‚úÖ [EnhancedEmotionService] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {_emotions.Count} —ç–º–æ—Ü–∏–π", MyLogger.LogCategory.Firebase);
        }

        /// <summary>
        /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —ç–º–æ—Ü–∏–∏
        /// </summary>
        private Color GetDefaultColor(EmotionTypes type)
        {
            return type switch
            {
                EmotionTypes.Joy => Color.yellow,
                EmotionTypes.Sadness => Color.blue,
                EmotionTypes.Anger => Color.red,
                EmotionTypes.Fear => Color.black,
                EmotionTypes.Love => Color.magenta,
                EmotionTypes.Disgust => Color.green,
                _ => Color.gray
            };
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        /// </summary>
        private string GetCurrentUserId()
        {
            // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ _databaseService
            return "test_user_123";
        }

        /// <summary>
        /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —ç–º–æ—Ü–∏—é –≤ Firebase —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        /// </summary>
        private async Task SaveEmotionToFirebase(EmotionData emotion)
        {
            try
            {
                var userId = GetCurrentUserId();
                if (string.IsNullOrEmpty(userId))
                    return;

                var emotionKey = emotion.Type.ToString();
                var updates = new Dictionary<string, object>
                {
                    [$"users/{userId}/emotions/{emotionKey}/value"] = emotion.Value,
                    [$"users/{userId}/emotions/{emotionKey}/intensity"] = emotion.Intensity,
                    [$"users/{userId}/emotions/{emotionKey}/lastUpdate"] = DateTime.UtcNow.ToString("O")
                };

                await _batchOperations.UpdateMultipleRecordsAsync(updates);
                MyLogger.Log($"üíæ [EnhancedEmotionService] –≠–º–æ—Ü–∏—è {emotion.Type} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Firebase", MyLogger.LogCategory.Firebase);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå [EnhancedEmotionService] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–º–æ—Ü–∏–∏: {ex.Message}", MyLogger.LogCategory.Firebase);
            }
        }

        #endregion

        #region IDisposable

        public void Dispose()
        {
            if (_isDisposed)
                return;

            OnEmotionEvent = null;
            _isDisposed = true;
            MyLogger.Log("üóëÔ∏è [EnhancedEmotionService] Disposed", MyLogger.LogCategory.Firebase);
        }

        #endregion
    }
}