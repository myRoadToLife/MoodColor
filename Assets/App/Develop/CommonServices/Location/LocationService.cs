using System;
using System.Collections;
using System.Collections.Generic;
using System.Threading.Tasks;
using UnityEngine;
using App.Develop.Utils.Logging;
using App.Develop.DI;

namespace App.Develop.CommonServices.Location
{
    /// <summary>
    /// –°–µ—Ä–≤–∏—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    /// </summary>
    public class LocationService : MonoBehaviour, ILocationService, IInitializable
    {
        #region Private Fields
        
        private LocationData _currentLocation;
        private LocationData _cachedLocation;
        private bool _isTracking;
        private bool _isInitialized;
        private LocationPermissionStatus _permissionStatus;
        private DateTime _lastLocationUpdate;
        private readonly Dictionary<string, string> _regionCache = new Dictionary<string, string>();
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        private const float DESIRED_ACCURACY_IN_METERS = 10f;
        private const float UPDATE_DISTANCE_IN_METERS = 50f;
        private const int LOCATION_TIMEOUT_SECONDS = 30;
        private const int CACHE_EXPIRY_MINUTES = 10;
        
        // –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã –ë–µ–ª–∞—Ä—É—Å–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
        private readonly Dictionary<string, RegionBounds> _regions = new Dictionary<string, RegionBounds>
        {
            // –ú–∏–Ω—Å–∫ (—Å—Ç–æ–ª–∏—Ü–∞) - —Ä–∞–∑–¥–µ–ª–µ–Ω –Ω–∞ —Ä–∞–π–æ–Ω—ã
            ["minsk_center"] = new RegionBounds("–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–∞–π–æ–Ω –ú–∏–Ω—Å–∫–∞", 53.9006, 27.5590, 0.03),
            ["minsk_north"] = new RegionBounds("–°–µ–≤–µ—Ä–Ω—ã–µ —Ä–∞–π–æ–Ω—ã –ú–∏–Ω—Å–∫–∞", 53.9506, 27.5590, 0.08),
            ["minsk_south"] = new RegionBounds("–Æ–∂–Ω—ã–µ —Ä–∞–π–æ–Ω—ã –ú–∏–Ω—Å–∫–∞", 53.8506, 27.5590, 0.08),
            ["minsk_east"] = new RegionBounds("–í–æ—Å—Ç–æ—á–Ω—ã–µ —Ä–∞–π–æ–Ω—ã –ú–∏–Ω—Å–∫–∞", 53.9006, 27.6590, 0.08),
            ["minsk_west"] = new RegionBounds("–ó–∞–ø–∞–¥–Ω—ã–µ —Ä–∞–π–æ–Ω—ã –ú–∏–Ω—Å–∫–∞", 53.9006, 27.4590, 0.08),
            
            // –ë—Ä–µ—Å—Ç—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å
            ["brest"] = new RegionBounds("–ë—Ä–µ—Å—Ç", 52.0977, 23.7340, 0.05),
            ["baranovichi"] = new RegionBounds("–ë–∞—Ä–∞–Ω–æ–≤–∏—á–∏", 53.1327, 26.0139, 0.03),
            ["pinsk"] = new RegionBounds("–ü–∏–Ω—Å–∫", 52.1229, 26.0951, 0.03),
            ["brest_region"] = new RegionBounds("–ë—Ä–µ—Å—Ç—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", 52.5, 24.5, 1.5),
            
            // –í–∏—Ç–µ–±—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å
            ["vitebsk"] = new RegionBounds("–í–∏—Ç–µ–±—Å–∫", 55.1904, 30.2049, 0.05),
            ["polotsk"] = new RegionBounds("–ü–æ–ª–æ—Ü–∫", 55.4870, 28.7856, 0.03),
            ["orsha"] = new RegionBounds("–û—Ä—à–∞", 54.5081, 30.4172, 0.03),
            ["vitebsk_region"] = new RegionBounds("–í–∏—Ç–µ–±—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", 55.0, 29.0, 1.5),
            
            // –ì–æ–º–µ–ª—å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å
            ["gomel"] = new RegionBounds("–ì–æ–º–µ–ª—å", 52.4345, 30.9754, 0.05),
            ["mozyr"] = new RegionBounds("–ú–æ–∑—ã—Ä—å", 52.0493, 29.2456, 0.03),
            ["rechitsa"] = new RegionBounds("–†–µ—á–∏—Ü–∞", 52.3616, 30.3913, 0.03),
            ["gomel_region"] = new RegionBounds("–ì–æ–º–µ–ª—å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", 52.5, 29.5, 1.5),
            
            // –ì—Ä–æ–¥–Ω–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å
            ["grodno"] = new RegionBounds("–ì—Ä–æ–¥–Ω–æ", 53.6884, 23.8258, 0.05),
            ["lida"] = new RegionBounds("–õ–∏–¥–∞", 53.8971, 25.2985, 0.03),
            ["slonim"] = new RegionBounds("–°–ª–æ–Ω–∏–º", 53.0879, 25.3188, 0.03),
            ["grodno_region"] = new RegionBounds("–ì—Ä–æ–¥–Ω–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", 53.5, 24.5, 1.5),
            
            // –ú–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å (–∏—Å–∫–ª—é—á–∞—è —Å–∞–º –ú–∏–Ω—Å–∫)
            ["borisov"] = new RegionBounds("–ë–æ—Ä–∏—Å–æ–≤", 54.2279, 28.5050, 0.03),
            ["soligorsk"] = new RegionBounds("–°–æ–ª–∏–≥–æ—Ä—Å–∫", 52.7874, 27.5414, 0.03),
            ["molodechno"] = new RegionBounds("–ú–æ–ª–æ–¥–µ—á–Ω–æ", 54.3107, 26.8504, 0.03),
            ["minsk_region"] = new RegionBounds("–ú–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", 53.5, 27.5, 1.5),
            
            // –ú–æ–≥–∏–ª–µ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å
            ["mogilev"] = new RegionBounds("–ú–æ–≥–∏–ª–µ–≤", 53.9168, 30.3449, 0.05),
            ["bobruisk"] = new RegionBounds("–ë–æ–±—Ä—É–π—Å–∫", 53.1459, 29.2214, 0.03),
            ["krichev"] = new RegionBounds("–ö—Ä–∏—á–µ–≤", 53.7132, 31.3074, 0.03),
            ["mogilev_region"] = new RegionBounds("–ú–æ–≥–∏–ª–µ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", 53.5, 30.0, 1.5),
            
            // Fallback —Ä–µ–≥–∏–æ–Ω
            ["default"] = new RegionBounds("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–≥–∏–æ–Ω", 0, 0, 180)
        };
        
        #endregion
        
        #region Events
        
        public event Action<LocationData> OnLocationChanged;
        public event Action<bool> OnPermissionStatusChanged;
        
        #endregion
        
        #region Properties
        
        public bool IsLocationPermissionGranted => 
            _permissionStatus == LocationPermissionStatus.Granted ||
            _permissionStatus == LocationPermissionStatus.GrantedWhenInUse ||
            _permissionStatus == LocationPermissionStatus.GrantedAlways;
            
        public bool IsLocationServiceEnabled => Input.location.isEnabledByUser;
        
        #endregion
        
        #region Unity Lifecycle
        
        private void Awake()
        {
            DontDestroyOnLoad(gameObject);
        }
        
        private void OnApplicationPause(bool pauseStatus)
        {
            if (!pauseStatus && _isTracking)
            {
                // –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ - –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
                _ = GetCurrentLocationAsync();
            }
        }
        
        private void OnDestroy()
        {
            StopLocationTracking();
        }
        
        #endregion
        
        #region IInitializable
        
        public void Initialize()
        {
            _ = InitializeAsync();
        }
        
        #endregion
        
        #region ILocationService Implementation
        
        public async Task InitializeAsync()
        {
            if (_isInitialized)
            {
                MyLogger.Log("LocationService —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", MyLogger.LogCategory.Location);
                return;
            }
            
            try
            {
                MyLogger.Log("üó∫Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LocationService...", MyLogger.LogCategory.Location);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
                if (!SystemInfo.supportsLocationService)
                {
                    MyLogger.LogWarning("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", MyLogger.LogCategory.Location);
                    _permissionStatus = LocationPermissionStatus.Denied;
                    _isInitialized = true;
                    return;
                }
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
                LoadCachedLocation();
                
                _isInitialized = true;
                MyLogger.Log("‚úÖ LocationService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ", MyLogger.LogCategory.Location);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ LocationService: {ex.Message}", MyLogger.LogCategory.Location);
                _isInitialized = false;
            }
        }
        
        public async Task<LocationData> GetCurrentLocationAsync()
        {
            if (!_isInitialized)
            {
                await InitializeAsync();
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
            if (_cachedLocation != null && IsCacheValid())
            {
                MyLogger.Log($"üìç –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {_cachedLocation}", MyLogger.LogCategory.Location);
                return _cachedLocation;
            }
            
            try
            {
                // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
                bool hasPermission = await RequestLocationPermissionAsync();
                if (!hasPermission)
                {
                    MyLogger.LogWarning("–ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", MyLogger.LogCategory.Location);
                    return null;
                }
                
                MyLogger.Log("üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ...", MyLogger.LogCategory.Location);
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–±—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
                Input.location.Start(DESIRED_ACCURACY_IN_METERS, UPDATE_DISTANCE_IN_METERS);
                
                // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                float timeoutTime = Time.time + LOCATION_TIMEOUT_SECONDS;
                while (Input.location.status == LocationServiceStatus.Initializing && Time.time < timeoutTime)
                {
                    await Task.Delay(100);
                }
                
                if (Input.location.status == LocationServiceStatus.Failed)
                {
                    MyLogger.LogError("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–ª—É–∂–±—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏", MyLogger.LogCategory.Location);
                    return null;
                }
                
                if (Input.location.status != LocationServiceStatus.Running)
                {
                    MyLogger.LogWarning("‚ö†Ô∏è –°–ª—É–∂–±–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞", MyLogger.LogCategory.Location);
                    return null;
                }
                
                // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                LocationInfo locationInfo = Input.location.lastData;
                var locationData = new LocationData(
                    locationInfo.latitude,
                    locationInfo.longitude,
                    locationInfo.horizontalAccuracy
                );
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–≥–∏–æ–Ω
                string regionId = await GetRegionIdAsync(locationData.Latitude, locationData.Longitude);
                locationData.RegionId = regionId;
                locationData.RegionName = GetRegionName(regionId);
                
                // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                _currentLocation = locationData;
                _cachedLocation = locationData.Clone();
                _lastLocationUpdate = DateTime.UtcNow;
                SaveLocationToCache(locationData);
                
                MyLogger.Log($"üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ: {locationData}", MyLogger.LogCategory.Location);
                
                // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
                OnLocationChanged?.Invoke(locationData);
                
                return locationData;
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è: {ex.Message}", MyLogger.LogCategory.Location);
                return null;
            }
        }
        
        public async Task<string> GetRegionIdAsync(double latitude, double longitude)
        {
            try
            {
                string cacheKey = $"{latitude:F4}_{longitude:F4}";
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
                if (_regionCache.TryGetValue(cacheKey, out string cachedRegionId))
                {
                    return cachedRegionId;
                }
                
                // –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–µ–≥–∏–æ–Ω
                foreach (var kvp in _regions)
                {
                    if (kvp.Value.ContainsPoint(latitude, longitude))
                    {
                        _regionCache[cacheKey] = kvp.Key;
                        return kvp.Key;
                    }
                }
                
                // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–µ–≥–∏–æ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º "default"
                _regionCache[cacheKey] = "default";
                return "default";
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞: {ex.Message}", MyLogger.LogCategory.Location);
                return "default";
            }
        }
        
        public async Task<bool> RequestLocationPermissionAsync()
        {
            try
            {
                if (!SystemInfo.supportsLocationService)
                {
                    _permissionStatus = LocationPermissionStatus.Denied;
                    return false;
                }
                
                if (!Input.location.isEnabledByUser)
                {
                    _permissionStatus = LocationPermissionStatus.Denied;
                    MyLogger.LogWarning("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö", MyLogger.LogCategory.Location);
                    return false;
                }
                
                _permissionStatus = LocationPermissionStatus.Granted;
                OnPermissionStatusChanged?.Invoke(true);
                return true;
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: {ex.Message}", MyLogger.LogCategory.Location);
                _permissionStatus = LocationPermissionStatus.Denied;
                OnPermissionStatusChanged?.Invoke(false);
                return false;
            }
        }
        
        public void StartLocationTracking()
        {
            if (_isTracking) return;
            
            MyLogger.Log("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è", MyLogger.LogCategory.Location);
            _isTracking = true;
            StartCoroutine(LocationTrackingCoroutine());
        }
        
        public void StopLocationTracking()
        {
            if (!_isTracking) return;
            
            MyLogger.Log("‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è", MyLogger.LogCategory.Location);
            _isTracking = false;
            Input.location.Stop();
        }
        
        public void ClearLocationCache()
        {
            _cachedLocation = null;
            _regionCache.Clear();
            PlayerPrefs.DeleteKey("CachedLocation");
            MyLogger.Log("üóëÔ∏è –ö—ç—à –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–π –æ—á–∏—â–µ–Ω", MyLogger.LogCategory.Location);
        }
        
        #endregion
        
        #region Private Methods
        
        private bool IsCacheValid()
        {
            if (_cachedLocation == null) return false;
            
            TimeSpan timeSinceUpdate = DateTime.UtcNow - _lastLocationUpdate;
            return timeSinceUpdate.TotalMinutes < CACHE_EXPIRY_MINUTES;
        }
        
        private void LoadCachedLocation()
        {
            try
            {
                string cachedJson = PlayerPrefs.GetString("CachedLocation", "");
                if (!string.IsNullOrEmpty(cachedJson))
                {
                    _cachedLocation = JsonUtility.FromJson<LocationData>(cachedJson);
                    string lastUpdateStr = PlayerPrefs.GetString("LastLocationUpdate", "");
                    if (DateTime.TryParse(lastUpdateStr, out DateTime lastUpdate))
                    {
                        _lastLocationUpdate = lastUpdate;
                    }
                    
                    MyLogger.Log($"üì± –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {_cachedLocation}", MyLogger.LogCategory.Location);
                }
            }
            catch (Exception ex)
            {
                MyLogger.LogWarning($"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {ex.Message}", MyLogger.LogCategory.Location);
            }
        }
        
        private void SaveLocationToCache(LocationData location)
        {
            try
            {
                string json = JsonUtility.ToJson(location);
                PlayerPrefs.SetString("CachedLocation", json);
                PlayerPrefs.SetString("LastLocationUpdate", DateTime.UtcNow.ToString());
                PlayerPrefs.Save();
            }
            catch (Exception ex)
            {
                MyLogger.LogWarning($"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤ –∫—ç—à: {ex.Message}", MyLogger.LogCategory.Location);
            }
        }
        
        private string GetRegionName(string regionId)
        {
            return _regions.TryGetValue(regionId, out RegionBounds region) ? region.Name : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–≥–∏–æ–Ω";
        }
        
        private IEnumerator LocationTrackingCoroutine()
        {
            while (_isTracking)
            {
                yield return new WaitForSeconds(30f); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                
                if (_isTracking && IsLocationPermissionGranted)
                {
                    _ = GetCurrentLocationAsync();
                }
            }
        }
        
        #endregion
    }
    
    /// <summary>
    /// –ì—Ä–∞–Ω–∏—Ü—ã —Ä–µ–≥–∏–æ–Ω–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    /// </summary>
    public class RegionBounds
    {
        public string Name { get; }
        public double CenterLatitude { get; }
        public double CenterLongitude { get; }
        public double RadiusDegrees { get; }
        
        public RegionBounds(string name, double centerLat, double centerLon, double radiusDegrees)
        {
            Name = name;
            CenterLatitude = centerLat;
            CenterLongitude = centerLon;
            RadiusDegrees = radiusDegrees;
        }
        
        public bool ContainsPoint(double latitude, double longitude)
        {
            double distance = Math.Sqrt(
                Math.Pow(latitude - CenterLatitude, 2) + 
                Math.Pow(longitude - CenterLongitude, 2)
            );
            return distance <= RadiusDegrees;
        }
    }
} 