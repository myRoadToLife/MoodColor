using System;
using App.Develop.Utils.Logging;

namespace App.Develop.CommonServices.Notifications
{
    /// <summary>
    /// –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–π —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º–∏ —Ç–∏–ø–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    /// –ó–∞–º–µ–Ω—è–µ—Ç NotificationManager –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Singleton –ø–∞—Ç—Ç–µ—Ä–Ω–∞
    /// –û–±—ã—á–Ω—ã–π –∫–ª–∞—Å—Å, –ø–æ–ª—É—á–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
    /// </summary>
    public class NotificationCoordinator : INotificationCoordinator
    {
        private readonly PushNotificationService _pushService;
        private readonly InGameNotificationService _inGameService;
        private readonly EmailNotificationService _emailService;
        private readonly NotificationQueue _notificationQueue;
        private readonly NotificationTriggerSystem _triggerSystem;
        private readonly UserPreferencesManager _preferencesManager;
        
        private bool _isInitialized = false;

        /// <summary>
        /// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å –∏–Ω—ä–µ–∫—Ü–∏–µ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        /// </summary>
        public NotificationCoordinator(
            PushNotificationService pushService,
            InGameNotificationService inGameService,
            EmailNotificationService emailService,
            NotificationQueue notificationQueue,
            NotificationTriggerSystem triggerSystem,
            UserPreferencesManager preferencesManager)
        {
            _pushService = pushService ?? throw new ArgumentNullException(nameof(pushService));
            _inGameService = inGameService ?? throw new ArgumentNullException(nameof(inGameService));
            _emailService = emailService ?? throw new ArgumentNullException(nameof(emailService));
            _notificationQueue = notificationQueue ?? throw new ArgumentNullException(nameof(notificationQueue));
            _triggerSystem = triggerSystem ?? throw new ArgumentNullException(nameof(triggerSystem));
            _preferencesManager = preferencesManager ?? throw new ArgumentNullException(nameof(preferencesManager));
        }

        /// <summary>
        /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        /// </summary>
        public void Initialize()
        {
            if (_isInitialized) return;
            
            MyLogger.Log("üîî –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è NotificationCoordinator...", MyLogger.LogCategory.Bootstrap);
            
            try
            {
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
                _pushService.Initialize();
                _inGameService.Initialize();
                _emailService.Initialize();
                _preferencesManager.Initialize();
                _triggerSystem.Initialize();
                _notificationQueue.Initialize();
                
                // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
                SubscribeToEvents();
                
                _isInitialized = true;
                MyLogger.Log("‚úÖ NotificationCoordinator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ", MyLogger.LogCategory.Bootstrap);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ NotificationCoordinator: {ex.Message}", MyLogger.LogCategory.Bootstrap);
                throw;
            }
        }

        private void SubscribeToEvents()
        {
            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞
            _triggerSystem.OnNotificationTriggered += HandleNotificationTriggered;
        }

        /// <summary>
        /// –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã
        /// </summary>
        public void Dispose()
        {
            UnsubscribeFromEvents();
            DisposeResources();
        }

        private void UnsubscribeFromEvents()
        {
            if (_triggerSystem != null)
                _triggerSystem.OnNotificationTriggered -= HandleNotificationTriggered;
        }

        private void DisposeResources()
        {
            _triggerSystem?.Dispose();
            _notificationQueue?.Dispose();
        }

        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        /// </summary>
        private void HandleNotificationTriggered(NotificationData notification)
        {
            try
            {
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
                if (!_preferencesManager.IsNotificationEnabled(notification.Category))
                {
                    MyLogger.Log($"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {notification.Category} –æ—Ç–∫–ª—é—á–µ–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", MyLogger.LogCategory.Default);
                    return;
                }
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞
                if (!_preferencesManager.IsTimeWindowAllowed())
                {
                    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–∑–∂–µ
                    _notificationQueue.EnqueueNotification(notification);
                    MyLogger.Log("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞", MyLogger.LogCategory.Default);
                    return;
                }
                
                // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä–≤–∏—Å
                SendNotificationThroughService(notification);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {ex.Message}", MyLogger.LogCategory.Default);
            }
        }

        private void SendNotificationThroughService(NotificationData notification)
        {
            switch (notification.DeliveryType)
            {
                case NotificationDeliveryType.Push:
                    _pushService.SendPushNotification(notification);
                    break;
                case NotificationDeliveryType.InGame:
                    _inGameService.ShowNotification(notification);
                    break;
                case NotificationDeliveryType.Email:
                    SendEmailNotification(notification);
                    break;
                default:
                    MyLogger.LogWarning($"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notification.DeliveryType}", MyLogger.LogCategory.Default);
                    break;
            }
        }

        /// <summary>
        /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        /// </summary>
        private void SendEmailNotification(NotificationData notification)
        {
            // –ü–æ–ª—É—á–∞–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            string userEmail = _preferencesManager.GetUserEmail();
            
            if (string.IsNullOrEmpty(userEmail))
            {
                MyLogger.LogWarning("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", MyLogger.LogCategory.Default);
                return;
            }
            
            _emailService.SendEmailNotification(notification, userEmail);
        }
        
        #region INotificationManager Implementation
        
        /// <summary>
        /// –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        /// </summary>
        public void ScheduleNotification(NotificationData notification, DateTime scheduledTime)
        {
            if (!_isInitialized)
            {
                MyLogger.LogError("NotificationCoordinator –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", MyLogger.LogCategory.Default);
                return;
            }
            
            _triggerSystem.AddScheduledNotification(notification, scheduledTime);
        }
        
        /// <summary>
        /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
        /// </summary>
        public void SendImmediateNotification(NotificationData notification)
        {
            if (!_isInitialized)
            {
                MyLogger.LogError("NotificationCoordinator –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", MyLogger.LogCategory.Default);
                return;
            }
            
            HandleNotificationTriggered(notification);
        }

        /// <summary>
        /// –û—Ç–º–µ–Ω—è–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ ID
        /// </summary>
        public void CancelNotification(string notificationId)
        {
            if (!_isInitialized)
            {
                MyLogger.LogError("NotificationCoordinator –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", MyLogger.LogCategory.Default);
                return;
            }
            
            _triggerSystem.CancelScheduledNotification(notificationId);
            _pushService.CancelPushNotification(notificationId);
        }
        
        /// <summary>
        /// –û—Ç–º–µ–Ω—è–µ—Ç –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        /// </summary>
        public void CancelAllNotifications()
        {
            if (!_isInitialized)
            {
                MyLogger.LogError("NotificationCoordinator –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", MyLogger.LogCategory.Default);
                return;
            }
            
            _triggerSystem.CancelAllScheduledNotifications();
            _pushService.CancelAllPushNotifications();
        }
        
        #endregion

        #region Public Properties –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
        
        /// <summary>
        /// –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        /// </summary>
        public UserPreferencesManager PreferencesManager => _preferencesManager;
        
        /// <summary>
        /// –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        /// </summary>
        public NotificationTriggerSystem TriggerSystem => _triggerSystem;
        
        #endregion
    }
} 