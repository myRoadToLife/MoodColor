using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using UnityEngine;
using App.Develop.Utils.Logging;
using App.Develop.DI;

namespace App.Develop.CommonServices.Privacy
{
    /// <summary>
    /// –°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    /// </summary>
    public class PrivacyService : IPrivacyService, IInitializable
    {
        #region Private Fields
        
        private PrivacySettings _currentSettings;
        private List<RegionOption> _availableRegions;
        
        // –ö–ª—é—á–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ PlayerPrefs
        private const string PREFS_ALLOW_GLOBAL_SHARING = "Privacy_AllowGlobalSharing";
        private const string PREFS_ALLOW_LOCATION = "Privacy_AllowLocation";
        private const string PREFS_ANONYMIZE_DATA = "Privacy_AnonymizeData";
        private const string PREFS_MANUAL_REGION = "Privacy_ManualRegion";
        private const string PREFS_USE_MANUAL_REGION = "Privacy_UseManualRegion";
        private const string PREFS_SHOWN_CONSENT = "Privacy_ShownConsent";
        
        #endregion
        
        #region Events
        
        public event Action<PrivacySettings> OnPrivacySettingsChanged;
        
        #endregion
        
        #region Properties
        
        public bool AllowGlobalDataSharing
        {
            get => _currentSettings?.AllowGlobalDataSharing ?? true;
            set
            {
                if (_currentSettings != null && _currentSettings.AllowGlobalDataSharing != value)
                {
                    _currentSettings.AllowGlobalDataSharing = value;
                    SaveSettings();
                    OnPrivacySettingsChanged?.Invoke(_currentSettings);
                    MyLogger.Log($"üîí AllowGlobalDataSharing –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {value}", MyLogger.LogCategory.Regional);
                }
            }
        }
        
        public bool AllowLocationTracking
        {
            get => _currentSettings?.AllowLocationTracking ?? true;
            set
            {
                if (_currentSettings != null && _currentSettings.AllowLocationTracking != value)
                {
                    _currentSettings.AllowLocationTracking = value;
                    SaveSettings();
                    OnPrivacySettingsChanged?.Invoke(_currentSettings);
                    MyLogger.Log($"üó∫Ô∏è AllowLocationTracking –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {value}", MyLogger.LogCategory.Location);
                }
            }
        }
        
        public bool AnonymizeData
        {
            get => _currentSettings?.AnonymizeData ?? false;
            set
            {
                if (_currentSettings != null && _currentSettings.AnonymizeData != value)
                {
                    _currentSettings.AnonymizeData = value;
                    SaveSettings();
                    OnPrivacySettingsChanged?.Invoke(_currentSettings);
                    MyLogger.Log($"üîí AnonymizeData –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {value}", MyLogger.LogCategory.Regional);
                }
            }
        }
        
        public string ManuallySelectedRegion
        {
            get => _currentSettings?.ManuallySelectedRegion ?? "";
            set
            {
                if (_currentSettings != null && _currentSettings.ManuallySelectedRegion != value)
                {
                    _currentSettings.ManuallySelectedRegion = value;
                    SaveSettings();
                    OnPrivacySettingsChanged?.Invoke(_currentSettings);
                    MyLogger.Log($"üó∫Ô∏è ManuallySelectedRegion –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {value}", MyLogger.LogCategory.Regional);
                }
            }
        }
        
        public bool UseManualRegionSelection
        {
            get => _currentSettings?.UseManualRegionSelection ?? false;
            set
            {
                if (_currentSettings != null && _currentSettings.UseManualRegionSelection != value)
                {
                    _currentSettings.UseManualRegionSelection = value;
                    SaveSettings();
                    OnPrivacySettingsChanged?.Invoke(_currentSettings);
                    MyLogger.Log($"üó∫Ô∏è UseManualRegionSelection –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {value}", MyLogger.LogCategory.Regional);
                }
            }
        }
        
        public bool HasShownInitialConsent
        {
            get => _currentSettings?.HasShownInitialConsent ?? false;
            set
            {
                if (_currentSettings != null && _currentSettings.HasShownInitialConsent != value)
                {
                    _currentSettings.HasShownInitialConsent = value;
                    SaveSettings();
                }
            }
        }
        
        #endregion
        
        #region IInitializable
        
        public void Initialize()
        {
            try
            {
                MyLogger.Log("üîí –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PrivacyService...", MyLogger.LogCategory.Regional);
                
                InitializeAvailableRegions();
                LoadSettings();
                
                MyLogger.Log("‚úÖ PrivacyService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ", MyLogger.LogCategory.Regional);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ PrivacyService: {ex.Message}", MyLogger.LogCategory.Regional);
            }
        }
        
        #endregion
        
        #region IPrivacyService Implementation
        
        public async Task<bool> RequestDataCollectionConsent()
        {
            try
            {
                MyLogger.Log("üîí –ó–∞–ø—Ä–æ—Å —Å–æ–≥–ª–∞—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö", MyLogger.LogCategory.Regional);
                
                // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–∫–∞–∑ –¥–∏–∞–ª–æ–≥–∞ —Å–æ–≥–ª–∞—Å–∏—è
                // –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true –∏ –ø–æ–º–µ—á–∞–µ–º —á—Ç–æ —Å–æ–≥–ª–∞—Å–∏–µ –±—ã–ª–æ –ø–æ–∫–∞–∑–∞–Ω–æ
                HasShownInitialConsent = true;
                
                MyLogger.Log("‚úÖ –°–æ–≥–ª–∞—Å–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω–æ", MyLogger.LogCategory.Regional);
                return true;
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å–æ–≥–ª–∞—Å–∏—è: {ex.Message}", MyLogger.LogCategory.Regional);
                return false;
            }
        }
        
        public void RevokeAllConsents()
        {
            try
            {
                MyLogger.Log("üîí –û—Ç–∑—ã–≤ –≤—Å–µ—Ö —Å–æ–≥–ª–∞—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", MyLogger.LogCategory.Regional);
                
                AllowGlobalDataSharing = false;
                AllowLocationTracking = false;
                AnonymizeData = true;
                
                MyLogger.Log("‚úÖ –í—Å–µ —Å–æ–≥–ª–∞—Å–∏—è –æ—Ç–æ–∑–≤–∞–Ω—ã", MyLogger.LogCategory.Regional);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∑—ã–≤–µ —Å–æ–≥–ª–∞—Å–∏–π: {ex.Message}", MyLogger.LogCategory.Regional);
            }
        }
        
        public PrivacySettings GetCurrentSettings()
        {
            return _currentSettings?.Clone() ?? new PrivacySettings();
        }
        
        public void ApplySettings(PrivacySettings settings)
        {
            try
            {
                if (settings == null)
                {
                    MyLogger.LogWarning("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–º–µ–Ω–∏—Ç—å null –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", MyLogger.LogCategory.Regional);
                    return;
                }
                
                MyLogger.Log("üîí –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏", MyLogger.LogCategory.Regional);
                
                _currentSettings = settings.Clone();
                SaveSettings();
                OnPrivacySettingsChanged?.Invoke(_currentSettings);
                
                MyLogger.Log("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã", MyLogger.LogCategory.Regional);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {ex.Message}", MyLogger.LogCategory.Regional);
            }
        }
        
        public List<RegionOption> GetAvailableRegions()
        {
            return new List<RegionOption>(_availableRegions);
        }
        
        public bool ShouldContributeToGlobalStats()
        {
            return AllowGlobalDataSharing && (_currentSettings?.AllowGlobalDataSharing ?? true);
        }
        
        public string GetEffectiveRegionId(string gpsRegionId)
        {
            try
            {
                // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ä—É—á–Ω–æ–π —Ä–µ–∂–∏–º –∏ —É–∫–∞–∑–∞–ª —Ä–µ–≥–∏–æ–Ω
                if (UseManualRegionSelection && !string.IsNullOrEmpty(ManuallySelectedRegion))
                {
                    MyLogger.Log($"üó∫Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—á–Ω–æ–π –≤—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞: {ManuallySelectedRegion}", MyLogger.LogCategory.Regional);
                    return ManuallySelectedRegion;
                }
                
                // –ï—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∏ –µ—Å—Ç—å GPS –¥–∞–Ω–Ω—ã–µ
                if (AllowLocationTracking && !string.IsNullOrEmpty(gpsRegionId))
                {
                    MyLogger.Log($"üó∫Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥–∏–æ–Ω –ø–æ GPS: {gpsRegionId}", MyLogger.LogCategory.Location);
                    return gpsRegionId;
                }
                
                // Fallback - –µ—Å–ª–∏ –µ—Å—Ç—å —Ä—É—á–Ω–æ–π –≤—ã–±–æ—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                if (!string.IsNullOrEmpty(ManuallySelectedRegion))
                {
                    MyLogger.Log($"üó∫Ô∏è Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—á–Ω–æ–π —Ä–µ–≥–∏–æ–Ω: {ManuallySelectedRegion}", MyLogger.LogCategory.Regional);
                    return ManuallySelectedRegion;
                }
                
                // –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback - default —Ä–µ–≥–∏–æ–Ω
                MyLogger.Log("üó∫Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º default —Ä–µ–≥–∏–æ–Ω", MyLogger.LogCategory.Regional);
                return "default";
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞: {ex.Message}", MyLogger.LogCategory.Regional);
                return "default";
            }
        }
        
        public void SaveSettings()
        {
            try
            {
                if (_currentSettings == null) return;
                
                PlayerPrefs.SetInt(PREFS_ALLOW_GLOBAL_SHARING, _currentSettings.AllowGlobalDataSharing ? 1 : 0);
                PlayerPrefs.SetInt(PREFS_ALLOW_LOCATION, _currentSettings.AllowLocationTracking ? 1 : 0);
                PlayerPrefs.SetInt(PREFS_ANONYMIZE_DATA, _currentSettings.AnonymizeData ? 1 : 0);
                PlayerPrefs.SetString(PREFS_MANUAL_REGION, _currentSettings.ManuallySelectedRegion);
                PlayerPrefs.SetInt(PREFS_USE_MANUAL_REGION, _currentSettings.UseManualRegionSelection ? 1 : 0);
                PlayerPrefs.SetInt(PREFS_SHOWN_CONSENT, _currentSettings.HasShownInitialConsent ? 1 : 0);
                PlayerPrefs.Save();
                
                MyLogger.Log("üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", MyLogger.LogCategory.Regional);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {ex.Message}", MyLogger.LogCategory.Regional);
            }
        }
        
        public void LoadSettings()
        {
            try
            {
                _currentSettings = new PrivacySettings
                {
                    AllowGlobalDataSharing = PlayerPrefs.GetInt(PREFS_ALLOW_GLOBAL_SHARING, 1) == 1,
                    AllowLocationTracking = PlayerPrefs.GetInt(PREFS_ALLOW_LOCATION, 1) == 1,
                    AnonymizeData = PlayerPrefs.GetInt(PREFS_ANONYMIZE_DATA, 0) == 1,
                    ManuallySelectedRegion = PlayerPrefs.GetString(PREFS_MANUAL_REGION, ""),
                    UseManualRegionSelection = PlayerPrefs.GetInt(PREFS_USE_MANUAL_REGION, 0) == 1,
                    HasShownInitialConsent = PlayerPrefs.GetInt(PREFS_SHOWN_CONSENT, 0) == 1
                };
                
                MyLogger.Log($"üì± –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: GlobalSharing={_currentSettings.AllowGlobalDataSharing}, Location={_currentSettings.AllowLocationTracking}, ManualRegion={_currentSettings.ManuallySelectedRegion}", MyLogger.LogCategory.Regional);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {ex.Message}", MyLogger.LogCategory.Regional);
                _currentSettings = new PrivacySettings();
            }
        }
        
        #endregion
        
        #region Private Methods
        
        private void InitializeAvailableRegions()
        {
            _availableRegions = new List<RegionOption>
            {
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º
                new RegionOption("auto", "ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏", "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ GPS", true),
                
                // –ú–∏–Ω—Å–∫ (—Å—Ç–æ–ª–∏—Ü–∞)
                new RegionOption("minsk_center", "üèõÔ∏è –ú–∏–Ω—Å–∫ - –¶–µ–Ω—Ç—Ä", "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å –ú–∏–Ω—Å–∫–∞"),
                new RegionOption("minsk_north", "üèòÔ∏è –ú–∏–Ω—Å–∫ - –°–µ–≤–µ—Ä", "–°–µ–≤–µ—Ä–Ω—ã–µ —Ä–∞–π–æ–Ω—ã –ú–∏–Ω—Å–∫–∞"),
                new RegionOption("minsk_south", "üè¢ –ú–∏–Ω—Å–∫ - –Æ–≥", "–Æ–∂–Ω—ã–µ —Ä–∞–π–æ–Ω—ã –ú–∏–Ω—Å–∫–∞"),
                new RegionOption("minsk_east", "üåÖ –ú–∏–Ω—Å–∫ - –í–æ—Å—Ç–æ–∫", "–í–æ—Å—Ç–æ—á–Ω—ã–µ —Ä–∞–π–æ–Ω—ã –ú–∏–Ω—Å–∫–∞"),
                new RegionOption("minsk_west", "üåá –ú–∏–Ω—Å–∫ - –ó–∞–ø–∞–¥", "–ó–∞–ø–∞–¥–Ω—ã–µ —Ä–∞–π–æ–Ω—ã –ú–∏–Ω—Å–∫–∞"),
                
                // –ë—Ä–µ—Å—Ç—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å
                new RegionOption("brest", "üè∞ –ë—Ä–µ—Å—Ç", "–ì–æ—Ä–æ–¥ –ë—Ä–µ—Å—Ç"),
                new RegionOption("baranovichi", "üåæ –ë–∞—Ä–∞–Ω–æ–≤–∏—á–∏", "–ì–æ—Ä–æ–¥ –ë–∞—Ä–∞–Ω–æ–≤–∏—á–∏"),
                new RegionOption("pinsk", "üå≤ –ü–∏–Ω—Å–∫", "–ì–æ—Ä–æ–¥ –ü–∏–Ω—Å–∫"),
                new RegionOption("brest_region", "üèûÔ∏è –ë—Ä–µ—Å—Ç—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–î—Ä—É–≥–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –ë—Ä–µ—Å—Ç—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏"),
                
                // –í–∏—Ç–µ–±—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å  
                new RegionOption("vitebsk", "üèõÔ∏è –í–∏—Ç–µ–±—Å–∫", "–ì–æ—Ä–æ–¥ –í–∏—Ç–µ–±—Å–∫"),
                new RegionOption("polotsk", "üèîÔ∏è –ü–æ–ª–æ—Ü–∫", "–ì–æ—Ä–æ–¥ –ü–æ–ª–æ—Ü–∫"),
                new RegionOption("orsha", "üå≤ –û—Ä—à–∞", "–ì–æ—Ä–æ–¥ –û—Ä—à–∞"),
                new RegionOption("vitebsk_region", "üçÉ –í–∏—Ç–µ–±—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–î—Ä—É–≥–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –í–∏—Ç–µ–±—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏"),
                
                // –ì–æ–º–µ–ª—å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å
                new RegionOption("gomel", "üè≠ –ì–æ–º–µ–ª—å", "–ì–æ—Ä–æ–¥ –ì–æ–º–µ–ª—å"),
                new RegionOption("mozyr", "‚ö° –ú–æ–∑—ã—Ä—å", "–ì–æ—Ä–æ–¥ –ú–æ–∑—ã—Ä—å"),
                new RegionOption("rechitsa", "üåæ –†–µ—á–∏—Ü–∞", "–ì–æ—Ä–æ–¥ –†–µ—á–∏—Ü–∞"),
                new RegionOption("gomel_region", "üåª –ì–æ–º–µ–ª—å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–î—Ä—É–≥–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –ì–æ–º–µ–ª—å—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏"),
                
                // –ì—Ä–æ–¥–Ω–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å
                new RegionOption("grodno", "üè∞ –ì—Ä–æ–¥–Ω–æ", "–ì–æ—Ä–æ–¥ –ì—Ä–æ–¥–Ω–æ"),
                new RegionOption("lida", "üå∏ –õ–∏–¥–∞", "–ì–æ—Ä–æ–¥ –õ–∏–¥–∞"),
                new RegionOption("slonim", "üå≥ –°–ª–æ–Ω–∏–º", "–ì–æ—Ä–æ–¥ –°–ª–æ–Ω–∏–º"),
                new RegionOption("grodno_region", "üèûÔ∏è –ì—Ä–æ–¥–Ω–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–î—Ä—É–≥–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –ì—Ä–æ–¥–Ω–µ–Ω—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏"),
                
                // –ú–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å
                new RegionOption("borisov", "üè≠ –ë–æ—Ä–∏—Å–æ–≤", "–ì–æ—Ä–æ–¥ –ë–æ—Ä–∏—Å–æ–≤"),
                new RegionOption("soligorsk", "‚öôÔ∏è –°–æ–ª–∏–≥–æ—Ä—Å–∫", "–ì–æ—Ä–æ–¥ –°–æ–ª–∏–≥–æ—Ä—Å–∫"),
                new RegionOption("molodechno", "üåæ –ú–æ–ª–æ–¥–µ—á–Ω–æ", "–ì–æ—Ä–æ–¥ –ú–æ–ª–æ–¥–µ—á–Ω–æ"),
                new RegionOption("minsk_region", "üåø –ú–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–î—Ä—É–≥–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –ú–∏–Ω—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏"),
                
                // –ú–æ–≥–∏–ª–µ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å
                new RegionOption("mogilev", "üèõÔ∏è –ú–æ–≥–∏–ª–µ–≤", "–ì–æ—Ä–æ–¥ –ú–æ–≥–∏–ª–µ–≤"),
                new RegionOption("bobruisk", "üè≠ –ë–æ–±—Ä—É–π—Å–∫", "–ì–æ—Ä–æ–¥ –ë–æ–±—Ä—É–π—Å–∫"),
                new RegionOption("krichev", "üåæ –ö—Ä–∏—á–µ–≤", "–ì–æ—Ä–æ–¥ –ö—Ä–∏—á–µ–≤"),
                new RegionOption("mogilev_region", "üåª –ú–æ–≥–∏–ª–µ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–î—Ä—É–≥–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –ú–æ–≥–∏–ª–µ–≤—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏"),
                
                // –°–æ—Å–µ–¥–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –∏ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                new RegionOption("other_belarus", "üáßüáæ –î—Ä—É–≥–æ–π —Ä–µ–≥–∏–æ–Ω –ë–µ–ª–∞—Ä—É—Å–∏", "–î—Ä—É–≥–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –ë–µ–ª–∞—Ä—É—Å–∏"),
                new RegionOption("russia", "üá∑üá∫ –†–æ—Å—Å–∏—è", "–†–æ—Å—Å–∏–π—Å–∫–∞—è –§–µ–¥–µ—Ä–∞—Ü–∏—è"),
                new RegionOption("ukraine", "üá∫üá¶ –£–∫—Ä–∞–∏–Ω–∞", "–£–∫—Ä–∞–∏–Ω–∞"),
                new RegionOption("lithuania", "üá±üáπ –õ–∏—Ç–≤–∞", "–õ–∏—Ç–≤–∞"),
                new RegionOption("latvia", "üá±üáª –õ–∞—Ç–≤–∏—è", "–õ–∞—Ç–≤–∏—è"),
                new RegionOption("estonia", "üá™üá™ –≠—Å—Ç–æ–Ω–∏—è", "–≠—Å—Ç–æ–Ω–∏—è"),
                new RegionOption("poland", "üáµüá± –ü–æ–ª—å—à–∞", "–ü–æ–ª—å—à–∞"),
                new RegionOption("international", "üåç –î—Ä—É–≥–∞—è —Å—Ç—Ä–∞–Ω–∞", "–ó–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω"),
                new RegionOption("prefer_not_say", "ü§ê –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å", "–ù–µ —É–∫–∞–∑—ã–≤–∞—Ç—å —Ä–µ–≥–∏–æ–Ω")
            };
        }
        
        #endregion
    }
} 