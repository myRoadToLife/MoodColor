using System;
using System.Collections;
using App.Develop.CommonServices.CoroutinePerformer;
using App.Develop.CommonServices.LoadingScreen;
using App.Develop.DI;
using App.Develop.Scenes.AuthScene;
using App.Develop.Scenes.PersonalAreaScene.Infrastructure;
using UnityEngine;
using Object = UnityEngine.Object;
using App.Develop.CommonServices.AssetManagement;
using App.Develop.Utils.Logging;

namespace App.Develop.CommonServices.SceneManagement
{
    public class SceneSwitcher
    {
        private DIContainer _projectContainer;
        private readonly ICoroutinePerformer _coroutinePerformer;
        private readonly ILoadingScreen _loadingScreen;
        private readonly ISceneLoader _sceneLoader;

        private DIContainer _sceneContainer;

        public SceneSwitcher(
            ICoroutinePerformer coroutinePerformer,
            ILoadingScreen loadingScreen,
            ISceneLoader sceneLoader,
            DIContainer projectContainer)
        {
            _coroutinePerformer = coroutinePerformer;
            _loadingScreen = loadingScreen;
            _sceneLoader = sceneLoader;
            _projectContainer = projectContainer;
        }

        public void ProcessSwitchSceneFor(IOutputSceneArgs outputSceneArgs)
        {
            switch (outputSceneArgs)
            {
                case OutputBootstrapArgs bootstrapArgs:
                    _coroutinePerformer.StartCoroutine(ProcessSwitchFromBootstrapScene(bootstrapArgs));
                    break;
                case OutputPersonalAreaScreenArgs personalAreaScreenArgs:
                    _coroutinePerformer.StartCoroutine(ProcessSwitchFromPersonalAreaScene(personalAreaScreenArgs));
                    break;
                case OutputMainScreenArgs mainScreenArgs:
                    _coroutinePerformer.StartCoroutine(ProcessSwitchFromMainScreenScene(mainScreenArgs));
                    break;
                case OutputAuthSceneArgs authSceneArgs:
                    _coroutinePerformer.StartCoroutine(ProcessSwitchFromAuthScene(authSceneArgs));
                    break;
                default:
                    throw new ArgumentException(nameof(outputSceneArgs));
            }
        }

        private IEnumerator ProcessSwitchFromBootstrapScene(OutputBootstrapArgs bootstrapArgs)
        {
            switch (bootstrapArgs.NextSceneInputArgs)
            {
                case PersonalAreaInputArgs personalAreaInputArgs:
                    yield return ProcessSwitchToPersonalAreaScene(personalAreaInputArgs);
                    break;
                case AuthSceneInputArgs authSceneInputArgs:
                    yield return ProcessSwitchToAuthScene(authSceneInputArgs);
                    break;
                default:
                    throw new ArgumentException("–î–∞–Ω–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω –∏–∑ Bootstrap —Å—Ü–µ–Ω—ã!");
            }
        }

        private IEnumerator ProcessSwitchFromAuthScene(OutputAuthSceneArgs authSceneArgs)
        {
            MyLogger.Log("üõ£ [SceneSwitcher] –ü–µ—Ä–µ—Ö–æ–¥ –∏–∑ AuthScene...", MyLogger.LogCategory.Default);

            switch (authSceneArgs.NextSceneInputArgs)
            {
                case PersonalAreaInputArgs personalAreaInputArgs:
                    MyLogger.Log("‚û°Ô∏è [SceneSwitcher] –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ü–µ–Ω—É –Ω–∞ PersonalArea –∏–∑ AuthScene", MyLogger.LogCategory.Default);
                    yield return ProcessSwitchToPersonalAreaScene(personalAreaInputArgs);
                    break;

                default:
                    MyLogger.LogError("‚ùå [SceneSwitcher] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –∏–∑ AuthScene", MyLogger.LogCategory.Default);
                    throw new ArgumentException("–î–∞–Ω–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω –∏–∑ Auth —Å—Ü–µ–Ω—ã!");
            }
        }

        private IEnumerator ProcessSwitchFromPersonalAreaScene(OutputPersonalAreaScreenArgs personalAreaScreenArgs)
        {
            switch (personalAreaScreenArgs.NextSceneInputArgs)
            {
                // case MainSceneInputArgs mainSceneInputArgs:
                //     yield return ProcessSwitchToMainScreenScene(mainSceneInputArgs);
                //     break;
                case AuthSceneInputArgs authSceneInputArgs:
                    yield return ProcessSwitchToAuthScene(authSceneInputArgs);
                    break;
                default:
                    throw new ArgumentException("–î–∞–Ω–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω –∏–∑ PersonalArea —Å—Ü–µ–Ω—ã!");
            }
        }


        private IEnumerator ProcessSwitchFromMainScreenScene(OutputMainScreenArgs mainScreenArgs)
        {
            switch (mainScreenArgs.NextSceneInputArgs)
            {
                case PersonalAreaInputArgs personalAreaInputArgs:
                    yield return ProcessSwitchToPersonalAreaScene(personalAreaInputArgs);
                    break;
                default:
                    throw new ArgumentException("–î–∞–Ω–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω –∏–∑ MainScreen —Å—Ü–µ–Ω—ã!");
            }
        }

        private IEnumerator ProcessSwitchToAuthScene(AuthSceneInputArgs inputArgs)
        {
            MyLogger.Log("üß≠ [SceneSwitcher] –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ü–µ–Ω—É Auth –ø–æ –∫–ª—é—á—É Addressable", MyLogger.LogCategory.Default);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —ç–∫—Ä–∞–Ω —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –ø–æ–∫–∞–∑–∞–Ω
            if (!_loadingScreen.IsShowing)
            {
                _loadingScreen.Show();
            }
            
            _sceneContainer?.Dispose();

            yield return _sceneLoader.LoadAsync(AssetAddresses.EmptyScene);
            yield return _sceneLoader.LoadAsync(AssetAddresses.AuthScene);

            var bootstrap = Object.FindFirstObjectByType<AuthSceneBootstrap>();

            if (bootstrap == null)
            {
                MyLogger.LogError("‚ùå [SceneSwitcher] AuthSceneBootstrap –Ω–µ –Ω–∞–π–¥–µ–Ω!", MyLogger.LogCategory.Default);
                _loadingScreen.Hide();
                yield break;
            }

            _sceneContainer = new DIContainer(_projectContainer);
            yield return bootstrap.Run(_sceneContainer, inputArgs);

            // –°–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —ç–∫—Ä–∞–Ω –¥–ª—è AuthScene (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤–∏–¥–µ—Ç—å —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞)
            _loadingScreen.Hide();
        }


        private IEnumerator ProcessSwitchToPersonalAreaScene(PersonalAreaInputArgs personalAreaInputArgs)
        {
            MyLogger.Log("üß≠ [SceneSwitcher] –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ü–µ–Ω—É PersonalArea –ø–æ –∫–ª—é—á—É Addressable", MyLogger.LogCategory.Default);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —ç–∫—Ä–∞–Ω —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –ø–æ–∫–∞–∑–∞–Ω
            // (–ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –≤—Ö–æ–¥–µ –æ–Ω —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω –∏–∑ Bootstrap)
            if (!_loadingScreen.IsShowing)
            {
                _loadingScreen.Show();
            }

            _sceneContainer?.Dispose();

            yield return _sceneLoader.LoadAsync(AssetAddresses.EmptyScene);
            yield return _sceneLoader.LoadAsync(AssetAddresses.PersonalAreaScene);

            var personalAreaBootstrap = Object.FindFirstObjectByType<PersonalAreaBootstrap>();

            if (personalAreaBootstrap == null)
            {
                MyLogger.LogError("‚ùå [SceneSwitcher] PersonalAreaBootstrap –Ω–µ –Ω–∞–π–¥–µ–Ω!", MyLogger.LogCategory.Default);
                _loadingScreen.Hide();
                throw new NullReferenceException(nameof(personalAreaBootstrap) + " –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å—Ü–µ–Ω–µ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ Addressable.");
            }

            _sceneContainer = new DIContainer(_projectContainer);
            yield return personalAreaBootstrap.Run(_sceneContainer, personalAreaInputArgs);

            // –ù–ï —Å–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —ç–∫—Ä–∞–Ω –∑–¥–µ—Å—å - —ç—Ç–æ —Ç–µ–ø–µ—Ä—å –¥–µ–ª–∞–µ—Ç PersonalAreaBootstrap
            // –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –≤—Ö–æ–¥–µ
            MyLogger.Log("üéØ [SceneSwitcher] PersonalArea Bootstrap –∑–∞–≤–µ—Ä—à–µ–Ω, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–æ—á–Ω—ã–º —ç–∫—Ä–∞–Ω–æ–º –ø–µ—Ä–µ–¥–∞–Ω–æ PersonalAreaBootstrap", MyLogger.LogCategory.Default);
        }

        // private IEnumerator ProcessSwitchToMainScreenScene(MainSceneInputArgs mainSceneInputArgs)
        // {
        //     _loadingScreen.Show();
        //
        //     _sceneContainer?.Dispose();
        //
        //     yield return _sceneLoader.LoadAsync(SceneID.Empty);
        //     yield return _sceneLoader.LoadAsync(SceneID.MainScreen);
        //
        //     var mainScreenBootstrap = Object.FindFirstObjectByType<MainScreenBootstrap>();
        //
        //     if (mainScreenBootstrap == null)
        //         throw new NullReferenceException(nameof(mainScreenBootstrap));
        //
        //     _sceneContainer = new DIContainer(_projectContainer);
        //     yield return mainScreenBootstrap.Run(_sceneContainer, mainSceneInputArgs);
        //
        //     _loadingScreen.Hide();
        // }
    }
}
