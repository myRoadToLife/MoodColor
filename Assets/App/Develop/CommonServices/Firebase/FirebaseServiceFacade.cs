using System;
using App.Develop.CommonServices.Firebase.Auth.Services;
using App.Develop.CommonServices.Firebase.Database.Services;
using App.Develop.CommonServices.Firebase.Analytics.Services;
using App.Develop.CommonServices.Firebase.Messaging.Services;
using App.Develop.CommonServices.Firebase.RemoteConfig.Services;
using App.Develop.Utils.Logging;

namespace App.Develop.CommonServices.Firebase
{
    /// <summary>
    /// –ì–ª–∞–≤–Ω—ã–π —Ñ–∞—Å–∞–¥ –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤ Firebase, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—â–∏–π –µ–¥–∏–Ω—É—é —Ç–æ—á–∫—É –¥–æ—Å—Ç—É–ø–∞
    /// –∫–æ –≤—Å–µ–º —Å–µ—Ä–≤–∏—Å–∞–º Firebase –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
    /// </summary>
    public class FirebaseServiceFacade : IFirebaseServiceFacade
    {
        #region Private Fields
        private readonly IDatabaseService _databaseService;
        private readonly IAuthService _authService;
        private readonly IAuthStateService _authStateService;
        private readonly IFirebaseAnalyticsService _analyticsService;
        private readonly IFirebaseMessagingService _messagingService;
        private readonly IFirebaseRemoteConfigService _remoteConfigService;
        #endregion

        #region Properties
        /// <summary>
        /// –°–µ—Ä–≤–∏—Å Firebase Database
        /// </summary>
        public IDatabaseService Database => _databaseService;
        
        /// <summary>
        /// –°–µ—Ä–≤–∏—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Firebase
        /// </summary>
        public IAuthService Auth => _authService;
        
        /// <summary>
        /// –°–µ—Ä–≤–∏—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Firebase
        /// </summary>
        public IAuthStateService AuthState => _authStateService;
        
        /// <summary>
        /// –°–µ—Ä–≤–∏—Å Firebase Analytics
        /// </summary>
        public IFirebaseAnalyticsService Analytics => _analyticsService;
        
        /// <summary>
        /// –°–µ—Ä–≤–∏—Å Firebase Cloud Messaging
        /// </summary>
        public IFirebaseMessagingService Messaging => _messagingService;
        
        /// <summary>
        /// –°–µ—Ä–≤–∏—Å Firebase Remote Config
        /// </summary>
        public IFirebaseRemoteConfigService RemoteConfig => _remoteConfigService;
        #endregion

        #region Constructor
        /// <summary>
        /// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ñ–∞—Å–∞–¥–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ Firebase
        /// </summary>
        /// <param name="databaseService">–°–µ—Ä–≤–∏—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Firebase</param>
        /// <param name="authService">–°–µ—Ä–≤–∏—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Firebase</param>
        /// <param name="authStateService">–°–µ—Ä–≤–∏—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Firebase</param>
        /// <param name="analyticsService">–°–µ—Ä–≤–∏—Å Firebase Analytics</param>
        /// <param name="messagingService">–°–µ—Ä–≤–∏—Å Firebase Cloud Messaging</param>
        /// <param name="remoteConfigService">–°–µ—Ä–≤–∏—Å Firebase Remote Config</param>
        public FirebaseServiceFacade(
            IDatabaseService databaseService,
            IAuthService authService,
            IAuthStateService authStateService,
            IFirebaseAnalyticsService analyticsService,
            IFirebaseMessagingService messagingService,
            IFirebaseRemoteConfigService remoteConfigService)
        {
            _databaseService = databaseService ?? throw new ArgumentNullException(nameof(databaseService));
            _authService = authService ?? throw new ArgumentNullException(nameof(authService));
            _authStateService = authStateService ?? throw new ArgumentNullException(nameof(authStateService));
            _analyticsService = analyticsService ?? throw new ArgumentNullException(nameof(analyticsService));
            _messagingService = messagingService ?? throw new ArgumentNullException(nameof(messagingService));
            _remoteConfigService = remoteConfigService ?? throw new ArgumentNullException(nameof(remoteConfigService));
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–≤—è–∑–∏ –º–µ–∂–¥—É —Å–µ—Ä–≤–∏—Å–∞–º–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            SetupServiceConnections();
            
            MyLogger.Log("‚úÖ FirebaseServiceFacade –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", MyLogger.LogCategory.Firebase);
        }
        #endregion

        #region Private Methods
        /// <summary>
        /// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–≤—è–∑–∏ –º–µ–∂–¥—É —Å–µ—Ä–≤–∏—Å–∞–º–∏
        /// </summary>
        private void SetupServiceConnections()
        {
            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UserId –≤ Database
            if (_authStateService != null && _databaseService != null)
            {
                _authStateService.AuthStateChanged += user =>
                {
                    if (user != null)
                    {
                        MyLogger.Log($"üîë [FirebaseServiceFacade] –û–±–Ω–æ–≤–ª—è–µ–º UserId –≤ —Å–µ—Ä–≤–∏—Å–∞—Ö: {user.UserId}", MyLogger.LogCategory.Firebase);
                        _databaseService.UpdateUserId(user.UserId);
                        
                        if (_analyticsService != null)
                        {
                            _analyticsService.SetUserId(user.UserId);
                        }
                    }
                    else
                    {
                        MyLogger.Log("üîë [FirebaseServiceFacade] –û—á–∏—â–∞–µ–º UserId –≤ —Å–µ—Ä–≤–∏—Å–∞—Ö", MyLogger.LogCategory.Firebase);
                        _databaseService.UpdateUserId(null);
                        
                        if (_analyticsService != null)
                        {
                            _analyticsService.SetUserId(null);
                        }
                    }
                };
            }
        }
        #endregion

        #region IDisposable Implementation
        /// <summary>
        /// –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        /// </summary>
        public void Dispose()
        {
            try
            {
                MyLogger.Log("Disposing FirebaseServiceFacade...", MyLogger.LogCategory.Firebase);
                
                // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã —Å–µ—Ä–≤–∏—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª–∏–∑—É—é—Ç IDisposable
                (_databaseService as IDisposable)?.Dispose();
                (_authService as IDisposable)?.Dispose();
                (_authStateService as IDisposable)?.Dispose();
                (_analyticsService as IDisposable)?.Dispose();
                (_messagingService as IDisposable)?.Dispose();
                (_remoteConfigService as IDisposable)?.Dispose();
                
                MyLogger.Log("‚úÖ FirebaseServiceFacade: –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã", MyLogger.LogCategory.Firebase);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ FirebaseServiceFacade: {ex.Message}\n{ex.StackTrace}", MyLogger.LogCategory.Firebase);
            }
        }
        #endregion
    }
} 