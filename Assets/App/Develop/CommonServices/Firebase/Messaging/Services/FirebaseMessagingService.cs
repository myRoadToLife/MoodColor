using System;
using System.Threading.Tasks;
using Firebase.Messaging;
using App.Develop.Utils.Logging;
using UnityEngine;

namespace App.Develop.CommonServices.Firebase.Messaging.Services
{
    /// <summary>
    /// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Firebase Cloud Messaging
    /// </summary>
    public class FirebaseMessagingService : IFirebaseMessagingService
    {
        #region Private Fields
        private bool _isInitialized;
        #endregion

        #region Events
        /// <summary>
        /// –°–æ–±—ã—Ç–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        /// </summary>
        public event Action<FirebaseMessage> OnMessageReceived;
        
        /// <summary>
        /// –°–æ–±—ã—Ç–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        /// </summary>
        public event Action<string> OnTokenReceived;
        #endregion
        
        #region Constructor
        /// <summary>
        /// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ Firebase Cloud Messaging
        /// </summary>
        public FirebaseMessagingService()
        {
            MyLogger.Log("‚úÖ FirebaseMessagingService —Å–æ–∑–¥–∞–Ω", MyLogger.LogCategory.Firebase);
        }
        #endregion
        
        #region IFirebaseMessagingService Implementation
        /// <summary>
        /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è Firebase Messaging
        /// </summary>
        public void Initialize()
        {
            if (_isInitialized) return;
            
            try
            {
                // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è Firebase Messaging
                FirebaseMessaging.TokenReceived += OnFirebaseTokenReceived;
                FirebaseMessaging.MessageReceived += OnFirebaseMessageReceived;
                
                MyLogger.Log("‚úÖ FirebaseMessagingService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", MyLogger.LogCategory.Firebase);
                _isInitialized = true;
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ FirebaseMessagingService: {ex.Message}\n{ex.StackTrace}", MyLogger.LogCategory.Firebase);
            }
        }
        
        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        /// </summary>
        /// <returns>–¢–æ–∫–µ–Ω FCM</returns>
        public async Task<string> GetTokenAsync()
        {
            if (!_isInitialized)
            {
                MyLogger.LogWarning("‚ö†Ô∏è [Messaging] –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω FCM –¥–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞", MyLogger.LogCategory.Firebase);
                return null;
            }
            
            try
            {
                string token = await FirebaseMessaging.GetTokenAsync();
                MyLogger.Log($"üì± [Messaging] –ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω FCM: {token}", MyLogger.LogCategory.Firebase);
                return token;
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå [Messaging] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ FCM: {ex.Message}", MyLogger.LogCategory.Firebase);
                return null;
            }
        }
        
        /// <summary>
        /// –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é —Ç–µ–º—É
        /// </summary>
        /// <param name="topic">–¢–µ–º–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏</param>
        public async Task SubscribeToTopic(string topic)
        {
            if (!_isInitialized || string.IsNullOrEmpty(topic))
            {
                MyLogger.LogWarning("‚ö†Ô∏è [Messaging] –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–µ–º—É –¥–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ –∏–ª–∏ –ø—É—Å—Ç–∞—è —Ç–µ–º–∞", MyLogger.LogCategory.Firebase);
                return;
            }
            
            try
            {
                await FirebaseMessaging.SubscribeAsync(topic);
                MyLogger.Log($"üì± [Messaging] –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–µ–º—É: {topic}", MyLogger.LogCategory.Firebase);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå [Messaging] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ —Ç–µ–º—É {topic}: {ex.Message}", MyLogger.LogCategory.Firebase);
            }
        }
        
        /// <summary>
        /// –û—Ç–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–µ–º—ã
        /// </summary>
        /// <param name="topic">–¢–µ–º–∞ –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏</param>
        public async Task UnsubscribeFromTopic(string topic)
        {
            if (!_isInitialized || string.IsNullOrEmpty(topic))
            {
                MyLogger.LogWarning("‚ö†Ô∏è [Messaging] –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ç–µ–º—ã –¥–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ –∏–ª–∏ –ø—É—Å—Ç–∞—è —Ç–µ–º–∞", MyLogger.LogCategory.Firebase);
                return;
            }
            
            try
            {
                await FirebaseMessaging.UnsubscribeAsync(topic);
                MyLogger.Log($"üì± [Messaging] –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Ç–µ–º—ã: {topic}", MyLogger.LogCategory.Firebase);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå [Messaging] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ –æ—Ç —Ç–µ–º—ã {topic}: {ex.Message}", MyLogger.LogCategory.Firebase);
            }
        }
        #endregion
        
        #region Event Handlers
        private void OnFirebaseTokenReceived(object sender, TokenReceivedEventArgs token)
        {
            string tokenStr = token.Token;
            MyLogger.Log($"üì± [Messaging] –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω FCM: {tokenStr}", MyLogger.LogCategory.Firebase);
            
            // –í—ã–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
            OnTokenReceived?.Invoke(tokenStr);
        }
        
        private void OnFirebaseMessageReceived(object sender, MessageReceivedEventArgs messageData)
        {
            FirebaseMessage message = messageData.Message;
            
            if (message == null)
            {
                MyLogger.LogWarning("‚ö†Ô∏è [Messaging] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –æ–Ω–æ null", MyLogger.LogCategory.Firebase);
                return;
            }
            
            // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
            string notificationTitle = message.Notification?.Title ?? "–ù–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞";
            string notificationBody = message.Notification?.Body ?? "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞";
            string dataStr = "";
            
            if (message.Data != null && message.Data.Count > 0)
            {
                foreach (var pair in message.Data)
                {
                    dataStr += $"{pair.Key}={pair.Value}, ";
                }
                dataStr = dataStr.TrimEnd(',', ' ');
            }
            else
            {
                dataStr = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö";
            }
            
            MyLogger.Log($"üì± [Messaging] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n–ó–∞–≥–æ–ª–æ–≤–æ–∫: {notificationTitle}\n–¢–µ–∫—Å—Ç: {notificationBody}\n–î–∞–Ω–Ω—ã–µ: {dataStr}", 
                MyLogger.LogCategory.Firebase);
            
            // –í—ã–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            OnMessageReceived?.Invoke(message);
        }
        #endregion
    }
}