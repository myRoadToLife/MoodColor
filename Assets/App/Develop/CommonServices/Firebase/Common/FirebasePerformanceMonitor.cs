using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;
using App.Develop.Utils.Logging;

namespace App.Develop.CommonServices.Firebase.Common
{
    /// <summary>
    /// –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Firebase –æ–ø–µ—Ä–∞—Ü–∏–π
    /// </summary>
    public class FirebasePerformanceMonitor : IFirebasePerformanceMonitor
    {
        #region Fields

        private readonly ConcurrentDictionary<string, List<OperationMetric>> _operationMetrics;
        private readonly object _lockObject = new object();

        #endregion

        #region Properties

        /// <summary>
        /// –ü–æ—Ä–æ–≥ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 —Å–µ–∫—É–Ω–¥)
        /// </summary>
        public TimeSpan SlowOperationThreshold { get; set; } = TimeSpan.FromSeconds(5);

        #endregion

        #region Events

        /// <summary>
        /// –°–æ–±—ã—Ç–∏–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
        /// </summary>
        public event Action<string, TimeSpan> SlowOperationDetected;

        #endregion

        #region Constructor

        /// <summary>
        /// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä FirebasePerformanceMonitor
        /// </summary>
        public FirebasePerformanceMonitor()
        {
            _operationMetrics = new ConcurrentDictionary<string, List<OperationMetric>>();
            MyLogger.Log("‚úÖ [FirebasePerformanceMonitor] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", MyLogger.LogCategory.Firebase);
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ —Å–æ–±–∏—Ä–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏
        /// </summary>
        public async Task<T> TrackOperationAsync<T>(string operationName, Func<Task<T>> operation)
        {
            var stopwatch = Stopwatch.StartNew();
            var startTime = DateTime.UtcNow;
            bool isSuccess = false;
            Exception operationException = null;

            try
            {
                MyLogger.Log($"üöÄ [PerformanceMonitor] –ù–∞—á–∞–ª–æ –æ–ø–µ—Ä–∞—Ü–∏–∏: {operationName}", MyLogger.LogCategory.Firebase);

                var result = await operation();
                isSuccess = true;

                MyLogger.Log($"‚úÖ [PerformanceMonitor] –û–ø–µ—Ä–∞—Ü–∏—è '{operationName}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞ {stopwatch.ElapsedMilliseconds}ms", MyLogger.LogCategory.Firebase);

                return result;
            }
            catch (Exception ex)
            {
                operationException = ex;
                MyLogger.LogError($"‚ùå [PerformanceMonitor] –û–ø–µ—Ä–∞—Ü–∏—è '{operationName}' –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π –∑–∞ {stopwatch.ElapsedMilliseconds}ms: {ex.Message}", MyLogger.LogCategory.Firebase);
                throw;
            }
            finally
            {
                stopwatch.Stop();
                RecordMetric(operationName, stopwatch.Elapsed, isSuccess, startTime, operationException);
            }
        }

        /// <summary>
        /// –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –±–µ–∑ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        /// </summary>
        public async Task<bool> TrackOperationAsync(string operationName, Func<Task> operation)
        {
            try
            {
                await TrackOperationAsync(operationName, async () =>
                {
                    await operation();
                    return true;
                });
                return true;
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå [PerformanceMonitor] –û–ø–µ—Ä–∞—Ü–∏—è '{operationName}' –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {ex.Message}", MyLogger.LogCategory.Firebase);
                return false;
            }
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
        /// </summary>
        public PerformanceStats GetStats(string operationName = null)
        {
            lock (_lockObject)
            {
                if (string.IsNullOrEmpty(operationName))
                {
                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
                    return GetAggregatedStats();
                }

                if (!_operationMetrics.TryGetValue(operationName, out var metrics) || !metrics.Any())
                {
                    return new PerformanceStats { OperationName = operationName };
                }

                return CalculateStatsForMetrics(operationName, metrics);
            }
        }

        /// <summary>
        /// –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        /// </summary>
        public void ResetStats()
        {
            lock (_lockObject)
            {
                _operationMetrics.Clear();
                MyLogger.Log("üîÑ [PerformanceMonitor] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞", MyLogger.LogCategory.Firebase);
            }
        }

        #endregion

        #region Private Methods

        /// <summary>
        /// –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫—É –æ–ø–µ—Ä–∞—Ü–∏–∏
        /// </summary>
        private void RecordMetric(string operationName, TimeSpan duration, bool isSuccess, DateTime startTime, Exception exception)
        {
            var metric = new OperationMetric
            {
                OperationName = operationName,
                Duration = duration,
                IsSuccess = isSuccess,
                Timestamp = startTime,
                Exception = exception?.GetType().Name
            };

            lock (_lockObject)
            {
                if (!_operationMetrics.ContainsKey(operationName))
                {
                    _operationMetrics[operationName] = new List<OperationMetric>();
                }

                _operationMetrics[operationName].Add(metric);

                // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 –æ–ø–µ—Ä–∞—Ü–∏–π)
                if (_operationMetrics[operationName].Count > 1000)
                {
                    _operationMetrics[operationName].RemoveAt(0);
                }
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –º–µ–¥–ª–µ–Ω–Ω–æ–π
            if (duration > SlowOperationThreshold)
            {
                MyLogger.LogWarning($"üêå [PerformanceMonitor] –ú–µ–¥–ª–µ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞: {operationName} ({duration.TotalSeconds:F2}s)", MyLogger.LogCategory.Firebase);
                SlowOperationDetected?.Invoke(operationName, duration);
            }
        }

        /// <summary>
        /// –í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
        /// </summary>
        private PerformanceStats CalculateStatsForMetrics(string operationName, List<OperationMetric> metrics)
        {
            var successfulMetrics = metrics.Where(m => m.IsSuccess).ToList();
            var failedMetrics = metrics.Where(m => !m.IsSuccess).ToList();
            var slowMetrics = metrics.Where(m => m.Duration > SlowOperationThreshold).ToList();

            var durations = metrics.Select(m => m.Duration).ToList();
            var lastMetric = metrics.LastOrDefault();

            return new PerformanceStats
            {
                OperationName = operationName,
                TotalExecutions = metrics.Count,
                SuccessfulExecutions = successfulMetrics.Count,
                FailedExecutions = failedMetrics.Count,
                AverageExecutionTime = durations.Any() ? TimeSpan.FromTicks((long)durations.Average(d => d.Ticks)) : TimeSpan.Zero,
                MinExecutionTime = durations.Any() ? durations.Min() : TimeSpan.Zero,
                MaxExecutionTime = durations.Any() ? durations.Max() : TimeSpan.Zero,
                LastExecutionTime = lastMetric?.Duration ?? TimeSpan.Zero,
                LastExecutionTimestamp = lastMetric?.Timestamp ?? DateTime.MinValue,
                SlowOperations = slowMetrics.Count
            };
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        /// </summary>
        private PerformanceStats GetAggregatedStats()
        {
            var allMetrics = _operationMetrics.Values.SelectMany(metrics => metrics).ToList();

            if (!allMetrics.Any())
            {
                return new PerformanceStats { OperationName = "–í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏" };
            }

            return CalculateStatsForMetrics("–í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏", allMetrics);
        }

        #endregion

        #region Helper Classes

        /// <summary>
        /// –ú–µ—Ç—Ä–∏–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
        /// </summary>
        private class OperationMetric
        {
            public string OperationName { get; set; }
            public TimeSpan Duration { get; set; }
            public bool IsSuccess { get; set; }
            public DateTime Timestamp { get; set; }
            public string Exception { get; set; }
        }

        #endregion
    }
}