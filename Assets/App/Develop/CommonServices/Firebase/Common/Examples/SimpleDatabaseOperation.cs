using System;
using System.Threading.Tasks;
using Firebase.Database;
using App.Develop.Utils.Logging;

namespace App.Develop.CommonServices.Firebase.Common.Examples
{
    /// <summary>
    /// –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è IDatabaseOperation –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã OfflineManager
    /// </summary>
    public class SimpleDatabaseOperation : IDatabaseOperation
    {
        #region Fields

        private readonly DatabaseReference _reference;
        private readonly object _data;
        private readonly string _path;

        #endregion

        #region Properties

        /// <summary>
        /// –û–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        /// </summary>
        public string Description { get; }

        /// <summary>
        /// –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ (—á–µ–º –≤—ã—à–µ —á–∏—Å–ª–æ, —Ç–µ–º –≤–∞–∂–Ω–µ–µ)
        /// </summary>
        public int Priority { get; }

        /// <summary>
        /// –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        /// </summary>
        public string OperationId { get; }

        #endregion

        #region Constructor

        /// <summary>
        /// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö
        /// </summary>
        /// <param name="reference">–°—Å—ã–ª–∫–∞ –Ω–∞ —É–∑–µ–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</param>
        /// <param name="data">–î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏</param>
        /// <param name="priority">–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏</param>
        public SimpleDatabaseOperation(DatabaseReference reference, object data, int priority = 1)
        {
            _reference = reference ?? throw new ArgumentNullException(nameof(reference));
            _data = data;
            _path = reference.Key ?? "root";

            Priority = priority;
            Description = $"–ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ {_path}";
            OperationId = $"write_{_path}_{DateTime.Now.Ticks}";
        }

        /// <summary>
        /// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø—É—Ç–∏
        /// </summary>
        /// <param name="path">–ü—É—Ç—å –∫ –¥–∞–Ω–Ω—ã–º</param>
        /// <param name="data">–î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏</param>
        /// <param name="priority">–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏</param>
        public SimpleDatabaseOperation(string path, object data, int priority = 1)
        {
            if (string.IsNullOrEmpty(path))
                throw new ArgumentException("–ü—É—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º", nameof(path));

            _path = path;
            _data = data;
            Priority = priority;
            Description = $"–ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ {_path}";
            OperationId = $"write_{_path.Replace("/", "_")}_{DateTime.Now.Ticks}";
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é –∑–∞–ø–∏—Å–∏ –≤ Firebase Database
        /// </summary>
        /// <returns>True, –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ</returns>
        public async Task<bool> ExecuteAsync()
        {
            try
            {
                MyLogger.Log($"üìù [SimpleDatabaseOperation] –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é: {Description}", MyLogger.LogCategory.Firebase);

                DatabaseReference reference = _reference;
                if (reference == null)
                {
                    // –ï—Å–ª–∏ reference –Ω–µ –∑–∞–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Ç—å
                    reference = FirebaseDatabase.DefaultInstance.GetReference(_path);
                }

                // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö
                await reference.SetValueAsync(_data);

                MyLogger.Log($"‚úÖ [SimpleDatabaseOperation] –û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ: {Description}", MyLogger.LogCategory.Firebase);
                return true;
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå [SimpleDatabaseOperation] –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏: {Description}, –æ—à–∏–±–∫–∞: {ex.Message}", MyLogger.LogCategory.Firebase);
                throw; // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ OfflineManager
            }
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        /// –°–æ–∑–¥–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        /// </summary>
        /// <param name="userId">ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</param>
        /// <param name="userData">–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</param>
        /// <returns>–û–ø–µ—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</returns>
        public static SimpleDatabaseOperation CreateUserDataOperation(string userId, object userData)
        {
            return new SimpleDatabaseOperation($"users/{userId}", userData, priority: 5);
        }

        /// <summary>
        /// –°–æ–∑–¥–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é –∑–∞–ø–∏—Å–∏ —ç–º–æ—Ü–∏–∏
        /// </summary>
        /// <param name="userId">ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</param>
        /// <param name="emotionData">–î–∞–Ω–Ω—ã–µ —ç–º–æ—Ü–∏–∏</param>
        /// <returns>–û–ø–µ—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</returns>
        public static SimpleDatabaseOperation CreateEmotionOperation(string userId, object emotionData)
        {
            var emotionId = Guid.NewGuid().ToString();
            return new SimpleDatabaseOperation($"emotions/{userId}/{emotionId}", emotionData, priority: 3);
        }

        /// <summary>
        /// –°–æ–∑–¥–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        /// </summary>
        /// <param name="statsData">–î–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</param>
        /// <returns>–û–ø–µ—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</returns>
        public static SimpleDatabaseOperation CreateStatsOperation(object statsData)
        {
            return new SimpleDatabaseOperation("stats", statsData, priority: 1);
        }

        #endregion
    }
}