using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using UnityEngine;
using App.Develop.Utils.Logging;
using Firebase.Database;

namespace App.Develop.CommonServices.Firebase.Common.Examples
{
    /// <summary>
    /// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Firebase –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    /// </summary>
    public class FirebasePerformanceExample : MonoBehaviour
    {
        #region Fields

        private IFirebasePerformanceMonitor _performanceMonitor;
        private IFirebaseBatchOperations _batchOperations;

        #endregion

        #region Public Methods

        /// <summary>
        /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–∏–º–µ—Ä —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
        /// </summary>
        /// <param name="performanceMonitor">–ú–æ–Ω–∏—Ç–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</param>
        /// <param name="batchOperations">Batch –æ–ø–µ—Ä–∞—Ü–∏–∏</param>
        public void Initialize(IFirebasePerformanceMonitor performanceMonitor, IFirebaseBatchOperations batchOperations)
        {
            _performanceMonitor = performanceMonitor ?? throw new ArgumentNullException(nameof(performanceMonitor));
            _batchOperations = batchOperations ?? throw new ArgumentNullException(nameof(batchOperations));

            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            _performanceMonitor.SlowOperationDetected += OnSlowOperationDetected;

            MyLogger.Log("‚úÖ [FirebasePerformanceExample] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", MyLogger.LogCategory.Firebase);
        }

        /// <summary>
        /// –ü—Ä–∏–º–µ—Ä –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Å—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
        /// </summary>
        public async Task ExampleSimpleOperationMonitoring()
        {
            var result = await _performanceMonitor.TrackOperationAsync("SimpleUserDataUpdate", async () =>
            {
                // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await Task.Delay(100); // –°–∏–º—É–ª—è—Ü–∏—è Firebase –æ–ø–µ—Ä–∞—Ü–∏–∏

                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                return new { UserId = "user123", Name = "Test User", UpdatedAt = DateTime.UtcNow };
            });

            MyLogger.Log($"üîç [Example] –ü—Ä–æ—Å—Ç–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {result.Name} –æ–±–Ω–æ–≤–ª–µ–Ω –≤ {result.UpdatedAt}", MyLogger.LogCategory.Firebase);

            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–ø–µ—Ä–∞—Ü–∏–∏
            var stats = _performanceMonitor.GetStats("SimpleUserDataUpdate");
            MyLogger.Log($"üìä [Example] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏: {stats.TotalExecutions} –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π, —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {stats.AverageExecutionTime.TotalMilliseconds:F2}ms", MyLogger.LogCategory.Firebase);
        }

        /// <summary>
        /// –ü—Ä–∏–º–µ—Ä batch –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        /// </summary>
        public async Task ExampleBatchUpdate()
        {
            var updates = new Dictionary<string, object>
            {
                { "users/user123/lastLogin", DateTime.UtcNow.ToString() },
                { "users/user123/score", 1500 },
                { "users/user123/level", 5 },
                { "statistics/totalLogins", 12345 },
                { "statistics/activeUsers", 987 }
            };

            var success = await _batchOperations.UpdateMultipleRecordsAsync(updates);

            if (success)
            {
                MyLogger.Log($"‚úÖ [Example] Batch –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ ({updates.Count} –∑–∞–ø–∏—Å–µ–π)", MyLogger.LogCategory.Firebase);
            }
            else
            {
                MyLogger.LogError("‚ùå [Example] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ batch –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", MyLogger.LogCategory.Firebase);
            }
        }

        /// <summary>
        /// –ü—Ä–∏–º–µ—Ä fan-out –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        /// </summary>
        public async Task ExampleFanOutOperation()
        {
            var emotionData = new
            {
                Id = Guid.NewGuid().ToString(),
                Type = "happy",
                Intensity = 8,
                Timestamp = DateTime.UtcNow,
                UserId = "user123"
            };

            var fanOutOperations = new List<FanOutOperation>
            {
                // –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–ø–∏—Å—å —ç–º–æ—Ü–∏–∏
                new FanOutOperation
                {
                    Path = $"emotions/{emotionData.Id}",
                    Value = emotionData,
                    OperationType = FanOutOperationType.Set,
                    Description = "–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø–∏—Å–∏ —ç–º–æ—Ü–∏–∏"
                },
                
                // –°–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å -> —ç–º–æ—Ü–∏–∏
                new FanOutOperation
                {
                    Path = $"user-emotions/{emotionData.UserId}/{emotionData.Id}",
                    Value = true,
                    OperationType = FanOutOperationType.Set,
                    Description = "–°–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å -> —ç–º–æ—Ü–∏—è"
                },
                
                // –ò–Ω–¥–µ–∫—Å –ø–æ —Ç–∏–ø—É —ç–º–æ—Ü–∏–∏
                new FanOutOperation
                {
                    Path = $"emotions-by-type/{emotionData.Type}/{emotionData.Id}",
                    Value = emotionData.Timestamp,
                    OperationType = FanOutOperationType.Set,
                    Description = "–ò–Ω–¥–µ–∫—Å –ø–æ —Ç–∏–ø—É —ç–º–æ—Ü–∏–∏"
                },
                
                                 // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                 new FanOutOperation
                 {
                     Path = $"user-stats/{emotionData.UserId}/totalEmotions",
                     Value = 1, // –ü—Ä–æ—Å—Ç–æ–µ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –∏–ª–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
                     OperationType = FanOutOperationType.Update,
                     Description = "–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —ç–º–æ—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                 }
            };

            var success = await _batchOperations.ExecuteFanOutOperationAsync(fanOutOperations);

            if (success)
            {
                MyLogger.Log($"‚úÖ [Example] Fan-out –æ–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ ({fanOutOperations.Count} –æ–ø–µ—Ä–∞—Ü–∏–π)", MyLogger.LogCategory.Firebase);
            }
            else
            {
                MyLogger.LogError("‚ùå [Example] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ fan-out –æ–ø–µ—Ä–∞—Ü–∏–∏", MyLogger.LogCategory.Firebase);
            }
        }

        /// <summary>
        /// –ü—Ä–∏–º–µ—Ä –∞—Ç–æ–º–∞—Ä–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
        /// </summary>
        public async Task ExampleAtomicOperation()
        {
            var success = await _batchOperations.ExecuteAtomicOperationAsync(async (updates) =>
            {
                // –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–ª–æ–∂–Ω—É—é –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É
                var userId = "user123";
                var transactionAmount = 100;

                // –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–µ—Ä–µ–∑ Transaction)
                await Task.Delay(50); // –°–∏–º—É–ª—è—Ü–∏—è —á—Ç–µ–Ω–∏—è
                var currentBalance = 500; // –°–∏–º—É–ª—è—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏—è

                if (currentBalance >= transactionAmount)
                {
                    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
                    updates[$"users/{userId}/balance"] = currentBalance - transactionAmount;
                    updates[$"users/{userId}/lastTransaction"] = DateTime.UtcNow.ToString();
                    updates[$"transactions/{Guid.NewGuid()}"] = new
                    {
                        UserId = userId,
                        Amount = -transactionAmount,
                        Type = "purchase",
                        Timestamp = DateTime.UtcNow
                    };
                    updates["statistics/totalTransactions"] = 1; // –ü—Ä–æ—Å—Ç–æ–µ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                }
                else
                {
                    throw new InvalidOperationException("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏");
                }
            });

            if (success)
            {
                MyLogger.Log("‚úÖ [Example] –ê—Ç–æ–º–∞—Ä–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ", MyLogger.LogCategory.Firebase);
            }
            else
            {
                MyLogger.LogError("‚ùå [Example] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞—Ç–æ–º–∞—Ä–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏", MyLogger.LogCategory.Firebase);
            }
        }

        /// <summary>
        /// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        /// </summary>
        public void ShowPerformanceStats()
        {
            var overallStats = _performanceMonitor.GetStats();

            MyLogger.Log("üìä === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò FIREBASE ===", MyLogger.LogCategory.Firebase);
            MyLogger.Log($"üìä –û–±—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: {overallStats.TotalExecutions}", MyLogger.LogCategory.Firebase);
            MyLogger.Log($"üìä –£—Å–ø–µ—à–Ω—ã–µ: {overallStats.SuccessfulExecutions} ({overallStats.SuccessRate:F1}%)", MyLogger.LogCategory.Firebase);
            MyLogger.Log($"üìä –ù–µ—É–¥–∞—á–Ω—ã–µ: {overallStats.FailedExecutions}", MyLogger.LogCategory.Firebase);
            MyLogger.Log($"üìä –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {overallStats.AverageExecutionTime.TotalMilliseconds:F2}ms", MyLogger.LogCategory.Firebase);
            MyLogger.Log($"üìä –ú–µ–¥–ª–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: {overallStats.SlowOperations} ({overallStats.SlowOperationRate:F1}%)", MyLogger.LogCategory.Firebase);
            MyLogger.Log("üìä ===============================================", MyLogger.LogCategory.Firebase);
        }

        #endregion

        #region Private Methods

        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        /// </summary>
        private void OnSlowOperationDetected(string operationName, TimeSpan duration)
        {
            MyLogger.LogWarning($"üêå [Example] –ú–µ–¥–ª–µ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞: {operationName} –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å {duration.TotalSeconds:F2} —Å–µ–∫—É–Ω–¥", MyLogger.LogCategory.Firebase);

            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É:
            // - –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º
            // - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
            // - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        }

        #endregion

        #region Test Methods (–¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞)

        /// <summary>
        /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –ø—Ä–∏–º–µ—Ä—ã –ø–æ–¥—Ä—è–¥ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        /// </summary>
        [ContextMenu("–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –ø—Ä–∏–º–µ—Ä—ã")]
        public async void RunAllExamples()
        {
            if (_performanceMonitor == null || _batchOperations == null)
            {
                MyLogger.LogError("‚ùå [Example] –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã. –í—ã–∑–æ–≤–∏—Ç–µ Initialize() —Å–Ω–∞—á–∞–ª–∞.", MyLogger.LogCategory.Firebase);
                return;
            }

            try
            {
                MyLogger.Log("üöÄ [Example] –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ Firebase –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...", MyLogger.LogCategory.Firebase);

                await ExampleSimpleOperationMonitoring();
                await Task.Delay(1000);

                await ExampleBatchUpdate();
                await Task.Delay(1000);

                await ExampleFanOutOperation();
                await Task.Delay(1000);

                await ExampleAtomicOperation();
                await Task.Delay(1000);

                ShowPerformanceStats();

                MyLogger.Log("‚úÖ [Example] –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!", MyLogger.LogCategory.Firebase);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå [Example] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–∏–º–µ—Ä–æ–≤: {ex.Message}", MyLogger.LogCategory.Firebase);
            }
        }

        #endregion
    }
}