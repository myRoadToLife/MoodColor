using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Firebase.Database;
using App.Develop.Utils.Logging;

namespace App.Develop.CommonServices.Firebase.Common
{
    /// <summary>
    /// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è batch –æ–ø–µ—Ä–∞—Ü–∏–π Firebase
    /// </summary>
    public class FirebaseBatchOperations : IFirebaseBatchOperations
    {
        #region Fields

        private readonly DatabaseReference _databaseRef;
        private readonly IFirebaseErrorHandler _errorHandler;
        private readonly IFirebasePerformanceMonitor _performanceMonitor;

        #endregion

        #region Properties

        /// <summary>
        /// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π –≤ –æ–¥–Ω–æ–º batch (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 500)
        /// </summary>
        public int MaxBatchSize { get; set; } = 500;

        #endregion

        #region Constructor

        /// <summary>
        /// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä FirebaseBatchOperations
        /// </summary>
        /// <param name="databaseRef">–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ—Ä–µ–Ω—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</param>
        /// <param name="errorHandler">–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫</param>
        /// <param name="performanceMonitor">–ú–æ–Ω–∏—Ç–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</param>
        public FirebaseBatchOperations(
            DatabaseReference databaseRef,
            IFirebaseErrorHandler errorHandler,
            IFirebasePerformanceMonitor performanceMonitor)
        {
            _databaseRef = databaseRef ?? throw new ArgumentNullException(nameof(databaseRef));
            _errorHandler = errorHandler ?? throw new ArgumentNullException(nameof(errorHandler));
            _performanceMonitor = performanceMonitor ?? throw new ArgumentNullException(nameof(performanceMonitor));

            MyLogger.Log("‚úÖ [FirebaseBatchOperations] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", MyLogger.LogCategory.Firebase);
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// –í—ã–ø–æ–ª–Ω—è–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        /// </summary>
        public async Task<bool> UpdateMultipleRecordsAsync(Dictionary<string, object> updates)
        {
            if (updates == null || !updates.Any())
            {
                MyLogger.LogWarning("[BatchOperations] –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å –ø—É—Å—Ç—ã–º —Å–ª–æ–≤–∞—Ä–µ–º updates", MyLogger.LogCategory.Firebase);
                return true; // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏ —É—Å–ø–µ—Ö, –Ω–æ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π
            }

            return await _performanceMonitor.TrackOperationAsync($"UpdateMultipleRecords({updates.Count})", async () =>
            {
                var batches = SplitIntoBatches(updates);
                bool allSuccess = true;

                foreach (var batch in batches)
                {
                    var success = await _errorHandler.ExecuteWithRetryAsync(async () =>
                    {
                        await _databaseRef.UpdateChildrenAsync(batch);
                        return true;
                    });

                    if (!success)
                    {
                        allSuccess = false;
                        MyLogger.LogError($"‚ùå [BatchOperations] –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å batch –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ({batch.Count} –æ–ø–µ—Ä–∞—Ü–∏–π)", MyLogger.LogCategory.Firebase);
                    }
                    else
                    {
                        MyLogger.Log($"‚úÖ [BatchOperations] Batch –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ ({batch.Count} –æ–ø–µ—Ä–∞—Ü–∏–π)", MyLogger.LogCategory.Firebase);
                    }
                }

                return allSuccess;
            });
        }

        /// <summary>
        /// –°–æ–∑–¥–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –≤ —Ä–∞–∑–Ω—ã—Ö —É–∑–ª–∞—Ö
        /// </summary>
        public async Task<bool> CreateMultipleRecordsAsync(Dictionary<string, object> records)
        {
            if (records == null || !records.Any())
            {
                MyLogger.LogWarning("[BatchOperations] –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å –ø—É—Å—Ç—ã–º —Å–ª–æ–≤–∞—Ä–µ–º records", MyLogger.LogCategory.Firebase);
                return true;
            }

            return await _performanceMonitor.TrackOperationAsync($"CreateMultipleRecords({records.Count})", async () =>
            {
                // –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º UpdateChildren —Å –Ω–æ–≤—ã–º–∏ –∫–ª—é—á–∞–º–∏
                return await UpdateMultipleRecordsAsync(records);
            });
        }

        /// <summary>
        /// –£–¥–∞–ª—è–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        /// </summary>
        public async Task<bool> DeleteMultipleRecordsAsync(List<string> paths)
        {
            if (paths == null || !paths.Any())
            {
                MyLogger.LogWarning("[BatchOperations] –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º paths", MyLogger.LogCategory.Firebase);
                return true;
            }

            return await _performanceMonitor.TrackOperationAsync($"DeleteMultipleRecords({paths.Count})", async () =>
            {
                // –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ null
                var deleteUpdates = paths.ToDictionary(path => path, path => (object)null);
                return await UpdateMultipleRecordsAsync(deleteUpdates);
            });
        }

        /// <summary>
        /// –í—ã–ø–æ–ª–Ω—è–µ—Ç –∞—Ç–æ–º–∞—Ä–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é (–≤—Å–µ –∏–ª–∏ –Ω–∏—á–µ–≥–æ)
        /// </summary>
        public async Task<bool> ExecuteAtomicOperationAsync(Func<Dictionary<string, object>, Task> batchOperation)
        {
            return await _performanceMonitor.TrackOperationAsync("AtomicOperation", async () =>
            {
                var updates = new Dictionary<string, object>();

                try
                {
                    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
                    await batchOperation(updates);

                    // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∞—Ç–æ–º–∞—Ä–Ω–æ
                    if (updates.Any())
                    {
                        return await UpdateMultipleRecordsAsync(updates);
                    }

                    return true;
                }
                catch (Exception ex)
                {
                    MyLogger.LogError($"‚ùå [BatchOperations] –û—à–∏–±–∫–∞ –≤ –∞—Ç–æ–º–∞—Ä–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏: {ex.Message}", MyLogger.LogCategory.Firebase);
                    return false;
                }
            });
        }

        /// <summary>
        /// –°–æ–∑–¥–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è fan-out —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –¥–∞–Ω–Ω—ã—Ö
        /// </summary>
        public async Task<bool> ExecuteFanOutOperationAsync(IEnumerable<FanOutOperation> fanOutOperations)
        {
            if (fanOutOperations == null || !fanOutOperations.Any())
            {
                MyLogger.LogWarning("[BatchOperations] –ü–æ–ø—ã—Ç–∫–∞ fan-out —Å –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º –æ–ø–µ—Ä–∞—Ü–∏–π", MyLogger.LogCategory.Firebase);
                return true;
            }

            var operations = fanOutOperations.ToList();

            return await _performanceMonitor.TrackOperationAsync($"FanOutOperation({operations.Count})", async () =>
            {
                var updates = new Dictionary<string, object>();

                foreach (var operation in operations)
                {
                    if (string.IsNullOrEmpty(operation.Path))
                    {
                        MyLogger.LogWarning($"[BatchOperations] –ü—Ä–æ–ø—É—â–µ–Ω–∞ fan-out –æ–ø–µ—Ä–∞—Ü–∏—è —Å –ø—É—Å—Ç—ã–º –ø—É—Ç–µ–º: {operation.Description}", MyLogger.LogCategory.Firebase);
                        continue;
                    }

                    switch (operation.OperationType)
                    {
                        case FanOutOperationType.Set:
                        case FanOutOperationType.Update:
                            updates[operation.Path] = operation.Value;
                            break;

                        case FanOutOperationType.Delete:
                            updates[operation.Path] = null;
                            break;

                        case FanOutOperationType.Push:
                            // –î–ª—è Push –æ–ø–µ—Ä–∞—Ü–∏–π –Ω—É–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á
                            var pushKey = _databaseRef.Child(operation.Path).Push().Key;
                            updates[$"{operation.Path}/{pushKey}"] = operation.Value;
                            break;

                        default:
                            MyLogger.LogWarning($"[BatchOperations] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø fan-out –æ–ø–µ—Ä–∞—Ü–∏–∏: {operation.OperationType}", MyLogger.LogCategory.Firebase);
                            break;
                    }
                }

                MyLogger.Log($"üîÑ [BatchOperations] –í—ã–ø–æ–ª–Ω—è–µ–º fan-out –æ–ø–µ—Ä–∞—Ü–∏—é —Å {updates.Count} –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏", MyLogger.LogCategory.Firebase);
                return await UpdateMultipleRecordsAsync(updates);
            });
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        /// </summary>
        public async Task<Dictionary<string, object>> GetMultipleRecordsAsync(List<string> paths)
        {
            if (paths == null || !paths.Any())
            {
                MyLogger.LogWarning("[BatchOperations] –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º paths", MyLogger.LogCategory.Firebase);
                return new Dictionary<string, object>();
            }

            return await _performanceMonitor.TrackOperationAsync($"GetMultipleRecords({paths.Count})", async () =>
            {
                var results = new Dictionary<string, object>();

                // Firebase –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ get –≤ –æ–¥–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ,
                // –ø–æ—ç—Ç–æ–º—É –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
                var tasks = paths.Select(async path =>
                {
                    try
                    {
                        var snapshot = await _errorHandler.ExecuteWithRetryAsync(() => _databaseRef.Child(path).GetValueAsync());
                        return new { Path = path, Value = snapshot.Value };
                    }
                    catch (Exception ex)
                    {
                        MyLogger.LogError($"‚ùå [BatchOperations] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø—É—Ç–∏ '{path}': {ex.Message}", MyLogger.LogCategory.Firebase);
                        return new { Path = path, Value = (object)null };
                    }
                });

                var taskResults = await Task.WhenAll(tasks);

                foreach (var result in taskResults)
                {
                    results[result.Path] = result.Value;
                }

                MyLogger.Log($"‚úÖ [BatchOperations] –ü–æ–ª—É—á–µ–Ω–æ {results.Count} –∑–∞–ø–∏—Å–µ–π", MyLogger.LogCategory.Firebase);
                return results;
            });
        }

        #endregion

        #region Private Methods

        /// <summary>
        /// –†–∞–∑–±–∏–≤–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–∞ –±–∞—Ç—á–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å MaxBatchSize
        /// </summary>
        private List<Dictionary<string, object>> SplitIntoBatches(Dictionary<string, object> updates)
        {
            var batches = new List<Dictionary<string, object>>();
            var currentBatch = new Dictionary<string, object>();

            foreach (var update in updates)
            {
                currentBatch[update.Key] = update.Value;

                if (currentBatch.Count >= MaxBatchSize)
                {
                    batches.Add(currentBatch);
                    currentBatch = new Dictionary<string, object>();
                }
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–µ–ø–æ–ª–Ω—ã–π –±–∞—Ç—á
            if (currentBatch.Any())
            {
                batches.Add(currentBatch);
            }

            MyLogger.Log($"üîÑ [BatchOperations] –û–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–∑–±–∏—Ç—ã –Ω–∞ {batches.Count} –±–∞—Ç—á–µ–π (–º–∞–∫—Å. —Ä–∞–∑–º–µ—Ä: {MaxBatchSize})", MyLogger.LogCategory.Firebase);
            return batches;
        }

        #endregion
    }
}