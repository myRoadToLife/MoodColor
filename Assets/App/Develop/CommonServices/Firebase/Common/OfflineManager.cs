using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using App.Develop.Utils.Logging;

namespace App.Develop.CommonServices.Firebase.Common
{
    /// <summary>
    /// –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ Firebase –≤ offline —Ä–µ–∂–∏–º–µ
    /// </summary>
    public class OfflineManager : IOfflineManager
    {
        #region Fields

        private readonly Queue<IDatabaseOperation> _operationQueue;
        private readonly HashSet<string> _queuedOperationIds;
        private readonly object _queueLock = new object();
        private bool _isOnline = true;
        private bool _isProcessingQueue = false;

        #endregion

        #region Events

        /// <summary>
        /// –°–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        /// </summary>
        public event Action<bool> ConnectionStateChanged;

        /// <summary>
        /// –°–æ–±—ã—Ç–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
        /// </summary>
        public event Action<int> QueueProcessed;

        #endregion

        #region Properties

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        /// </summary>
        public bool IsOnline => _isOnline;

        /// <summary>
        /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏
        /// </summary>
        public int QueuedOperationsCount
        {
            get
            {
                lock (_queueLock)
                {
                    return _operationQueue.Count;
                }
            }
        }

        #endregion

        #region Constructor

        /// <summary>
        /// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä OfflineManager
        /// </summary>
        public OfflineManager()
        {
            _operationQueue = new Queue<IDatabaseOperation>();
            _queuedOperationIds = new HashSet<string>();

            MyLogger.Log("‚úÖ [OfflineManager] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", MyLogger.LogCategory.Firebase);
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é —Å —É—á–µ—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        /// </summary>
        /// <param name="operation">–û–ø–µ—Ä–∞—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</param>
        /// <returns>True, –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ</returns>
        public async Task<bool> ExecuteOperationAsync(IDatabaseOperation operation)
        {
            if (operation == null)
            {
                MyLogger.LogError("[OfflineManager] –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null", MyLogger.LogCategory.Firebase);
                return false;
            }

            if (_isOnline)
            {
                try
                {
                    MyLogger.Log($"üåê [OfflineManager] –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é online: {operation.Description}", MyLogger.LogCategory.Firebase);
                    return await operation.ExecuteAsync();
                }
                catch (Exception ex)
                {
                    MyLogger.LogError($"‚ùå [OfflineManager] –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ online: {ex.Message}", MyLogger.LogCategory.Firebase);

                    // –ï—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è failed online, —Å—Ç–∞–≤–∏–º –≤ –æ—á–µ—Ä–µ–¥—å
                    QueueOperation(operation);
                    return false;
                }
            }
            else
            {
                MyLogger.Log($"üì¥ [OfflineManager] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å—Ç–∞–≤–∏–º –≤ –æ—á–µ—Ä–µ–¥—å: {operation.Description}", MyLogger.LogCategory.Firebase);
                QueueOperation(operation);
                return false;
            }
        }

        /// <summary>
        /// –î–æ–±–∞–≤–ª—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        /// </summary>
        /// <param name="operation">–û–ø–µ—Ä–∞—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å</param>
        public void QueueOperation(IDatabaseOperation operation)
        {
            if (operation == null)
            {
                MyLogger.LogError("[OfflineManager] –û–ø–µ—Ä–∞—Ü–∏—è –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null", MyLogger.LogCategory.Firebase);
                return;
            }

            lock (_queueLock)
            {
                // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π
                if (_queuedOperationIds.Contains(operation.OperationId))
                {
                    MyLogger.Log($"‚ö†Ô∏è [OfflineManager] –û–ø–µ—Ä–∞—Ü–∏—è —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏: {operation.OperationId}", MyLogger.LogCategory.Firebase);
                    return;
                }

                _operationQueue.Enqueue(operation);
                _queuedOperationIds.Add(operation.OperationId);

                MyLogger.Log($"üìã [OfflineManager] –û–ø–µ—Ä–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å: {operation.Description} (–≤—Å–µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥–∏: {_operationQueue.Count})", MyLogger.LogCategory.Firebase);
            }
        }

        /// <summary>
        /// –û—á–∏—â–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å –æ–ø–µ—Ä–∞—Ü–∏–π
        /// </summary>
        public void ClearQueue()
        {
            lock (_queueLock)
            {
                int removedCount = _operationQueue.Count;
                _operationQueue.Clear();
                _queuedOperationIds.Clear();

                MyLogger.Log($"üóëÔ∏è [OfflineManager] –û—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞, —É–¥–∞–ª–µ–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {removedCount}", MyLogger.LogCategory.Firebase);
            }
        }

        /// <summary>
        /// –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        /// </summary>
        /// <param name="isConnected">–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</param>
        public void UpdateConnectionState(bool isConnected)
        {
            if (_isOnline != isConnected)
            {
                _isOnline = isConnected;
                MyLogger.Log($"üîÑ [OfflineManager] –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–æ: {(isConnected ? "ONLINE" : "OFFLINE")}", MyLogger.LogCategory.Firebase);

                ConnectionStateChanged?.Invoke(isConnected);

                if (isConnected)
                {
                    // –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                    _ = ProcessQueueAsync();
                }
            }
        }

        #endregion

        #region Private Methods

        /// <summary>
        /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å –æ–ø–µ—Ä–∞—Ü–∏–π –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        /// </summary>
        private async Task ProcessQueueAsync()
        {
            if (_isProcessingQueue)
            {
                MyLogger.Log("‚ö†Ô∏è [OfflineManager] –û—á–µ—Ä–µ–¥—å —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è", MyLogger.LogCategory.Firebase);
                return;
            }

            _isProcessingQueue = true;

            try
            {
                int processedCount = 0;
                int totalOperations;

                lock (_queueLock)
                {
                    totalOperations = _operationQueue.Count;
                }

                if (totalOperations > 0)
                {
                    MyLogger.Log($"üîÑ [OfflineManager] –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏ –æ–ø–µ—Ä–∞—Ü–∏–π, –≤—Å–µ–≥–æ: {totalOperations}", MyLogger.LogCategory.Firebase);
                }

                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
                var operationsToProcess = new List<IDatabaseOperation>();

                lock (_queueLock)
                {
                    while (_operationQueue.Count > 0)
                    {
                        operationsToProcess.Add(_operationQueue.Dequeue());
                    }
                    _queuedOperationIds.Clear();
                }

                // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–µ—Ä–≤—ã–º)
                operationsToProcess = operationsToProcess.OrderByDescending(op => op.Priority).ToList();

                foreach (var operation in operationsToProcess)
                {
                    if (!_isOnline)
                    {
                        MyLogger.Log("üì¥ [OfflineManager] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º", MyLogger.LogCategory.Firebase);

                        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –æ—á–µ—Ä–µ–¥—å
                        for (int i = processedCount; i < operationsToProcess.Count; i++)
                        {
                            QueueOperation(operationsToProcess[i]);
                        }
                        break;
                    }

                    try
                    {
                        MyLogger.Log($"üîÑ [OfflineManager] –í—ã–ø–æ–ª–Ω—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏: {operation.Description}", MyLogger.LogCategory.Firebase);
                        bool success = await operation.ExecuteAsync();

                        if (success)
                        {
                            processedCount++;
                            MyLogger.Log($"‚úÖ [OfflineManager] –û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ: {operation.Description}", MyLogger.LogCategory.Firebase);
                        }
                        else
                        {
                            MyLogger.LogError($"‚ùå [OfflineManager] –û–ø–µ—Ä–∞—Ü–∏—è failed, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ—á–µ—Ä–µ–¥—å: {operation.Description}", MyLogger.LogCategory.Firebase);
                            QueueOperation(operation);
                        }
                    }
                    catch (Exception ex)
                    {
                        MyLogger.LogError($"‚ùå [OfflineManager] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏: {operation.Description}, –æ—à–∏–±–∫–∞: {ex.Message}", MyLogger.LogCategory.Firebase);
                        QueueOperation(operation); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    }

                    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
                    await Task.Delay(100);
                }

                if (processedCount > 0)
                {
                    MyLogger.Log($"‚úÖ [OfflineManager] –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {processedCount}/{totalOperations}", MyLogger.LogCategory.Firebase);
                    QueueProcessed?.Invoke(processedCount);
                }
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå [OfflineManager] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏: {ex.Message}", MyLogger.LogCategory.Firebase);
            }
            finally
            {
                _isProcessingQueue = false;
            }
        }

        #endregion
    }
}