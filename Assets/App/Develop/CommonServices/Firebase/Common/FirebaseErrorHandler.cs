using System;
using System.Threading.Tasks;
using Firebase;
using App.Develop.Utils.Logging;
using Firebase.Database;

namespace App.Develop.CommonServices.Firebase.Common
{
    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ Firebase —Å retry –ª–æ–≥–∏–∫–æ–π –∏ exponential backoff
    /// </summary>
    public class FirebaseErrorHandler : IFirebaseErrorHandler
    {
        #region Constants

        private const int DefaultMaxRetries = 3;
        private const int BaseDelayMs = 1000; // 1 —Å–µ–∫—É–Ω–¥–∞ –±–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        private const int MaxDelayMs = 30000; // 30 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞

        #endregion

        #region Public Methods

        /// <summary>
        /// –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
        /// </summary>
        /// <typeparam name="T">–¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏</typeparam>
        /// <param name="operation">–û–ø–µ—Ä–∞—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</param>
        /// <param name="maxRetries">–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫</param>
        /// <param name="operationDescription">–û–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è</param>
        /// <returns>–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏</returns>
        public async Task<T> ExecuteWithRetryAsync<T>(Func<Task<T>> operation, int maxRetries = DefaultMaxRetries, string operationDescription = "Unknown operation")
        {
            if (operation == null)
                throw new ArgumentNullException(nameof(operation));

            Exception lastException = null;

            for (int attempt = 0; attempt <= maxRetries; attempt++)
            {
                try
                {
                    if (attempt > 0)
                    {
                        MyLogger.Log($"üîÑ [FirebaseErrorHandler] –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{maxRetries + 1} –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏: {operationDescription}", MyLogger.LogCategory.Firebase);
                    }

                    var result = await operation();

                    if (attempt > 0)
                    {
                        MyLogger.Log($"‚úÖ [FirebaseErrorHandler] –û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}: {operationDescription}", MyLogger.LogCategory.Firebase);
                    }

                    return result;
                }
                catch (Exception ex)
                {
                    lastException = ex;

                    if (!IsRetryableError(ex))
                    {
                        MyLogger.LogError($"‚ùå [FirebaseErrorHandler] –ù–µ–ø–æ–≤—Ç–æ—Ä—è–µ–º–∞—è –æ—à–∏–±–∫–∞: {operationDescription}, –æ—à–∏–±–∫–∞: {ex.Message}", MyLogger.LogCategory.Firebase);
                        throw;
                    }

                    if (attempt == maxRetries)
                    {
                        MyLogger.LogError($"‚ùå [FirebaseErrorHandler] –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏: {operationDescription}, –ø–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {ex.Message}", MyLogger.LogCategory.Firebase);
                        break;
                    }

                    var delay = CalculateDelay(attempt);
                    MyLogger.Log($"‚è≥ [FirebaseErrorHandler] –û—à–∏–±–∫–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}, –∂–¥–µ–º {delay.TotalSeconds:F1}—Å –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º: {ex.Message}", MyLogger.LogCategory.Firebase);

                    await Task.Delay(delay);
                }
            }

            throw lastException ?? new InvalidOperationException($"–û–ø–µ—Ä–∞—Ü–∏—è {operationDescription} –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ—Å–ª–µ {maxRetries + 1} –ø–æ–ø—ã—Ç–æ–∫");
        }

        /// <summary>
        /// –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é –±–µ–∑ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        /// </summary>
        /// <param name="operation">–û–ø–µ—Ä–∞—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</param>
        /// <param name="maxRetries">–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫</param>
        /// <param name="operationDescription">–û–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è</param>
        /// <returns>True, –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ</returns>
        public async Task<bool> ExecuteWithRetryAsync(Func<Task> operation, int maxRetries = DefaultMaxRetries, string operationDescription = "Unknown operation")
        {
            try
            {
                await ExecuteWithRetryAsync(async () =>
                {
                    await operation();
                    return true; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
                }, maxRetries, operationDescription);

                return true;
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå [FirebaseErrorHandler] –û–ø–µ—Ä–∞—Ü–∏—è –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –Ω–µ—É–¥–∞—á–Ω–∞: {operationDescription}, –æ—à–∏–±–∫–∞: {ex.Message}", MyLogger.LogCategory.Firebase);
                return false;
            }
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä—è–µ–º–æ–π
        /// </summary>
        /// <param name="exception">–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏</param>
        /// <returns>True, –µ—Å–ª–∏ –æ—à–∏–±–∫—É –º–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å</returns>
        public bool IsRetryableError(Exception exception)
        {
            if (exception == null)
                return false;

            // Firebase Database —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏
            if (exception is FirebaseException firebaseEx)
            {
                MyLogger.Log($"üîç [FirebaseErrorHandler] –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º Firebase –æ—à–∏–±–∫—É: ErrorCode={firebaseEx.ErrorCode}, Message={firebaseEx.Message}", MyLogger.LogCategory.Firebase);

                // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ —Å–µ—Ç–∏ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞ –º–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
                switch (firebaseEx.ErrorCode)
                {
                    case (int)DatabaseError.NetworkError:
                    case (int)DatabaseError.Unavailable:
                    case (int)DatabaseError.Disconnected:
                        MyLogger.Log($"üîÑ [FirebaseErrorHandler] –ü–æ–≤—Ç–æ—Ä—è–µ–º–∞—è Firebase –æ—à–∏–±–∫–∞: {firebaseEx.ErrorCode}", MyLogger.LogCategory.Firebase);
                        return true;

                    // –û—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–≤—Ç–æ—Ä—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ
                    case (int)DatabaseError.PermissionDenied:
                    case (int)DatabaseError.InvalidToken:
                    case (int)DatabaseError.ExpiredToken:
                        MyLogger.Log($"‚ùå [FirebaseErrorHandler] –ù–µ–ø–æ–≤—Ç–æ—Ä—è–µ–º–∞—è Firebase –æ—à–∏–±–∫–∞: {firebaseEx.ErrorCode}", MyLogger.LogCategory.Firebase);
                        return false;

                    default:
                        // –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫ Firebase –ª—É—á—à–µ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å
                        MyLogger.Log($"‚ö†Ô∏è [FirebaseErrorHandler] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è Firebase –æ—à–∏–±–∫–∞, –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º: {firebaseEx.ErrorCode}", MyLogger.LogCategory.Firebase);
                        return false;
                }
            }

            // –û–±—â–∏–µ —Å–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏
            if (exception is System.Net.WebException ||
                exception is System.Net.Http.HttpRequestException ||
                exception is TaskCanceledException ||
                exception is TimeoutException)
            {
                MyLogger.Log($"üîÑ [FirebaseErrorHandler] –ü–æ–≤—Ç–æ—Ä—è–µ–º–∞—è —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {exception.GetType().Name}", MyLogger.LogCategory.Firebase);
                return true;
            }

            // OperationCanceledException –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–∞ —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏
            if (exception is OperationCanceledException)
            {
                MyLogger.Log($"üîÑ [FirebaseErrorHandler] –ü–æ–≤—Ç–æ—Ä—è–µ–º–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏: {exception.Message}", MyLogger.LogCategory.Firebase);
                return true;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            var errorMessage = exception.Message?.ToLower() ?? "";
            if (errorMessage.Contains("network") ||
                errorMessage.Contains("timeout") ||
                errorMessage.Contains("connection") ||
                errorMessage.Contains("unavailable"))
            {
                MyLogger.Log($"üîÑ [FirebaseErrorHandler] –ü–æ–≤—Ç–æ—Ä—è–µ–º–∞—è –æ—à–∏–±–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: {exception.Message}", MyLogger.LogCategory.Firebase);
                return true;
            }

            // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º
            MyLogger.Log($"‚ùå [FirebaseErrorHandler] –ù–µ–ø–æ–≤—Ç–æ—Ä—è–µ–º–∞—è –æ—à–∏–±–∫–∞: {exception.GetType().Name} - {exception.Message}", MyLogger.LogCategory.Firebase);
            return false;
        }

        /// <summary>
        /// –í—ã—á–∏—Å–ª—è–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º exponential backoff
        /// </summary>
        /// <param name="attemptNumber">–ù–æ–º–µ—Ä –ø–æ–ø—ã—Ç–∫–∏ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0)</param>
        /// <returns>–í—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏</returns>
        public TimeSpan CalculateDelay(int attemptNumber)
        {
            if (attemptNumber < 0)
                return TimeSpan.Zero;

            // Exponential backoff: 1s, 2s, 4s, 8s, 16s...
            var delayMs = BaseDelayMs * Math.Pow(2, attemptNumber);

            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É
            delayMs = Math.Min(delayMs, MaxDelayMs);

            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π —Å–ª—É—á–∞–π–Ω—ã–π jitter (¬±20%) –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è thundering herd
            var random = new Random();
            var jitterFactor = 0.8 + (random.NextDouble() * 0.4); // 0.8 - 1.2
            delayMs *= jitterFactor;

            return TimeSpan.FromMilliseconds(delayMs);
        }

        #endregion
    }
}