using System;
using System.Threading.Tasks;
using Firebase;
using Firebase.Database;
using App.Develop.Utils.Logging;

namespace App.Develop.CommonServices.Firebase.Common
{
    /// <summary>
    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä Firebase —Å —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –∏ offline capabilities
    /// </summary>
    public class FirebaseInitializer : IFirebaseInitializer
    {
        #region Fields

        private bool _isConnected = false;
        private DatabaseReference _connectedRef;
        private IOfflineManager _offlineManager;

        #endregion

        #region Constructor

        /// <summary>
        /// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä FirebaseInitializer
        /// </summary>
        public FirebaseInitializer()
        {
            // OfflineManager –±—É–¥–µ—Ç –≤–Ω–µ–¥—Ä–µ–Ω –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ SetOfflineManager
        }

        /// <summary>
        /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç OfflineManager –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        /// </summary>
        /// <param name="offlineManager">–ú–µ–Ω–µ–¥–∂–µ—Ä offline –æ–ø–µ—Ä–∞—Ü–∏–π</param>
        public void SetOfflineManager(IOfflineManager offlineManager)
        {
            _offlineManager = offlineManager;
            MyLogger.Log("‚úÖ [FirebaseInitializer] OfflineManager —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", MyLogger.LogCategory.Bootstrap);
        }

        #endregion

        #region Events

        /// <summary>
        /// –°–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        /// </summary>
        public event System.Action<bool> ConnectionStateChanged;

        #endregion

        #region Properties

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Firebase
        /// </summary>
        public bool IsConnected => _isConnected;

        #endregion

        #region Public Methods

        /// <summary>
        /// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Firebase —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ª—É—á—à–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫
        /// </summary>
        /// <returns>True, –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ</returns>
        public async Task<bool> InitializeAsync()
        {
            try
            {
                MyLogger.Log("üî• [FirebaseInitializer] –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é Firebase...", MyLogger.LogCategory.Bootstrap);

                MyLogger.Log("üîç [FirebaseInitializer] –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Firebase...", MyLogger.LogCategory.Bootstrap);
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Firebase
                var dependencyStatus = await FirebaseApp.CheckAndFixDependenciesAsync();

                if (dependencyStatus != DependencyStatus.Available)
                {
                    MyLogger.LogError($"‚ùå [FirebaseInitializer] Firebase –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {dependencyStatus}", MyLogger.LogCategory.Bootstrap);
                    return false;
                }

                MyLogger.Log("‚úÖ [FirebaseInitializer] Firebase –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ", MyLogger.LogCategory.Bootstrap);

                MyLogger.Log("üîç [FirebaseInitializer] –ü–æ–ª—É—á–∞–µ–º default instance Firebase Database...", MyLogger.LogCategory.Bootstrap);
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º default app (–ª—É—á—à–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞)
                // Firebase –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –∏–∑ google-services.json
                var defaultInstance = FirebaseDatabase.DefaultInstance;

                if (defaultInstance == null)
                {
                    MyLogger.LogError("‚ùå [FirebaseInitializer] FirebaseDatabase.DefaultInstance –≤–µ—Ä–Ω—É–ª null", MyLogger.LogCategory.Bootstrap);
                    return false;
                }

                MyLogger.Log("‚úÖ [FirebaseInitializer] Firebase Database DefaultInstance –ø–æ–ª—É—á–µ–Ω", MyLogger.LogCategory.Bootstrap);

                MyLogger.Log("üîç [FirebaseInitializer] –í–∫–ª—é—á–∞–µ–º persistence...", MyLogger.LogCategory.Bootstrap);
                // –í–∫–ª—é—á–∞–µ–º persistence –¥–ª—è offline —Ä–∞–±–æ—Ç—ã
                defaultInstance.SetPersistenceEnabled(true);
                MyLogger.Log("‚úÖ [FirebaseInitializer] Firebase persistence –≤–∫–ª—é—á–µ–Ω", MyLogger.LogCategory.Bootstrap);

                MyLogger.Log("üîç [FirebaseInitializer] –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º offline capabilities...", MyLogger.LogCategory.Bootstrap);
                // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º offline capabilities
                SetupOfflineCapabilities();

                MyLogger.Log("‚úÖ [FirebaseInitializer] Firebase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ (–∏—Å–ø–æ–ª—å–∑—É—è default app)", MyLogger.LogCategory.Bootstrap);
                return true;
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå [FirebaseInitializer] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase: {ex.Message}", MyLogger.LogCategory.Bootstrap);
                MyLogger.LogError($"‚ùå [FirebaseInitializer] StackTrace: {ex.StackTrace}", MyLogger.LogCategory.Bootstrap);
                return false;
            }
        }

        #endregion

        #region Private Methods

        /// <summary>
        /// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç offline capabilities –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        /// </summary>
        private void SetupOfflineCapabilities()
        {
            try
            {
                // keepSynced –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                var database = FirebaseDatabase.DefaultInstance;

                // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —É–∑–ª—ã –¥–∞–Ω–Ω—ã—Ö
                database.GetReference("users").KeepSynced(true);
                database.GetReference("emotions").KeepSynced(true);
                database.GetReference("jars").KeepSynced(true);

                MyLogger.Log("‚úÖ KeepSynced –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", MyLogger.LogCategory.Bootstrap);

                // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                SetupConnectionStateMonitoring();
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ offline capabilities: {ex.Message}", MyLogger.LogCategory.Bootstrap);
            }
        }

        /// <summary>
        /// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        /// </summary>
        private void SetupConnectionStateMonitoring()
        {
            try
            {
                // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                _connectedRef = FirebaseDatabase.DefaultInstance.GetReference(".info/connected");
                _connectedRef.ValueChanged += OnConnectionStateChanged;

                MyLogger.Log("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω", MyLogger.LogCategory.Bootstrap);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {ex.Message}", MyLogger.LogCategory.Bootstrap);
            }
        }

        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        /// </summary>
        private void OnConnectionStateChanged(object sender, ValueChangedEventArgs args)
        {
            if (args.DatabaseError != null)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {args.DatabaseError.Message}", MyLogger.LogCategory.Firebase);
                return;
            }

            bool connected = args.Snapshot.Value != null && (bool)args.Snapshot.Value;

            if (_isConnected != connected)
            {
                _isConnected = connected;

                if (connected)
                {
                    MyLogger.Log("üü¢ Firebase –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", MyLogger.LogCategory.Firebase);
                }
                else
                {
                    MyLogger.Log("üî¥ Firebase –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ", MyLogger.LogCategory.Firebase);
                }

                // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å OfflineManager
                if (_offlineManager != null)
                {
                    _offlineManager.UpdateConnectionState(_isConnected);
                }

                // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                ConnectionStateChanged?.Invoke(_isConnected);
            }
        }

        #endregion
    }
}