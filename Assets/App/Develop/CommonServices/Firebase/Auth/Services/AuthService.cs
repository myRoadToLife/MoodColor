// Assets/App/Develop/AppServices/Firebase/Auth/Services/AuthService.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using App.Develop.CommonServices.Firebase.Database.Services;
using App.Develop.CommonServices.Firebase.Database.Models;
using Firebase;
using Firebase.Auth;
using UnityEngine;
using App.Develop.CommonServices.Firebase.Common.SecureStorage;
using App.Develop.Utils.Logging;
using Google;

namespace App.Develop.CommonServices.Firebase.Auth.Services
{
    public class AuthService : IAuthService
    {
        private readonly FirebaseAuth _auth;
        private readonly DatabaseService _databaseService;
        private readonly ValidationService _validationService;
        private Dictionary<string, DateTime> _lastEmailSentTime = new Dictionary<string, DateTime>();
        private const int MIN_EMAIL_INTERVAL_SECONDS = 60; // 1 –º–∏–Ω—É—Ç–∞ –º–µ–∂–¥—É –ø–∏—Å—å–º–∞–º–∏

        public AuthService(
            FirebaseAuth auth,
            DatabaseService databaseService,
            ValidationService validationService)
        {
            _auth = auth ?? throw new ArgumentNullException(nameof(auth));
            _databaseService = databaseService ?? throw new ArgumentNullException(nameof(databaseService));
            _validationService = validationService ?? throw new ArgumentNullException(nameof(validationService));
        }

        public async Task<(bool success, string error)> RegisterUser(string email, string password)
        {
            try
            {
                var result = await _auth.CreateUserWithEmailAndPasswordAsync(email, password);

                if (result?.User == null)
                {
                    return (false, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
                }

                _databaseService.UpdateUserId(result.User.UserId);
                await _databaseService.CreateNewUser(result.User.UserId, email);

                try
                {
                    await result.User.SendEmailVerificationAsync();
                    MyLogger.Log("üìß –ü–∏—Å—å–º–æ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", MyLogger.LogCategory.Firebase);
                }
                catch (Exception emailEx)
                {
                    MyLogger.LogError($"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ: {emailEx.Message}", MyLogger.LogCategory.Firebase);
                    return (false, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º email");
                }

                return (true, null);
            }
            catch (FirebaseException ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {ex.Message}", MyLogger.LogCategory.Firebase);
                return (false, GetFriendlyErrorMessage(ex));
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"üî¥ –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {ex}", MyLogger.LogCategory.Firebase);
                return (false, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞");
            }
        }


        public async Task<(bool success, string error)> LoginUser(string email, string password)
        {
            try
            {
                MyLogger.Log($"üîë [AUTH-LOGIN] –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—Ö–æ–¥–∞ –¥–ª—è: {email}", MyLogger.LogCategory.Firebase);
                
                var result = await _auth.SignInWithEmailAndPasswordAsync(email, password);

                if (result?.User == null)
                {
                    MyLogger.LogError("‚ùå [AUTH-LOGIN] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–≤–µ–Ω null –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞", MyLogger.LogCategory.Firebase);
                    return (false, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ");
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ—Ä–≤–∏—Å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                _databaseService.UpdateUserId(result.User.UserId);
                MyLogger.Log($"üîë [AUTH-LOGIN] UserId –æ–±–Ω–æ–≤–ª–µ–Ω: {result.User.UserId.Substring(0, Math.Min(8, result.User.UserId.Length))}...", MyLogger.LogCategory.Firebase);

                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
                await result.User.ReloadAsync();
                MyLogger.Log($"üîë [AUTH-LOGIN] –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã", MyLogger.LogCategory.Firebase);

                if (!result.User.IsEmailVerified)
                {
                    MyLogger.LogWarning($"‚ö†Ô∏è [AUTH-LOGIN] Email –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: {email}", MyLogger.LogCategory.Firebase);
                    return (false, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ email");
                }

                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                string currentDeviceId = ActiveSessionData.GetCurrentDeviceId();
                
                // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                MyLogger.Log($"üîë [AUTH-LOGIN] –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ID: {currentDeviceId}", MyLogger.LogCategory.Firebase);
                
                if (string.IsNullOrEmpty(currentDeviceId))
                {
                    MyLogger.LogError("‚ùå [AUTH-LOGIN] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", MyLogger.LogCategory.Firebase);
                    return (false, "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ");
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è —Å –¥—Ä—É–≥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                MyLogger.Log($"üîë [AUTH-LOGIN] –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π —Å –¥—Ä—É–≥–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤", MyLogger.LogCategory.Firebase);
                bool sessionExists = await _databaseService.CheckActiveSessionExists(currentDeviceId);
                
                if (sessionExists)
                {
                    MyLogger.Log($"‚ö†Ô∏è [AUTH-LOGIN] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è —Å –¥—Ä—É–≥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {result.User.Email}", MyLogger.LogCategory.Firebase);
                    
                    // –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –æ–Ω–∞ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É, –∑–∞–ø—Ä–µ—â–∞–µ–º –≤—Ö–æ–¥
                    // –°–Ω–∞—á–∞–ª–∞ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Å—Ç–∞–ª—Å—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º
                    _auth.SignOut();
                    _databaseService.UpdateUserId(null);
                    
                    return (false, "–í—ã —É–∂–µ –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç —Å –¥—Ä—É–≥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–π–¥–∏—Ç–µ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ –¥—Ä—É–≥–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.");
                }

                // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                MyLogger.Log($"üîë [AUTH-LOGIN] –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {currentDeviceId}", MyLogger.LogCategory.Firebase);
                bool sessionRegistered = await _databaseService.RegisterActiveSession();
                
                if (!sessionRegistered)
                {
                    MyLogger.LogError("‚ùå [AUTH-LOGIN] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é", MyLogger.LogCategory.Firebase);
                    // –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—Ö–æ–¥, –¥–∞–∂–µ –µ—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ –Ω–µ —É–¥–∞–ª–∞—Å—å
                }

                MyLogger.Log($"‚úÖ [AUTH-LOGIN] –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {result.User.Email} —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {currentDeviceId}", MyLogger.LogCategory.Firebase);
                return (true, null);
            }
            catch (FirebaseException ex)
            {
                MyLogger.LogError($"‚ùå [AUTH-LOGIN] –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {ex.Message}", MyLogger.LogCategory.Firebase);
                return (false, GetFriendlyErrorMessage(ex));
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå [AUTH-LOGIN] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {ex.Message}", MyLogger.LogCategory.Firebase);
                MyLogger.LogError($"‚ùå [AUTH-LOGIN] Stack trace: {ex.StackTrace}", MyLogger.LogCategory.Firebase);
                return (false, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞");
            }
        }

        public async Task<bool> ResendVerificationEmail()
        {
            try
            {
                var user = _auth.CurrentUser;

                if (user == null)
                {
                    MyLogger.LogWarning("‚ö†Ô∏è –ù–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏", MyLogger.LogCategory.Firebase);
                    return false;
                }

                string emailType = "verification"; // –∏–ª–∏ "reset"
                string key = $"{user.Email}_{emailType}";
                
                if (_lastEmailSentTime.TryGetValue(key, out DateTime lastTime))
                {
                    var timeSince = DateTime.Now - lastTime;
                    if (timeSince.TotalSeconds < MIN_EMAIL_INTERVAL_SECONDS)
                    {
                        MyLogger.LogWarning($"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –ø–∏—Å–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {MIN_EMAIL_INTERVAL_SECONDS - (int)timeSince.TotalSeconds} —Å–µ–∫—É–Ω–¥", MyLogger.LogCategory.Firebase);
                        return false;
                    }
                }
                
                // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                _lastEmailSentTime[key] = DateTime.Now;

                await user.SendEmailVerificationAsync();
                MyLogger.Log("‚úÖ –ü–∏—Å—å–º–æ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", MyLogger.LogCategory.Firebase);
                return true;
            }
            catch (Exception ex)
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∏–∑-–∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                if (ex.Message.Contains("blocked") && ex.Message.Contains("unusual activity"))
                {
                    // –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –Ω–æ Firebase —Å–æ–æ–±—â–∞–µ—Ç –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
                    MyLogger.LogWarning($"‚ö†Ô∏è –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –Ω–æ Firebase —Å–æ–æ–±—â–∞–µ—Ç –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ: {ex.Message}", MyLogger.LogCategory.Firebase);
                    return true; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true, —Ç–∞–∫ –∫–∞–∫ –ø–∏—Å—å–º–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                }
                
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞: {ex.Message}", MyLogger.LogCategory.Firebase);
                return false;
            }
        }

        public async Task<bool> IsEmailVerified()
        {
            try
            {
                var user = _auth.CurrentUser;

                if (user == null)
                {
                    MyLogger.LogWarning("‚ö†Ô∏è –ù–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏", MyLogger.LogCategory.Firebase);
                    return false;
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                await user.ReloadAsync();
                return user.IsEmailVerified;
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ email: {ex.Message}", MyLogger.LogCategory.Firebase);
                return false;
            }
        }

        public async Task<bool> ResetPassword(string email)
        {
            try
            {
                if (string.IsNullOrEmpty(email))
                {
                    MyLogger.LogWarning("‚ö†Ô∏è Email –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º", MyLogger.LogCategory.Firebase);
                    return false;
                }

                string emailType = "reset"; // –∏–ª–∏ "verification"
                string key = $"{email}_{emailType}";
                
                if (_lastEmailSentTime.TryGetValue(key, out DateTime lastTime))
                {
                    var timeSince = DateTime.Now - lastTime;
                    if (timeSince.TotalSeconds < MIN_EMAIL_INTERVAL_SECONDS)
                    {
                        MyLogger.LogWarning($"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –ø–∏—Å–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {MIN_EMAIL_INTERVAL_SECONDS - (int)timeSince.TotalSeconds} —Å–µ–∫—É–Ω–¥", MyLogger.LogCategory.Firebase);
                        return false;
                    }
                }
                
                // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                _lastEmailSentTime[key] = DateTime.Now;

                await _auth.SendPasswordResetEmailAsync(email);
                MyLogger.Log($"‚úÖ –ü–∏—Å—å–º–æ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {email}", MyLogger.LogCategory.Firebase);
                return true;
            }
            catch (Exception ex)
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∏–∑-–∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                if (ex.Message.Contains("blocked") && ex.Message.Contains("unusual activity"))
                {
                    // –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –Ω–æ Firebase —Å–æ–æ–±—â–∞–µ—Ç –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
                    MyLogger.LogWarning($"‚ö†Ô∏è –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –Ω–æ Firebase —Å–æ–æ–±—â–∞–µ—Ç –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ: {ex.Message}", MyLogger.LogCategory.Firebase);
                    return true; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true, —Ç–∞–∫ –∫–∞–∫ –ø–∏—Å—å–º–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                }
                
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è: {ex.Message}", MyLogger.LogCategory.Firebase);
                return false;
            }
        }

        public async Task<(bool success, string error)> LoginWithGoogle()
        {
            try
            {
                // –°–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Firebase:
                // https://firebase.google.com/docs/auth/unity/google-signin?hl=ru
                // –î–ª—è Google Sign-In –≤ Unity –Ω—É–∂–Ω–æ:
                // 1. –°–ª–µ–¥–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è Android –∏ iOS+ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
                // 2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Google Play Games Services –∏–ª–∏ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
                // 3. –ó–∞—Ç–µ–º –æ–±–º–µ–Ω—è—Ç—å —Ç–æ–∫–µ–Ω—ã –Ω–∞ Firebase credentials
                return (false, "Google Sign-In —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Ö–æ–¥ –ø–æ email/–ø–∞—Ä–æ–ª—é.");
            }
            catch (Exception ex)
            {
                return (false, $"–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Google: {ex.Message}");
            }
        }



        public async Task SignOut()
        {
            try
            {
                MyLogger.Log($"üîë [AUTH-LOGOUT] –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã", MyLogger.LogCategory.Firebase);
                
                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
                string deviceId = ActiveSessionData.GetCurrentDeviceId();
                
                if (_auth.CurrentUser != null && !string.IsNullOrEmpty(deviceId))
                {
                    MyLogger.Log($"üîë [AUTH-LOGOUT] –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {deviceId}", MyLogger.LogCategory.Firebase);
                    
                    try
                    {
                        // –ó–¥–µ—Å—å –º—ã —è–≤–Ω–æ –æ—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–µ—Å—Å–∏—é —Ç–µ–∫—É—â–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                        bool sessionCleared = await _databaseService.ClearActiveSession(deviceId);
                        MyLogger.Log($"üîë [AUTH-LOGOUT] –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–∏: {(sessionCleared ? "–£—Å–ø–µ—à–Ω–æ" : "–ù–µ—É–¥–∞—á–Ω–æ")}", MyLogger.LogCategory.Firebase);
                    }
                    catch (Exception sessionEx)
                    {
                        MyLogger.LogError($"‚ùå [AUTH-LOGOUT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–µ—Å—Å–∏–∏: {sessionEx.Message}", MyLogger.LogCategory.Firebase);
                        MyLogger.LogError($"‚ùå [AUTH-LOGOUT] Stack trace: {sessionEx.StackTrace}", MyLogger.LogCategory.Firebase);
                        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—ã—Ö–æ–¥–∞, –¥–∞–∂–µ –µ—Å–ª–∏ –æ—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏ –Ω–µ —É–¥–∞–ª–∞—Å—å
                    }
                }
                else
                {
                    MyLogger.LogWarning($"‚ö†Ô∏è [AUTH-LOGOUT] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Å–µ—Å—Å–∏–∏: CurrentUser={_auth.CurrentUser != null}, DeviceId={deviceId}", MyLogger.LogCategory.Firebase);
                }

                // –í—ã—Ö–æ–¥–∏–º –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ Firebase
                _auth.SignOut();
                MyLogger.Log($"üîë [AUTH-LOGOUT] Firebase SignOut –≤—ã–ø–æ–ª–Ω–µ–Ω", MyLogger.LogCategory.Firebase);
                
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º UserId –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                _databaseService.UpdateUserId(null);
                MyLogger.Log($"üîë [AUTH-LOGOUT] UserId —Å–±—Ä–æ—à–µ–Ω", MyLogger.LogCategory.Firebase);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–ª–∞–≥ —è–≤–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞
                SecurePlayerPrefs.SetBool("explicit_logout", true);
                SecurePlayerPrefs.Save();
                
                MyLogger.Log("‚úÖ [AUTH-LOGOUT] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞", MyLogger.LogCategory.Firebase);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå [AUTH-LOGOUT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞: {ex.Message}", MyLogger.LogCategory.Firebase);
                MyLogger.LogError($"‚ùå [AUTH-LOGOUT] Stack trace: {ex.StackTrace}", MyLogger.LogCategory.Firebase);
            }
        }


        private string GetFriendlyErrorMessage(Exception ex)
        {
            // –í Firebase SDK –¥–ª—è Unity, –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ–± –æ—à–∏–±–∫–µ –æ–±—ã—á–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –∫–æ–¥ –æ—à–∏–±–∫–∏
            string message = ex.Message.ToLower();

            if (message.Contains("invalid_email")) return "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email";
            if (message.Contains("wrong_password")) return "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å";
            if (message.Contains("user_not_found")) return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω";
            if (message.Contains("user_disabled")) return "–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω";
            if (message.Contains("too_many_requests")) return "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ";
            if (message.Contains("operation_not_allowed")) return "–í—Ö–æ–¥ —Å email/–ø–∞—Ä–æ–ª–µ–º –æ—Ç–∫–ª—é—á–µ–Ω";
            if (message.Contains("requires_recent_login")) return "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥";
            if (message.Contains("weak_password")) return "–°–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç–æ–π –ø–∞—Ä–æ–ª—å";
            if (message.Contains("email_already_in_use")) return "Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è";

            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ";
        }
    }
}

