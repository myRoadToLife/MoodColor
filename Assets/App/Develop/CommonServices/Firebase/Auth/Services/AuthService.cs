// Assets/App/Develop/AppServices/Firebase/Auth/Services/AuthService.cs

using System;
using System.Collections.Generic;
using App.Develop.CommonServices.Firebase.Database.Services;
using Firebase;
using Firebase.Auth;
using System.Threading.Tasks;
using UnityEngine;
using App.Develop.CommonServices.Firebase.Common.SecureStorage;
using App.Develop.Utils.Logging;

namespace App.Develop.CommonServices.Firebase.Auth.Services
{
    public class AuthService : IAuthService
    {
        private readonly FirebaseAuth _auth;
        private readonly DatabaseService _databaseService;
        private readonly ValidationService _validationService;
        private Dictionary<string, DateTime> _lastEmailSentTime = new Dictionary<string, DateTime>();
        private const int MIN_EMAIL_INTERVAL_SECONDS = 60; // 1 –º–∏–Ω—É—Ç–∞ –º–µ–∂–¥—É –ø–∏—Å—å–º–∞–º–∏

        public AuthService(
            FirebaseAuth auth,
            DatabaseService databaseService,
            ValidationService validationService)
        {
            _auth = auth ?? throw new ArgumentNullException(nameof(auth));
            _databaseService = databaseService ?? throw new ArgumentNullException(nameof(databaseService));
            _validationService = validationService ?? throw new ArgumentNullException(nameof(validationService));
        }

        public async Task<(bool success, string error)> RegisterUser(string email, string password)
        {
            try
            {
                var result = await _auth.CreateUserWithEmailAndPasswordAsync(email, password);

                if (result?.User == null)
                {
                    return (false, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
                }

                _databaseService.UpdateUserId(result.User.UserId);
                await _databaseService.CreateNewUser(result.User.UserId, email);

                try
                {
                    await result.User.SendEmailVerificationAsync();
                    MyLogger.Log("üìß –ü–∏—Å—å–º–æ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", MyLogger.LogCategory.Firebase);
                }
                catch (Exception emailEx)
                {
                    MyLogger.LogError($"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ: {emailEx.Message}", MyLogger.LogCategory.Firebase);
                    return (false, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º email");
                }

                return (true, null);
            }
            catch (FirebaseException ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {ex.Message}", MyLogger.LogCategory.Firebase);
                return (false, GetFriendlyErrorMessage(ex));
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"üî¥ –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {ex}", MyLogger.LogCategory.Firebase);
                return (false, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞");
            }
        }


        public async Task<(bool success, string error)> LoginUser(string email, string password)
        {
            try
            {
                var result = await _auth.SignInWithEmailAndPasswordAsync(email, password);

                if (result?.User == null)
                {
                    return (false, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ");
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ—Ä–≤–∏—Å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                _databaseService.UpdateUserId(result.User.UserId);

                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
                await result.User.ReloadAsync();

                if (!result.User.IsEmailVerified)
                {
                    return (false, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ email");
                }

                return (true, null);
            }
            catch (FirebaseException ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {ex.Message}", MyLogger.LogCategory.Firebase);
                return (false, GetFriendlyErrorMessage(ex));
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {ex.Message}", MyLogger.LogCategory.Firebase);
                return (false, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞");
            }
        }

        public async Task<bool> ResendVerificationEmail()
        {
            try
            {
                var user = _auth.CurrentUser;

                if (user == null)
                {
                    MyLogger.LogWarning("‚ö†Ô∏è –ù–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏", MyLogger.LogCategory.Firebase);
                    return false;
                }

                string emailType = "verification"; // –∏–ª–∏ "reset"
                string key = $"{user.Email}_{emailType}";
                
                if (_lastEmailSentTime.TryGetValue(key, out DateTime lastTime))
                {
                    var timeSince = DateTime.Now - lastTime;
                    if (timeSince.TotalSeconds < MIN_EMAIL_INTERVAL_SECONDS)
                    {
                        MyLogger.LogWarning($"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –ø–∏—Å–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {MIN_EMAIL_INTERVAL_SECONDS - (int)timeSince.TotalSeconds} —Å–µ–∫—É–Ω–¥", MyLogger.LogCategory.Firebase);
                        return false;
                    }
                }
                
                // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                _lastEmailSentTime[key] = DateTime.Now;

                await user.SendEmailVerificationAsync();
                MyLogger.Log("‚úÖ –ü–∏—Å—å–º–æ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", MyLogger.LogCategory.Firebase);
                return true;
            }
            catch (Exception ex)
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∏–∑-–∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                if (ex.Message.Contains("blocked") && ex.Message.Contains("unusual activity"))
                {
                    // –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –Ω–æ Firebase —Å–æ–æ–±—â–∞–µ—Ç –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
                    MyLogger.LogWarning($"‚ö†Ô∏è –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –Ω–æ Firebase —Å–æ–æ–±—â–∞–µ—Ç –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ: {ex.Message}", MyLogger.LogCategory.Firebase);
                    return true; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true, —Ç–∞–∫ –∫–∞–∫ –ø–∏—Å—å–º–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                }
                
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞: {ex.Message}", MyLogger.LogCategory.Firebase);
                return false;
            }
        }

        public async Task<bool> IsEmailVerified()
        {
            try
            {
                var user = _auth.CurrentUser;

                if (user == null)
                {
                    MyLogger.LogWarning("‚ö†Ô∏è –ù–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏", MyLogger.LogCategory.Firebase);
                    return false;
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                await user.ReloadAsync();
                return user.IsEmailVerified;
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ email: {ex.Message}", MyLogger.LogCategory.Firebase);
                return false;
            }
        }

        public async Task<bool> ResetPassword(string email)
        {
            try
            {
                if (string.IsNullOrEmpty(email))
                {
                    MyLogger.LogWarning("‚ö†Ô∏è Email –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º", MyLogger.LogCategory.Firebase);
                    return false;
                }

                string emailType = "reset"; // –∏–ª–∏ "verification"
                string key = $"{email}_{emailType}";
                
                if (_lastEmailSentTime.TryGetValue(key, out DateTime lastTime))
                {
                    var timeSince = DateTime.Now - lastTime;
                    if (timeSince.TotalSeconds < MIN_EMAIL_INTERVAL_SECONDS)
                    {
                        MyLogger.LogWarning($"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –ø–∏—Å–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {MIN_EMAIL_INTERVAL_SECONDS - (int)timeSince.TotalSeconds} —Å–µ–∫—É–Ω–¥", MyLogger.LogCategory.Firebase);
                        return false;
                    }
                }
                
                // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                _lastEmailSentTime[key] = DateTime.Now;

                await _auth.SendPasswordResetEmailAsync(email);
                MyLogger.Log($"‚úÖ –ü–∏—Å—å–º–æ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {email}", MyLogger.LogCategory.Firebase);
                return true;
            }
            catch (Exception ex)
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∏–∑-–∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                if (ex.Message.Contains("blocked") && ex.Message.Contains("unusual activity"))
                {
                    // –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –Ω–æ Firebase —Å–æ–æ–±—â–∞–µ—Ç –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
                    MyLogger.LogWarning($"‚ö†Ô∏è –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –Ω–æ Firebase —Å–æ–æ–±—â–∞–µ—Ç –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ: {ex.Message}", MyLogger.LogCategory.Firebase);
                    return true; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true, —Ç–∞–∫ –∫–∞–∫ –ø–∏—Å—å–º–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                }
                
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è: {ex.Message}", MyLogger.LogCategory.Firebase);
                return false;
            }
        }
        

        public void SignOut()
        {
            try
            {
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —è–≤–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
                SecurePlayerPrefs.SetBool("explicit_logout", true);
                SecurePlayerPrefs.Save();
                MyLogger.Log("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥ —è–≤–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã", MyLogger.LogCategory.Firebase);
                
                _auth.SignOut();
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ—Ä–≤–∏—Å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                _databaseService.UpdateUserId(null);
                MyLogger.Log("‚úÖ –í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ", MyLogger.LogCategory.Firebase);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ: {ex.Message}", MyLogger.LogCategory.Firebase);
            }
        }


        private string GetFriendlyErrorMessage(Exception ex)
        {
            // –í Firebase SDK –¥–ª—è Unity, –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ–± –æ—à–∏–±–∫–µ –æ–±—ã—á–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –∫–æ–¥ –æ—à–∏–±–∫–∏
            string message = ex.Message.ToLower();

            if (message.Contains("invalid_email")) return "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email";
            if (message.Contains("wrong_password")) return "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å";
            if (message.Contains("user_not_found")) return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω";
            if (message.Contains("user_disabled")) return "–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω";
            if (message.Contains("too_many_requests")) return "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ";
            if (message.Contains("operation_not_allowed")) return "–í—Ö–æ–¥ —Å email/–ø–∞—Ä–æ–ª–µ–º –æ—Ç–∫–ª—é—á–µ–Ω";
            if (message.Contains("requires_recent_login")) return "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥";
            if (message.Contains("weak_password")) return "–°–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç–æ–π –ø–∞—Ä–æ–ª—å";
            if (message.Contains("email_already_in_use")) return "Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è";

            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ";
        }
    }
}
