// Assets/App/Develop/AppServices/Firebase/Auth/AuthManager.cs

using System;
using System.Threading.Tasks;
using App.Develop.CommonServices.Firebase.Auth.Services;
using App.Develop.CommonServices.Firebase.Common.SecureStorage;
using UnityEngine;
using App.Develop.AppServices.Auth;
using App.Develop.CommonServices.SceneManagement;
using App.Develop.DI;
using App.Develop.Utils.Logging;
using App.Develop.Scenes.PersonalAreaScene;
using Firebase.Auth;

namespace App.Develop.CommonServices.Firebase.Auth
{
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è AuthManager
    public interface IAuthManager
    {
        void Initialize(AuthUIController uiController);
        void RegisterUser(string email, string password, bool rememberMe);
        void LoginUser(string email, string password, bool rememberMe);
        void LoginWithGoogle();
        string GetLastUsedEmail();
        void CheckEmailVerification();
        void SendEmailVerification();
        void ClearStoredCredentials();
        void Logout();
    }

    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è AuthManager –∫–∞–∫ –æ–±—ã—á–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
    public class AuthManager : IAuthManager, IInjectable, IDisposable
    {
        private AuthUIController _uiController;
        private IAuthService _authService;
        private UserProfileService _profileService;
        private CredentialStorage _credentialStorage;
        private ValidationService _validationService;
        private SceneSwitcher _sceneSwitcher;
        private bool _isProcessing;

        // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è DI-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        public AuthManager()
        {
        }

        public void Inject(DIContainer container)
        {
            if (container == null)
                throw new ArgumentNullException(nameof(container));

            try
            {
                _sceneSwitcher = container.Resolve<SceneSwitcher>();
                _authService = container.Resolve<IAuthService>();
                _profileService = container.Resolve<UserProfileService>();
                _credentialStorage = container.Resolve<CredentialStorage>();
                _validationService = container.Resolve<ValidationService>();
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"üî¥ –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AuthManager: {ex}", MyLogger.LogCategory.Firebase);
            }
        }

        public void Initialize(AuthUIController uiController)
        {
            if (uiController == null)
                throw new ArgumentNullException(nameof(uiController));

            _uiController = uiController;
            _uiController.Initialize(this);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ Bootstrap –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è UX
            _uiController.ShowAuthPanel();

            var email = _credentialStorage.GetSavedEmail();
            var password = _credentialStorage.GetSavedPassword();
            var remember = _credentialStorage.IsRememberMeEnabled();
            _uiController.LoadSavedCredentials(email, password, remember);
        }

        public async void RegisterUser(string email, string password, bool rememberMe)
        {
            if (_isProcessing || _uiController == null) return;
            _isProcessing = true;

            try
            {
                if (!_validationService.IsValidEmail(email))
                {
                    _uiController.ShowPopup("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email");
                    _isProcessing = false;
                    return;
                }

                if (!_validationService.IsValidPassword(password))
                {
                    _uiController.ShowPopup("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 8‚Äì12 —Å–∏–º–≤–æ–ª–æ–≤, —Ü–∏—Ñ—Ä—ã, —Å—Ç—Ä–æ—á–Ω—ã–µ –∏ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã");
                    _isProcessing = false;
                    return;
                }

                var result = await _authService.RegisterUser(email, password);

                if (result.success)
                {
                    _credentialStorage.SaveCredentials(email, password, rememberMe);
                    await _authService.ResendVerificationEmail();
                    _uiController.ShowPopup("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ email.");
                    _uiController.ShowEmailVerificationPanel();
                }
                else
                {
                    _uiController.ShowPopup($"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {result.error}");
                }
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {ex}", MyLogger.LogCategory.Firebase);
                _uiController.ShowPopup("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
            }
            finally
            {
                _isProcessing = false;
            }
        }

        public async void LoginUser(string email, string password, bool rememberMe)
        {
            if (_isProcessing || _uiController == null) return;
            _isProcessing = true;

            try
            {
                if (!_validationService.IsValidEmail(email))
                {
                    _uiController.ShowPopup("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email");
                    _isProcessing = false;
                    return;
                }

                var result = await _authService.LoginUser(email, password);

                if (result.success)
                {
                    _credentialStorage.SaveCredentials(email, password, rememberMe);
                    SecurePlayerPrefs.SetBool("explicit_logout", false);
                    SecurePlayerPrefs.Save();
                    _uiController.ShowPopup("–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!");
                    _sceneSwitcher.ProcessSwitchSceneFor(new OutputAuthSceneArgs(new PersonalAreaInputArgs()));
                }
                else
                {
                    _uiController.ShowPopup($"–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {result.error}");
                }
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: {ex}", MyLogger.LogCategory.Firebase);
                _uiController.ShowPopup("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ");
            }
            finally
            {
                _isProcessing = false;
            }
        }

        public async void LoginWithGoogle()
        {
            Debug.Log("üü° [AUTH-MANAGER] –ù–∞—á–∏–Ω–∞–µ–º LoginWithGoogle()");
            if (_isProcessing || _uiController == null) 
            {
                Debug.Log("üî¥ [AUTH-MANAGER] –ü—Ä–æ—Ü–µ—Å—Å —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∏–ª–∏ UI –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä null");
                return;
            }
            _isProcessing = true;

            try
            {
                Debug.Log("üü° [AUTH-MANAGER] –í—ã–∑—ã–≤–∞–µ–º _authService.LoginWithGoogle()");
                var result = await _authService.LoginWithGoogle();

                if (result.success)
                {
                    SecurePlayerPrefs.SetBool("explicit_logout", false);
                    SecurePlayerPrefs.Save();
                    _uiController.ShowPopup("–í—Ö–æ–¥ —á–µ—Ä–µ–∑ Google –≤—ã–ø–æ–ª–Ω–µ–Ω!");
                    _sceneSwitcher.ProcessSwitchSceneFor(new OutputAuthSceneArgs(new PersonalAreaInputArgs()));
                }
                else
                {
                    _uiController.ShowPopup($"–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Google: {result.error}");
                }
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ —á–µ—Ä–µ–∑ Google: {ex}", MyLogger.LogCategory.Firebase);
                _uiController.ShowPopup("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ —á–µ—Ä–µ–∑ Google");
            }
            finally
            {
                _isProcessing = false;
            }
        }

        public string GetLastUsedEmail()
        {
            try
            {
                return _credentialStorage.GetLastUsedEmail();
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ email: {ex}", MyLogger.LogCategory.Firebase);
                return string.Empty;
            }
        }

        public async void CheckEmailVerification()
        {
            if (_isProcessing || _uiController == null) return;
            _isProcessing = true;

            try
            {
                var isVerified = await _authService.IsEmailVerified();

                if (isVerified)
                {
                    _uiController.ShowPopup("Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!");
                    _uiController.ShowProfilePanel();
                }
                else
                {
                    _uiController.ShowPopup("Email –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É.");
                }
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ email: {ex}", MyLogger.LogCategory.Firebase);
                _uiController.ShowPopup("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ email");
            }
            finally
            {
                _isProcessing = false;
            }
        }

        public async void SendEmailVerification()
        {
            if (_isProcessing || _uiController == null) return;
            _isProcessing = true;

            try
            {
                if (await _authService.ResendVerificationEmail())
                {
                    _uiController.ShowPopup("–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É.");
                }
                else
                {
                    _uiController.ShowPopup("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞.");
                }
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {ex}", MyLogger.LogCategory.Firebase);
                _uiController.ShowPopup("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞");
            }
            finally
            {
                _isProcessing = false;
            }
        }

        public void ClearStoredCredentials()
        {
            try
            {
                _credentialStorage.ClearStoredCredentials();

                if (_uiController != null)
                {
                    _uiController.ClearCredentialFields();
                }
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {ex}", MyLogger.LogCategory.Firebase);
            }
        }

        public void Logout()
        {
            try
            {
                if (_authService != null)
                {
                    _authService.SignOut();
                }
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ: {ex}", MyLogger.LogCategory.Firebase);
            }
        }

        public void Dispose()
        {
            Logout();
            _uiController = null;
        }
    }
}
