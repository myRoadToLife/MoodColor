using App.Develop.AppServices.Auth.UI;
using System;
using TMPro;
using UnityEngine;
using UnityEngine.UI;

namespace App.Develop.CommonServices.Firebase.Auth
{
    public class AuthUIController : MonoBehaviour
    {
        [Header("UI Elements - Common")]
        [SerializeField] private TMP_InputField _emailInput;
        [SerializeField] private TMP_InputField _passwordInput;
        [SerializeField] private Toggle _rememberMeToggle;
        [SerializeField] private TMP_Text _messageText; // For errors or info

        [Header("Login Panel")]
        [SerializeField] private GameObject _loginPanel;
        [SerializeField] private Button _loginButton;
        [SerializeField] private Button _googleSignInButton; // Google Sign-In button
        [SerializeField] private Button _switchToRegisterButton; // From login to register form
        [SerializeField] private Button _forgotPasswordButton;

        [Header("Register Panel")]
        [SerializeField] private GameObject _registerPanel;
        [SerializeField] private TMP_InputField _confirmPasswordInput;
        [SerializeField] private Button _registerButton;
        [SerializeField] private Button _switchToLoginButton; // From register to login form

        [Header("Reset Password Panel")]
        [SerializeField] private GameObject _resetPasswordPanel;
        [SerializeField] private TMP_InputField _resetPasswordEmailInput;
        [SerializeField] private Button _sendResetEmailButton;
        [SerializeField] private Button _backToLoginButton; // From reset password to login

        [Header("Animators")]
        [SerializeField] private UIAnimator _authPanelAnimator;
        [SerializeField] private UIAnimator _emailVerificationAnimator;
        [SerializeField] private UIAnimator _profilePanelAnimator;

        [Header("Popup")]
        [SerializeField] private GameObject _popupPanel;
        [SerializeField] private TMP_Text _popupText;

        // –°–æ–±—ã—Ç–∏–µ –¥–ª—è —Å–ª–∞–±–æ–≥–æ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è —Å ProfileSetupUI
        public event Action OnProfileSetupRequested;

        private IAuthManager _authManager;

        public void Initialize(IAuthManager authManager)
        {
            _authManager = authManager ?? throw new ArgumentNullException(nameof(authManager));
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞–Ω–µ–ª–∏ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º —Ä–µ–∂–∏–º–µ 
            // (–±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ –±–µ–∑ –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–ø—É—Å–∫–∞ –∫–æ—Ä—É—Ç–∏–Ω –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–∞—Ö)
            if (_authPanelAnimator != null)
                _authPanelAnimator.SetVisibleState();
                
            if (_emailVerificationAnimator != null)
                _emailVerificationAnimator.SetHiddenState();
                
            if (_profilePanelAnimator != null)
                _profilePanelAnimator.SetHiddenState();
                
            if (_popupPanel != null)
                _popupPanel.SetActive(false);
        }

        public void ShowAuthPanel()
        {
            if (_authPanelAnimator != null)
                _authPanelAnimator.Show();
                
            if (_emailVerificationAnimator != null && _emailVerificationAnimator.gameObject.activeSelf)
                _emailVerificationAnimator.Hide();
                
            if (_profilePanelAnimator != null && _profilePanelAnimator.gameObject.activeSelf)
                _profilePanelAnimator.Hide();
        }

        public void ShowEmailVerificationPanel()
        {
            if (_authPanelAnimator != null && _authPanelAnimator.gameObject.activeSelf)
                _authPanelAnimator.Hide();
                
            if (_emailVerificationAnimator != null)
                _emailVerificationAnimator.Show();
                
            if (_profilePanelAnimator != null && _profilePanelAnimator.gameObject.activeSelf)
                _profilePanelAnimator.Hide();
        }

        public void ShowProfilePanel()
        {
            if (_authPanelAnimator != null && _authPanelAnimator.gameObject.activeSelf)
                _authPanelAnimator.Hide();
                
            if (_emailVerificationAnimator != null && _emailVerificationAnimator.gameObject.activeSelf)
                _emailVerificationAnimator.Hide();
                
            if (_profilePanelAnimator != null)
                _profilePanelAnimator.Show();
        }

        public void LoadSavedCredentials(string email, string password, bool rememberMe)
        {
            // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π email (–∫–æ–≥–¥–∞ "–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è" –≤–∫–ª—é—á–µ–Ω–æ), –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if (!string.IsNullOrEmpty(email))
            {
                _emailInput.text = email;
                _passwordInput.text = password;
                _rememberMeToggle.isOn = rememberMe;
            }
            else
            {
                // –ò–Ω–∞—á–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π email
                string lastEmail = _authManager.GetLastUsedEmail();
                if (!string.IsNullOrEmpty(lastEmail))
                {
                    _emailInput.text = lastEmail;
                    _passwordInput.text = "";
                    _rememberMeToggle.isOn = false;
                }
            }
        }

        public void ClearCredentialFields()
        {
            _emailInput.text = "";
            _passwordInput.text = "";
            if (_rememberMeToggle != null)
                _rememberMeToggle.isOn = false;
        }

        public void ShowPopup(string message)
        {
            _popupPanel.SetActive(true);
            _popupText.text = message;

            CancelInvoke(nameof(HidePopup));
            Invoke(nameof(HidePopup), 3f);
        }

        private void HidePopup()
        {
            _popupPanel.SetActive(false);
        }

        // UI Event Handlers
        public void OnRegisterButtonClicked()
        {
            _authManager.RegisterUser(_emailInput.text.Trim(), _passwordInput.text.Trim(), _rememberMeToggle.isOn);
        }

        public void OnLoginButtonClicked()
        {
            _authManager.LoginUser(_emailInput.text.Trim(), _passwordInput.text.Trim(), _rememberMeToggle.isOn);
        }

        public void OnGoogleSignInButtonClicked()
        {
            Debug.Log("üîµ [AUTH-UI] –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ Google Sign-In");
            _authManager.LoginWithGoogle();
        }

        public void OnCheckEmailVerifiedButtonClicked()
        {
            _authManager.CheckEmailVerification();
        }

        public void OnSendVerificationEmailButtonClicked()
        {
            _authManager.SendEmailVerification();
        }

        public void OnClearCredentialsButtonClicked()
        {
            _authManager.ClearStoredCredentials();
        }

        public void OnContinueProfileButtonClicked()
        {
            // –í–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ GetComponent –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º—É —Å–æ–±—ã—Ç–∏–π
            OnProfileSetupRequested?.Invoke();
        }
    }
}