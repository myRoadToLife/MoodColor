using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using App.Develop.CommonServices.Emotion;
using App.Develop.CommonServices.Firebase.Common.Cache;
using App.Develop.CommonServices.Firebase.Database.Models;
using App.Develop.Utils.Logging;
using Firebase.Database;
using Newtonsoft.Json;
using UnityEngine;

namespace App.Develop.CommonServices.Firebase.Database.Services
{
    /// <summary>
    /// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–Ω–æ—á–∫–∞–º–∏ —ç–º–æ—Ü–∏–π –≤ Firebase Database
    /// </summary>
    public class JarDatabaseService : FirebaseDatabaseServiceBase, IJarDatabaseService
    {
        #region Constructor
        /// <summary>
        /// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –±–∞–Ω–æ—á–µ–∫ —ç–º–æ—Ü–∏–π
        /// </summary>
        /// <param name="database">–°—Å—ã–ª–∫–∞ –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö</param>
        /// <param name="cacheManager">–ú–µ–Ω–µ–¥–∂–µ—Ä –∫—ç—à–∞ Firebase</param>
        /// <param name="validationService">–°–µ—Ä–≤–∏—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö</param>
        public JarDatabaseService(
            DatabaseReference database,
            FirebaseCacheManager cacheManager,
            DataValidationService validationService = null) 
            : base(database, cacheManager, validationService)
        {
            MyLogger.Log("‚úÖ JarDatabaseService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", MyLogger.LogCategory.Firebase);
        }
        #endregion

        #region IJarDatabaseService Implementation
        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –±–∞–Ω–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        /// </summary>
        public async Task<Dictionary<string, JarData>> GetUserJars()
        {
            if (!CheckAuthentication())
            {
                MyLogger.LogError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω", MyLogger.LogCategory.Firebase);
                return null;
            }

            try
            {
                var snapshot = await _database.Child("users").Child(_userId).Child("jars").GetValueAsync();

                if (!snapshot.Exists)
                {
                    MyLogger.Log("–ë–∞–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞—ë–º –∏—Ö", MyLogger.LogCategory.Firebase);
                    return await CreateDefaultJars();
                }

                var jarData = new Dictionary<string, JarData>();
                foreach (var child in snapshot.Children)
                {
                    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥–æ–π –±–∞–Ω–∫–∏
                    var jar = JsonConvert.DeserializeObject<JarData>(child.GetRawJsonValue());
                    if (jar != null)
                    {
                        jarData[child.Key] = jar;
                    }
                }

                return jarData;
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–Ω–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {ex.Message}", MyLogger.LogCategory.Firebase);
                throw;
            }
        }

        /// <summary>
        /// –û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–Ω–æ—á–∫—É —ç–º–æ—Ü–∏–π
        /// </summary>
        public async Task UpdateJar(string emotionType, JarData jar)
        {
            if (!CheckAuthentication())
            {
                MyLogger.LogWarning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–Ω–æ—á–∫–∏", MyLogger.LogCategory.Firebase);
                return;
            }

            try
            {
                if (string.IsNullOrEmpty(emotionType))
                {
                    throw new ArgumentException("–¢–∏–ø —ç–º–æ—Ü–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º", nameof(emotionType));
                }

                if (jar == null)
                {
                    throw new ArgumentNullException(nameof(jar), "–î–∞–Ω–Ω—ã–µ –±–∞–Ω–æ—á–∫–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å null");
                }

                string json = JsonConvert.SerializeObject(jar);
                var jarRef = _database.Child("users").Child(_userId).Child("jars").Child(emotionType.ToLower());
                await jarRef.SetRawJsonValueAsync(json);

                MyLogger.Log($"–ë–∞–Ω–æ—á–∫–∞ –¥–ª—è —Ç–∏–ø–∞ —ç–º–æ—Ü–∏–∏ {emotionType} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞", MyLogger.LogCategory.Firebase);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–Ω–æ—á–∫–∏ {emotionType}: {ex.Message}", MyLogger.LogCategory.Firebase);
                throw;
            }
        }

        /// <summary>
        /// –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–º–æ—Ü–∏–π –≤ –±–∞–Ω–æ—á–∫–µ
        /// </summary>
        public async Task UpdateJarAmount(string emotionType, int amountToAdd)
        {
            if (!CheckAuthentication()) return;

            if (string.IsNullOrEmpty(emotionType))
            {
                MyLogger.LogError("‚ùå –¢–∏–ø —ç–º–æ—Ü–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –¥–ª—è UpdateJarAmount", MyLogger.LogCategory.Firebase);
                return;
            }

            if (amountToAdd == 0) return;

            var jarRef = _database.Child("users").Child(_userId).Child("jars").Child(emotionType.ToLower());

            try
            {
                await jarRef.RunTransaction(mutableData =>
                {
                    if (mutableData.Value == null)
                    {
                        MyLogger.LogWarning($"‚ö†Ô∏è –£–∑–µ–ª –±–∞–Ω–æ—á–∫–∏ '{emotionType}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é.", MyLogger.LogCategory.Firebase);
                        return TransactionResult.Abort();
                    }

                    try
                    {
                        var jarJson = JsonConvert.SerializeObject(mutableData.Value);
                        var jar = JsonConvert.DeserializeObject<JarData>(jarJson);

                        if (jar == null)
                        {
                            MyLogger.LogError($"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å –±–∞–Ω–æ—á–∫—É '{emotionType}'", MyLogger.LogCategory.Firebase);
                            return TransactionResult.Abort();
                        }

                        int newAmount = Mathf.Clamp(jar.CurrentAmount + amountToAdd, 0, jar.Capacity);

                        if (newAmount != jar.CurrentAmount)
                        {
                            mutableData.Child("currentAmount").Value = newAmount;
                            MyLogger.Log($"üîÑ {emotionType}: {jar.CurrentAmount} ‚û° {newAmount}", MyLogger.LogCategory.Firebase);
                            return TransactionResult.Success(mutableData);
                        }
                        else
                        {
                            MyLogger.Log($"‚ÑπÔ∏è {emotionType}: –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å ({jar.CurrentAmount})", MyLogger.LogCategory.Firebase);
                            return TransactionResult.Abort();
                        }
                    }
                    catch (Exception ex)
                    {
                        MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {emotionType}: {ex.Message}", MyLogger.LogCategory.Firebase);
                        return TransactionResult.Abort();
                    }
                });

                MyLogger.Log($"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è –±–∞–Ω–æ—á–∫–∏ '{emotionType}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", MyLogger.LogCategory.Firebase);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±–∞–Ω–æ—á–∫–∏ '{emotionType}': {ex.Message}\n{ex.StackTrace}", MyLogger.LogCategory.Firebase);
                throw;
            }
        }

        /// <summary>
        /// –û–±–Ω–æ–≤–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –±–∞–Ω–æ—á–∫–∏
        /// </summary>
        public async Task UpdateJarLevel(string emotionType, int level)
        {
            if (!CheckAuthentication())
            {
                MyLogger.LogWarning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –±–∞–Ω–æ—á–∫–∏", MyLogger.LogCategory.Firebase);
                return;
            }

            try
            {
                if (string.IsNullOrEmpty(emotionType))
                {
                    throw new ArgumentException("–¢–∏–ø —ç–º–æ—Ü–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º", nameof(emotionType));
                }

                if (level <= 0)
                {
                    throw new ArgumentException("–£—Ä–æ–≤–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º", nameof(level));
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ level
                var jarRef = _database.Child("users").Child(_userId).Child("jars").Child(emotionType.ToLower()).Child("level");
                await jarRef.SetValueAsync(level);

                // –û–±–Ω–æ–≤–ª—è–µ–º –µ–º–∫–æ—Å—Ç—å –±–∞–Ω–æ—á–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è
                int newCapacity = CalculateCapacityForLevel(level);
                var capacityRef = _database.Child("users").Child(_userId).Child("jars").Child(emotionType.ToLower()).Child("capacity");
                await capacityRef.SetValueAsync(newCapacity);

                MyLogger.Log($"–£—Ä–æ–≤–µ–Ω—å –±–∞–Ω–æ—á–∫–∏ {emotionType} –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ {level}, –Ω–æ–≤–∞—è –µ–º–∫–æ—Å—Ç—å: {newCapacity}", MyLogger.LogCategory.Firebase);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è –±–∞–Ω–æ—á–∫–∏ {emotionType}: {ex.Message}", MyLogger.LogCategory.Firebase);
                throw;
            }
        }

        /// <summary>
        /// –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—é –±–∞–Ω–æ—á–∫–∏
        /// </summary>
        public async Task UpdateJarCustomization(string emotionType, JarCustomization customization)
        {
            if (!CheckAuthentication())
            {
                MyLogger.LogWarning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏ –±–∞–Ω–æ—á–∫–∏", MyLogger.LogCategory.Firebase);
                return;
            }

            try
            {
                if (string.IsNullOrEmpty(emotionType))
                {
                    throw new ArgumentException("–¢–∏–ø —ç–º–æ—Ü–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º", nameof(emotionType));
                }

                if (customization == null)
                {
                    throw new ArgumentNullException(nameof(customization), "–î–∞–Ω–Ω—ã–µ –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å null");
                }

                // –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏
                string json = JsonConvert.SerializeObject(customization);
                var customizationRef = _database.Child("users").Child(_userId).Child("jars").Child(emotionType.ToLower()).Child("customization");
                await customizationRef.SetRawJsonValueAsync(json);

                MyLogger.Log($"–ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è –±–∞–Ω–æ—á–∫–∏ {emotionType} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞", MyLogger.LogCategory.Firebase);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏ –±–∞–Ω–æ—á–∫–∏ {emotionType}: {ex.Message}", MyLogger.LogCategory.Firebase);
                throw;
            }
        }

        /// <summary>
        /// –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –±–∞–Ω–æ—á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        /// </summary>
        public void ListenToJars(Action<Dictionary<string, JarData>> onUpdate)
        {
            if (!CheckAuthentication()) return;
            var reference = _database.Child("users").Child(_userId).Child("jars");
            SubscribeToData(reference, onUpdate);
        }
        #endregion

        #region Helper Methods
        /// <summary>
        /// –°–æ–∑–¥–∞–µ—Ç –±–∞–Ω–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        /// </summary>
        private async Task<Dictionary<string, JarData>> CreateDefaultJars()
        {
            try
            {
                if (!CheckAuthentication())
                {
                    MyLogger.LogError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–Ω–æ—á–µ–∫", MyLogger.LogCategory.Firebase);
                    return null;
                }

                var jarData = new Dictionary<string, JarData>();
                
                // –°–æ–∑–¥–∞–µ–º –±–∞–Ω–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —ç–º–æ—Ü–∏–π
                foreach (EmotionTypes type in Enum.GetValues(typeof(EmotionTypes)))
                {
                    var jar = new JarData
                    {
                        Type = type.ToString(),
                        Level = 1,
                        Capacity = 100,
                        CurrentAmount = 0,
                        Customization = new JarCustomization()
                    };

                    jarData[type.ToString().ToLower()] = jar;
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    await _database.Child("users").Child(_userId).Child("jars").Child(type.ToString().ToLower())
                        .SetRawJsonValueAsync(JsonConvert.SerializeObject(jar));
                }

                MyLogger.Log($"–°–æ–∑–¥–∞–Ω—ã –±–∞–Ω–æ—á–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {_userId}", MyLogger.LogCategory.Firebase);
                return jarData;
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–Ω–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {ex.Message}", MyLogger.LogCategory.Firebase);
                throw;
            }
        }

        /// <summary>
        /// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –µ–º–∫–æ—Å—Ç—å –±–∞–Ω–æ—á–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è
        /// </summary>
        private int CalculateCapacityForLevel(int level)
        {
            // –ü—Ä–æ—Å—Ç–∞—è —Ñ–æ—Ä–º—É–ª–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –µ–º–∫–æ—Å—Ç–∏: 100 * —É—Ä–æ–≤–µ–Ω—å
            return 100 * level;
        }
        #endregion
    }
} 