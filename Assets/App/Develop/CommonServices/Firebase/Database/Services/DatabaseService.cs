// Assets/App/Develop/AppServices/Firebase/Database/Services/DatabaseService.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using App.Develop.CommonServices.DataManagement.DataProviders;
using App.Develop.CommonServices.Emotion;
using Firebase.Database;
using App.Develop.CommonServices.Firebase.Common.Cache;
using App.Develop.CommonServices.Firebase.Common.Helpers;
using App.Develop.CommonServices.Firebase.Database.Models;
using UnityEngine;
using Firebase.Extensions;
using Firebase;
using Firebase.Auth;
using Newtonsoft.Json;
using UserProfile = App.Develop.CommonServices.Firebase.Database.Models.UserProfile;
using EmotionData = App.Develop.CommonServices.DataManagement.DataProviders.EmotionData;
using EmotionEventType = App.Develop.CommonServices.Emotion.EmotionEventType;
using App.Develop.Utils.Logging;

namespace App.Develop.CommonServices.Firebase.Database.Services
{
    /// <summary>
    /// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö Firebase
    /// </summary>
    public class DatabaseService : IDatabaseService
    {
        #region Private Fields
        private readonly DatabaseReference _database;
        private readonly FirebaseCacheManager _cacheManager;
        private readonly EmotionHistoryCache _emotionHistoryCache;
        private readonly DataValidationService _validationService;
        private readonly FirebaseBatchManager _batchManager;
        private string _userId;
        private readonly List<DatabaseReference> _activeListeners = new List<DatabaseReference>();

        // –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Ç–ø–∏—Å–∫–∏
        private readonly Dictionary<DatabaseReference, EventHandler<ValueChangedEventArgs>> _eventHandlers =
            new Dictionary<DatabaseReference, EventHandler<ValueChangedEventArgs>>();
        #endregion

        #region Properties
        /// <summary>
        /// –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ—Ä–µ–Ω—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        /// </summary>
        public DatabaseReference RootReference => _database;
        
        /// <summary>
        /// ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        /// </summary>
        public string UserId => _userId;

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        /// </summary>
        public bool IsAuthenticated => !string.IsNullOrEmpty(UserId);
        
        /// <summary>
        /// –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–∫–µ—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        /// </summary>
        public FirebaseBatchManager BatchManager => _batchManager;
        #endregion

        #region Constructor
        /// <summary>
        /// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        /// </summary>
        /// <param name="database">–°—Å—ã–ª–∫–∞ –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö</param>
        /// <param name="cacheManager">–ú–µ–Ω–µ–¥–∂–µ—Ä –∫—ç—à–∞ Firebase</param>
        /// <param name="validationService">–°–µ—Ä–≤–∏—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö</param>
        public DatabaseService(
            DatabaseReference database, 
            FirebaseCacheManager cacheManager,
            DataValidationService validationService = null)
        {
            _database = database ?? throw new ArgumentNullException(nameof(database));
            _cacheManager = cacheManager ?? throw new ArgumentNullException(nameof(cacheManager));
            _emotionHistoryCache = new EmotionHistoryCache(cacheManager);
            _validationService = validationService; // –ú–æ–∂–µ—Ç –±—ã—Ç—å null
            _batchManager = new FirebaseBatchManager(_database);
            
            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–∞—Ç—á–∞
            _batchManager.OnBatchCompleted += OnBatchCompleted;
            
            MyLogger.Log("‚úÖ DatabaseService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", MyLogger.LogCategory.Firebase);
            
            if (_validationService == null)
            {
                MyLogger.LogWarning("‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω. –í–∞–ª–∏–¥–∞—Ü–∏—è –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∞!", MyLogger.LogCategory.Firebase);
            }
            else
            {
                MyLogger.Log("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤–∫–ª—é—á–µ–Ω–∞ –≤ DatabaseService", MyLogger.LogCategory.Firebase);
            }
        }
        
        private void OnBatchCompleted(bool success, string message)
        {
            if (success)
            {
                MyLogger.Log($"‚úÖ –ë–∞—Ç—á —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω: {message}", MyLogger.LogCategory.Firebase);
            }
            else
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞—Ç—á–∞: {message}", MyLogger.LogCategory.Firebase);
            }
        }
        #endregion

        // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        public void UpdateUserId(string userId)
        {
            _userId = userId;
            MyLogger.Log($"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ DatabaseService –æ–±–Ω–æ–≤–ª–µ–Ω: {userId}", MyLogger.LogCategory.Firebase);
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞, –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ _userId)
        private bool CheckAuthentication()
        {
            if (string.IsNullOrEmpty(_userId))
            {
                MyLogger.LogWarning("‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", MyLogger.LogCategory.Firebase);
                return false;
            }

            return true;
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        public async Task CreateNewUser(string userId, string email)
        {
            try
            {
                var userRef = _database.Child("users").Child(userId);
                var userSnapshot = await userRef.GetValueAsync();

                if (userSnapshot.Exists)
                {
                    MyLogger.LogWarning($"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {email} (ID: {userId}, MyLogger.LogCategory.Firebase) —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
                    return;
                }

                // --- –ü—Ä–æ—Ñ–∏–ª—å ---
                var settings = new UserSettings
                {
                    Notifications = true,
                    Theme = "default",
                    Sound = true
                };

                var profileData = new Dictionary<string, object>
                {
                    ["email"] = email,
                    ["createdAt"] = ServerValue.Timestamp,
                    ["lastActive"] = ServerValue.Timestamp,
                    ["totalPoints"] = 0,
                    ["settings"] = settings.ToDictionary()
                };

                // --- –ë–∞–Ω–æ—á–∫–∏ ---
                var jarsData = new Dictionary<string, object>();

                foreach (var emotionType in Enum.GetNames(typeof(EmotionTypes)))
                {
                    string key = emotionType.ToLower();

                    var jar = new JarData
                    {
                        Type = emotionType,
                        Level = 1,
                        Capacity = 100,
                        CurrentAmount = 0,
                        Customization = new JarCustomization()
                    };

                    jarsData[key] = jar.ToDictionary();
                }

                // --- –§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ---
                var userData = new Dictionary<string, object>
                {
                    ["profile"] = profileData,
                    ["jars"] = jarsData
                };

                await userRef.UpdateChildrenAsync(userData);
                MyLogger.Log($"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {email} (ID: {userId}, MyLogger.LogCategory.Firebase) —Å–æ–∑–¥–∞–Ω");
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: {userId}, MyLogger.LogCategory.Firebase): {ex.Message}\n{ex.StackTrace}");
                throw;
            }
        }


        // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        public async Task<UserProfile> GetUserProfile(string userId = null)
        {
            string targetUserId = userId ?? _userId; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π ID –∏–ª–∏ ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            if (string.IsNullOrEmpty(targetUserId))
            {
                MyLogger.LogWarning("‚ö†Ô∏è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è", MyLogger.LogCategory.Firebase);
                return null;
            }

            try
            {
                var snapshot = await _database.Child("users").Child(targetUserId).Child("profile").GetValueAsync();

                if (snapshot.Exists && snapshot.Value != null)
                {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Newtonsoft.Json –¥–ª—è –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è/JSON
                    var json = JsonConvert.SerializeObject(snapshot.Value);
                    return JsonConvert.DeserializeObject<UserProfile>(json);
                }

                MyLogger.LogWarning($"–ü—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {targetUserId} –Ω–µ –Ω–∞–π–¥–µ–Ω.", MyLogger.LogCategory.Firebase);
                return null;
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è (ID: {targetUserId}, MyLogger.LogCategory.Firebase): {ex.Message}\n{ex.StackTrace}");
                throw;
            }
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        public async Task UpdateUserData(Dictionary<string, object> updates)
        {
            if (!CheckAuthentication())
            {
                throw new InvalidOperationException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö");
            }

            try
            {
                await _database.Child("users").Child(_userId).UpdateChildrenAsync(updates);
                MyLogger.Log($"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {_userId} –æ–±–Ω–æ–≤–ª–µ–Ω—ã.", MyLogger.LogCategory.Firebase);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {_userId}: {ex.Message}\n{ex.StackTrace}", MyLogger.LogCategory.Firebase);
                throw;
            }
        }

        // --- –ú–µ—Ç–æ–¥—ã –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è (Listeners) ---

        // –ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è ValueChanged
        private void SubscribeToData <T>(DatabaseReference reference, Action<T> onUpdate)
        {
            if (_eventHandlers.ContainsKey(reference))
            {
                MyLogger.LogWarning($"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {reference.Key}", MyLogger.LogCategory.Firebase);
                return; // –£–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã
            }

            _activeListeners.Add(reference);

            EventHandler<ValueChangedEventArgs> handler = (sender, args) =>
            {
                if (args.DatabaseError != null)
                {
                    MyLogger.LogError($"–û—à–∏–±–∫–∞ Firebase –ø—Ä–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–∏ {reference.Key}: {args.DatabaseError.Message}", MyLogger.LogCategory.Firebase);
                    return;
                }

                if (args.Snapshot?.Exists == true && args.Snapshot.Value != null)
                {
                    try
                    {
                        // –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é Newtonsoft.Json
                        var json = JsonConvert.SerializeObject(args.Snapshot.Value);
                        var data = JsonConvert.DeserializeObject<T>(json);
                        onUpdate?.Invoke(data);
                    }
                    catch (Exception ex)
                    {
                        MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {reference.Key}: {ex.Message}\n{ex.StackTrace}", MyLogger.LogCategory.Firebase);
                        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ—Ç–ø–∏—Å–∫–∏ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
                    }
                }
                else
                {
                    MyLogger.Log($"–î–∞–Ω–Ω—ã–µ –¥–ª—è {reference.Key} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –ø—É—Å—Ç—ã.", MyLogger.LogCategory.Firebase);
                    // –í—ã–∑—ã–≤–∞–µ–º onUpdate —Å default(T), —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–ª—É—á–∞–π –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥–∞–Ω–Ω—ã—Ö
                    onUpdate?.Invoke(default(T));
                }
            };

            _eventHandlers[reference] = handler; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            reference.ValueChanged += handler; // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è
            MyLogger.Log($"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {reference.Key} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.", MyLogger.LogCategory.Firebase);
        }

        // –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —ç–º–æ—Ü–∏–π –≤ —Ä–µ–≥–∏–æ–Ω–µ
        public void ListenToRegionEmotions(string regionId, Action<Dictionary<string, int>> onUpdate)
        {
            if (string.IsNullOrEmpty(regionId))
            {
                MyLogger.LogWarning("‚ö†Ô∏è ID —Ä–µ–≥–∏–æ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –¥–ª—è ListenToRegionEmotions", MyLogger.LogCategory.Firebase);
                return;
            }

            var reference = _database.Child("regions").Child(regionId).Child("emotions");
            SubscribeToData(reference, onUpdate);
        }

        // –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –±–∞–Ω–æ—á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        public void ListenToJars(Action<Dictionary<string, JarData>> onUpdate)
        {
            if (!CheckAuthentication()) return;
            var reference = _database.Child("users").Child(_userId).Child("jars");
            SubscribeToData(reference, onUpdate);
        }

        // –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        public void ListenToUserProfile(Action<UserProfile> onUpdate)
        {
            if (!CheckAuthentication()) return;
            var reference = _database.Child("users").Child(_userId).Child("profile");
            SubscribeToData(reference, onUpdate);
        }

        // –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —ç–º–æ—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        public void ListenToUserEmotions(Action<Dictionary<string, EmotionData>> onUpdate)
        {
            if (!CheckAuthentication()) return;
            var reference = _database.Child("users").Child(_userId).Child("emotions");
            SubscribeToData(reference, onUpdate);
        }

        // --- –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —ç–º–æ—Ü–∏—è–º–∏ –∏ –±–∞–Ω–æ—á–∫–∞–º–∏ ---

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –æ–± —ç–º–æ—Ü–∏–∏
        public async Task AddEmotion(EmotionData emotion)
        {
            if (!CheckAuthentication()) return;
            if (emotion == null) throw new ArgumentNullException(nameof(emotion));

            try
            {
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID, –µ—Å–ª–∏ –æ–Ω –Ω–µ –∑–∞–¥–∞–Ω
                if (string.IsNullOrEmpty(emotion.Id))
                {
                    // Firebase –º–æ–∂–µ—Ç —Å–∞–º –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–∏ —á–µ—Ä–µ–∑ Push(), –Ω–æ –µ—Å–ª–∏ –Ω—É–∂–µ–Ω Guid:
                    emotion.Id = Guid.NewGuid().ToString();
                    // –í–∞–∂–Ω–æ: –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å Push() –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞ Firebase,
                    // —Ç–æ ID –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ Push() –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤–Ω—É—Ç—Ä–∏ –æ–±—ä–µ–∫—Ç–∞ —É–∂–µ –ø–æ—Å–ª–µ.
                    // –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º Guid.NewGuid().
                }

                // –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –æ–±—ä–µ–∫—Ç –≤ JSON —Å –ø–æ–º–æ—â—å—é Newtonsoft.Json
                string jsonPayload = JsonConvert.SerializeObject(emotion, Formatting.None,
                    new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore }); // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º null –ø–æ–ª—è

                // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID —ç–º–æ—Ü–∏–∏ –∫–∞–∫ –∫–ª—é—á –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º JSON-—Å—Ç—Ä–æ–∫—É
                await _database.Child("users").Child(_userId).Child("emotions").Child(emotion.Id).SetRawJsonValueAsync(jsonPayload);

                MyLogger.Log($"‚úÖ –≠–º–æ—Ü–∏—è {emotion.Type} (ID: {emotion.Id}, MyLogger.LogCategory.Firebase) –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {_userId}");
            }
            catch (JsonException jsonEx) // –õ–æ–≤–∏–º –æ—à–∏–±–∫–∏ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ EmotionData –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {_userId}: {jsonEx.Message}\n{jsonEx.StackTrace}", MyLogger.LogCategory.Firebase);
                throw;
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–º–æ—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {_userId}: {ex.Message}\n{ex.StackTrace}", MyLogger.LogCategory.Firebase);
                throw;
            }
        }


        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —ç–º–æ—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        public async Task UpdateCurrentEmotion(string type, float intensity)
        {
            if (!CheckAuthentication()) return;

            try
            {
                var updates = new Dictionary<string, object>
                {
                    ["type"] = type,
                    ["intensity"] = intensity,
                    ["timestamp"] = ServerValue.Timestamp // –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
                };

                // –û–±–Ω–æ–≤–ª—è–µ–º —É–∑–µ–ª currentEmotion —Ü–µ–ª–∏–∫–æ–º
                await _database.Child("users").Child(_userId).Child("currentEmotion").UpdateChildrenAsync(updates);
                MyLogger.Log($"‚úÖ –¢–µ–∫—É—â–∞—è —ç–º–æ—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {_userId} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {type} ({intensity}, MyLogger.LogCategory.Firebase)");
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —ç–º–æ—Ü–∏–∏ –¥–ª—è {_userId}: {ex.Message}\n{ex.StackTrace}", MyLogger.LogCategory.Firebase);
                throw;
            }
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤ –±–∞–Ω–æ—á–∫–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        public async Task UpdateJarAmount(string emotionType, int amountToAdd)
        {
            if (!CheckAuthentication()) return;

            if (string.IsNullOrEmpty(emotionType))
            {
                MyLogger.LogError("‚ùå –¢–∏–ø —ç–º–æ—Ü–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –¥–ª—è UpdateJarAmount", MyLogger.LogCategory.Firebase);
                return;
            }

            if (amountToAdd == 0) return;

            var jarRef = _database.Child("users").Child(_userId).Child("jars").Child(emotionType.ToLower());

            try
            {
                await jarRef.RunTransaction(mutableData =>
                {
                    if (mutableData.Value == null)
                    {
                        MyLogger.LogWarning($"‚ö†Ô∏è –£–∑–µ–ª –±–∞–Ω–æ—á–∫–∏ '{emotionType}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é.", MyLogger.LogCategory.Firebase);
                        return TransactionResult.Abort();
                    }

                    try
                    {
                        var jarJson = JsonConvert.SerializeObject(mutableData.Value);
                        var jar = JsonConvert.DeserializeObject<JarData>(jarJson);

                        if (jar == null)
                        {
                            MyLogger.LogError($"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å –±–∞–Ω–æ—á–∫—É '{emotionType}'", MyLogger.LogCategory.Firebase);
                            return TransactionResult.Abort();
                        }

                        int newAmount = Mathf.Clamp(jar.CurrentAmount + amountToAdd, 0, jar.Capacity);

                        if (newAmount != jar.CurrentAmount)
                        {
                            mutableData.Child("currentAmount").Value = newAmount;
                            MyLogger.Log($"üîÑ {emotionType}: {jar.CurrentAmount} ‚û° {newAmount}", MyLogger.LogCategory.Firebase);
                            return TransactionResult.Success(mutableData);
                        }
                        else
                        {
                            MyLogger.Log($"‚ÑπÔ∏è {emotionType}: –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å ({jar.CurrentAmount}, MyLogger.LogCategory.Firebase)");
                            return TransactionResult.Abort();
                        }
                    }
                    catch (Exception ex)
                    {
                        MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {emotionType}: {ex.Message}", MyLogger.LogCategory.Firebase);
                        return TransactionResult.Abort();
                    }
                });

                MyLogger.Log($"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è –±–∞–Ω–æ—á–∫–∏ '{emotionType}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", MyLogger.LogCategory.Firebase);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±–∞–Ω–æ—á–∫–∏ '{emotionType}': {ex.Message}\n{ex.StackTrace}", MyLogger.LogCategory.Firebase);
                throw;
            }
        }


        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        public async Task AddPointsToProfile(int pointsToAdd)
        {
            if (!CheckAuthentication()) return;

            if (pointsToAdd <= 0)
            {
                MyLogger.LogWarning("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å 0 –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤.", MyLogger.LogCategory.Firebase);
                return;
            }

            var pointsRef = _database.Child("users").Child(_userId).Child("profile").Child("totalPoints");

            try
            {
                await pointsRef.RunTransaction(mutableData =>
                {
                    long currentPoints = 0;

                    if (mutableData.Value != null && long.TryParse(mutableData.Value.ToString(), out long parsedPoints))
                    {
                        currentPoints = parsedPoints;
                    }

                    long newTotal = currentPoints + pointsToAdd;
                    mutableData.Value = newTotal;

                    MyLogger.Log($"üîÑ –û—á–∫–∏: {currentPoints} ‚û° {newTotal}", MyLogger.LogCategory.Firebase);
                    return TransactionResult.Success(mutableData);
                });

                MyLogger.Log($"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {_userId} –Ω–∞—á–∏—Å–ª–µ–Ω–æ {pointsToAdd} –æ—á–∫–æ–≤.", MyLogger.LogCategory.Firebase);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –æ—á–∫–æ–≤: {ex.Message}\n{ex.StackTrace}", MyLogger.LogCategory.Firebase);
                throw;
            }
        }

        // –ü–æ–ª—É—á–∞–µ—Ç –±–∞–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        public async Task<Dictionary<string, JarData>> GetUserJars()
        {
            try
            {
                string userId = _userId;
                if (string.IsNullOrEmpty(userId))
                {
                    MyLogger.LogError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω", MyLogger.LogCategory.Firebase);
                    return null;
                }

                var snapshot = await _database.Child("users").Child(userId).Child("jars").GetValueAsync();

                if (!snapshot.Exists)
                {
                    MyLogger.Log("–ë–∞–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞—ë–º –∏—Ö", MyLogger.LogCategory.Firebase);
                    return await CreateDefaultJars();
                }

                var jarData = new Dictionary<string, JarData>();
                foreach (var child in snapshot.Children)
                {
                    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥–æ–π –±–∞–Ω–∫–∏
                    var jar = JsonConvert.DeserializeObject<JarData>(child.GetRawJsonValue());
                    if (jar != null)
                    {
                        jarData[child.Key] = jar;
                    }
                }

                return jarData;
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–Ω–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {ex.Message}", MyLogger.LogCategory.Firebase);
                throw;
            }
        }

        // –°–æ–∑–¥–∞–µ—Ç –±–∞–Ω–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        private async Task<Dictionary<string, JarData>> CreateDefaultJars()
        {
            try
            {
                string userId = _userId;
                if (string.IsNullOrEmpty(userId))
                {
                    MyLogger.LogError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω", MyLogger.LogCategory.Firebase);
                    return null;
                }

                var jarData = new Dictionary<string, JarData>();
                
                // –°–æ–∑–¥–∞–µ–º –±–∞–Ω–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —ç–º–æ—Ü–∏–π
                foreach (EmotionTypes type in Enum.GetValues(typeof(EmotionTypes)))
                {
                    var jar = new JarData
                    {
                        Type = type.ToString(),
                        Level = 1,
                        Capacity = 100,
                        CurrentAmount = 0,
                        Customization = new JarCustomization()
                    };

                    jarData[type.ToString()] = jar;
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    await _database.Child("users").Child(userId).Child("jars").Child(type.ToString())
                        .SetRawJsonValueAsync(JsonConvert.SerializeObject(jar));
                }

                return jarData;
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–Ω–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {ex.Message}", MyLogger.LogCategory.Firebase);
                throw;
            }
        }

        // –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ (–æ—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏–π)
        public void Dispose()
        {
            try
            {
                MyLogger.Log($"Disposing DatabaseService. –û—Ç–ø–∏—Å–∫–∞ –æ—Ç {_eventHandlers.Count} —Å–ª—É—à–∞—Ç–µ–ª–µ–π...", MyLogger.LogCategory.Firebase);
                // –û–±—Ö–æ–¥–∏–º –∫–æ–ø–∏—é –∫–ª—é—á–µ–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–ª–æ–≤–∞—Ä—è –≤–æ –≤—Ä–µ–º—è –∏—Ç–µ—Ä–∞—Ü–∏–∏ (—Ö–æ—Ç—è –∑–¥–µ—Å—å —ç—Ç–æ –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ)
                var referencesToUnsubscribe = new List<DatabaseReference>(_eventHandlers.Keys);

                foreach (var reference in referencesToUnsubscribe)
                {
                    if (_eventHandlers.TryGetValue(reference, out var handler))
                    {
                        reference.ValueChanged -= handler; // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è
                        MyLogger.Log($"–û—Ç–ø–∏—Å–∫–∞ –æ—Ç {reference.Key} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.", MyLogger.LogCategory.Firebase);
                    }
                }

                _eventHandlers.Clear(); // –û—á–∏—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
                _activeListeners.Clear(); // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
                
                // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π FirebaseBatchManager
                if (_batchManager != null)
                {
                    _batchManager.OnBatchCompleted -= OnBatchCompleted;
                    
                    // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –±–∞—Ç—á–∏–Ω–≥–∞, –≤—ã–ø–æ–ª–Ω—è–µ–º –∏—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
                    int pendingCount = _batchManager.GetPendingOperationsCount();
                    if (pendingCount > 0)
                    {
                        MyLogger.Log($"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ {pendingCount} –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –±–∞—Ç—á–∏–Ω–≥–∞ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º...", MyLogger.LogCategory.Firebase);
                        try
                        {
                            // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–∞–Ω–Ω—ã–µ
                            _batchManager.ExecuteBatchAsync().GetAwaiter().GetResult();
                        }
                        catch (Exception ex)
                        {
                            MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –±–∞—Ç—á–∏–Ω–≥–∞: {ex.Message}", MyLogger.LogCategory.Firebase);
                        }
                    }
                }
                
                MyLogger.Log("‚úÖ DatabaseService: –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —É–¥–∞–ª–µ–Ω—ã –∏ —Ä–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã.", MyLogger.LogCategory.Firebase);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ DatabaseService: {ex.Message}\n{ex.StackTrace}", MyLogger.LogCategory.Firebase);
            }
        }

        #region Emotion History

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —ç–º–æ—Ü–∏–π
        /// </summary>
        public async Task<List<EmotionHistoryRecord>> GetEmotionHistory(DateTime? startDate = null, DateTime? endDate = null, int limit = 100)
        {
            MyLogger.Log($"üì° [GetEmotionHistory] –ù–∞—á–∞–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –∏—Å—Ç–æ—Ä–∏–∏ —ç–º–æ—Ü–∏–π. UserId={_userId}, limit={limit}", MyLogger.LogCategory.Firebase);
            
            if (!CheckAuthentication())
            {
                MyLogger.LogWarning("‚ùå [GetEmotionHistory] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —ç–º–æ—Ü–∏–π", MyLogger.LogCategory.Firebase);
                return new List<EmotionHistoryRecord>();
            }

            try
            {
                string path = $"users/{_userId}/emotionHistory";
                MyLogger.Log($"üîç [GetEmotionHistory] –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø—É—Ç–∏: {path}", MyLogger.LogCategory.Firebase);
                
                Query query = _database.Child("users").Child(_userId).Child("emotionHistory").OrderByKey();
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ –Ω–∞—á–∞–ª–∞
                if (startDate.HasValue)
                {
                    var startTimestamp = startDate.Value.ToFileTimeUtc();
                    query = query.StartAt(null, startTimestamp.ToString());
                    MyLogger.Log($"üìÖ [GetEmotionHistory] –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ –Ω–∞—á–∞–ª–∞: {startDate.Value:O}", MyLogger.LogCategory.Firebase);
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è
                if (endDate.HasValue)
                {
                    var endTimestamp = endDate.Value.ToFileTimeUtc();
                    query = query.EndAt(null, endTimestamp.ToString());
                    MyLogger.Log($"üìÖ [GetEmotionHistory] –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {endDate.Value:O}", MyLogger.LogCategory.Firebase);
                }
                
                // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
                query = query.LimitToLast(limit);
                
                MyLogger.Log($"‚è≥ [GetEmotionHistory] –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Firebase...", MyLogger.LogCategory.Firebase);
                var snapshot = await query.GetValueAsync();
                
                MyLogger.Log($"üìä [GetEmotionHistory] –û—Ç–≤–µ—Ç –æ—Ç Firebase: Exists={snapshot.Exists}, ChildrenCount={snapshot.ChildrenCount}", MyLogger.LogCategory.Firebase);
                
                var result = new List<EmotionHistoryRecord>();
                
                if (snapshot.Exists && snapshot.ChildrenCount > 0)
                {
                    MyLogger.Log($"üìã [GetEmotionHistory] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {snapshot.ChildrenCount} –∑–∞–ø–∏—Å–µ–π...", MyLogger.LogCategory.Firebase);
                    
                    int processedCount = 0;
                    foreach (var child in snapshot.Children)
                    {
                        try
                        {
                            string rawJson = child.GetRawJsonValue();
                            MyLogger.Log($"üìÑ [GetEmotionHistory] –ó–∞–ø–∏—Å—å {processedCount + 1}: Key={child.Key}, JSON={rawJson}", MyLogger.LogCategory.Firebase);
                            
                            var record = JsonConvert.DeserializeObject<EmotionHistoryRecord>(rawJson);
                            if (record != null)
                            {
                                result.Add(record);
                                MyLogger.Log($"‚úÖ [GetEmotionHistory] –ó–∞–ø–∏—Å—å {processedCount + 1} —É—Å–ø–µ—à–Ω–æ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–∞: Id={record.Id}, Type={record.Type}", MyLogger.LogCategory.Firebase);
                            }
                            else
                            {
                                MyLogger.LogWarning($"‚ö†Ô∏è [GetEmotionHistory] –ó–∞–ø–∏—Å—å {processedCount + 1} –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –∫–∞–∫ NULL", MyLogger.LogCategory.Firebase);
                            }
                            processedCount++;
                        }
                        catch (Exception ex)
                        {
                            MyLogger.LogError($"‚ùå [GetEmotionHistory] –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏ {processedCount + 1}: {ex.Message}", MyLogger.LogCategory.Firebase);
                        }
                    }
                }
                else
                {
                    MyLogger.LogWarning($"‚ö†Ô∏è [GetEmotionHistory] Firebase –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–ª–∏ snapshot –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", MyLogger.LogCategory.Firebase);
                }
                
                MyLogger.Log($"üéØ [GetEmotionHistory] –ò—Ç–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ {result.Count} –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ —ç–º–æ—Ü–∏–π", MyLogger.LogCategory.Firebase);
                return result;
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå [GetEmotionHistory] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —ç–º–æ—Ü–∏–π: {ex.Message}", MyLogger.LogCategory.Firebase);
                MyLogger.LogError($"‚ùå [GetEmotionHistory] Stack trace: {ex.StackTrace}", MyLogger.LogCategory.Firebase);
                throw;
            }
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —ç–º–æ—Ü–∏–π –ø–æ —Ç–∏–ø—É
        /// </summary>
        public async Task<List<EmotionHistoryRecord>> GetEmotionHistoryByType(string emotionType, DateTime? startDate = null, DateTime? endDate = null, int limit = 100)
        {
            try
            {
                var result = new List<EmotionHistoryRecord>();
                var allRecords = await GetEmotionHistory(startDate, endDate, limit * 2);
                
                // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–∏–ø—É
                var filteredRecords = allRecords.Where(r => r.Type == emotionType).Take(limit).ToList();
                
                MyLogger.Log($"–ü–æ–ª—É—á–µ–Ω–æ {filteredRecords.Count} –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ —ç–º–æ—Ü–∏–π —Ç–∏–ø–∞ {emotionType}", MyLogger.LogCategory.Firebase);
                return filteredRecords;
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —ç–º–æ—Ü–∏–π –ø–æ —Ç–∏–ø—É: {ex.Message}", MyLogger.LogCategory.Firebase);
                throw;
            }
        }

        /// <summary>
        /// –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é —ç–º–æ—Ü–∏–π
        /// </summary>
        public async Task AddEmotionHistoryRecord(EmotionHistoryRecord record)
        {
            if (!CheckAuthentication())
            {
                MyLogger.LogWarning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é —ç–º–æ—Ü–∏–π", MyLogger.LogCategory.Firebase);
                return;
            }

            try
            {
                if (record == null)
                {
                    throw new ArgumentNullException(nameof(record), "–ó–∞–ø–∏—Å—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null");
                }
                
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                if (string.IsNullOrEmpty(record.Id))
                {
                    record.Id = Guid.NewGuid().ToString();
                }
                
                var dictionary = record.ToDictionary();
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ö–∞–Ω–∏–∑–º –±–∞—Ç—á–∏–Ω–≥–∞
                string path = $"users/{_userId}/emotionHistory/{record.Id}";
                _batchManager.AddUpdateOperation(path, dictionary);
                
                // –í—ã–ø–æ–ª–Ω—è–µ–º –±–∞—Ç—á –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –æ–¥–∏–Ω–æ—á–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
                await _batchManager.ExecuteBatchAsync();
                
                MyLogger.Log($"–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é —ç–º–æ—Ü–∏–π —á–µ—Ä–µ–∑ –º–µ—Ö–∞–Ω–∏–∑–º –±–∞—Ç—á–∏–Ω–≥–∞: {record.Id}, —Ç–∏–ø: {record.Type}", MyLogger.LogCategory.Firebase);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é —ç–º–æ—Ü–∏–π: {ex.Message}", MyLogger.LogCategory.Firebase);
                throw;
            }
        }

        /// <summary>
        /// –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é —ç–º–æ—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–º–æ—Ü–∏–∏ –∏ —Å–æ–±—ã—Ç–∏—è
        /// </summary>
        public async Task AddEmotionHistoryRecord(EmotionData emotion, EmotionEventType eventType)
        {
            if (!CheckAuthentication())
            {
                MyLogger.LogWarning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é —ç–º–æ—Ü–∏–π", MyLogger.LogCategory.Firebase);
                return;
            }

            try
            {
                if (emotion == null)
                {
                    throw new ArgumentNullException(nameof(emotion), "–≠–º–æ—Ü–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null");
                }
                
                // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
                var record = new EmotionHistoryRecord(emotion, eventType);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
                await AddEmotionHistoryRecord(record);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é —ç–º–æ—Ü–∏–π: {ex.Message}", MyLogger.LogCategory.Firebase);
                throw;
            }
        }

        /// <summary>
        /// –ü–∞–∫–µ—Ç–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏—é
        /// </summary>
        public async Task AddEmotionHistoryBatch(List<EmotionHistoryRecord> records)
        {
            if (!CheckAuthentication())
            {
                MyLogger.LogWarning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏—é —ç–º–æ—Ü–∏–π", MyLogger.LogCategory.Firebase);
                return;
            }

            try
            {
                if (records == null || records.Count == 0)
                {
                    return;
                }
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ö–∞–Ω–∏–∑–º –±–∞—Ç—á–∏–Ω–≥–∞ –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                foreach (var record in records)
                {
                    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                    if (string.IsNullOrEmpty(record.Id))
                    {
                        record.Id = Guid.NewGuid().ToString();
                    }
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –±–∞—Ç—á
                    string path = $"users/{_userId}/emotionHistory/{record.Id}";
                    _batchManager.AddUpdateOperation(path, record.ToDictionary());
                }
                
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ–º –±–∞—Ç—á
                await _batchManager.ExecuteBatchAsync();
                
                MyLogger.Log($"–î–æ–±–∞–≤–ª–µ–Ω–æ {records.Count} –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏—é —ç–º–æ—Ü–∏–π —á–µ—Ä–µ–∑ –º–µ—Ö–∞–Ω–∏–∑–º –±–∞—Ç—á–∏–Ω–≥–∞", MyLogger.LogCategory.Firebase);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"–û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏—é —ç–º–æ—Ü–∏–π: {ex.Message}", MyLogger.LogCategory.Firebase);
                throw;
            }
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        /// </summary>
        public async Task<List<EmotionHistoryRecord>> GetUnsyncedEmotionRecords(int limit = 100)
        {
            if (!CheckAuthentication())
            {
                MyLogger.LogWarning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π", MyLogger.LogCategory.Firebase);
                return new List<EmotionHistoryRecord>();
            }

            try
            {
                var query = _database.Child("users").Child(_userId).Child("emotionHistory")
                    .OrderByChild("syncStatus")
                    .EqualTo(SyncStatus.NotSynced.ToString())
                    .LimitToFirst(limit);
                
                var snapshot = await query.GetValueAsync();
                var result = new List<EmotionHistoryRecord>();
                
                if (snapshot.Exists && snapshot.ChildrenCount > 0)
                {
                    foreach (var child in snapshot.Children)
                    {
                        try
                        {
                            var record = JsonConvert.DeserializeObject<EmotionHistoryRecord>(child.GetRawJsonValue());
                            if (record != null)
                            {
                                result.Add(record);
                            }
                        }
                        catch (Exception ex)
                        {
                            MyLogger.LogError($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏: {ex.Message}", MyLogger.LogCategory.Firebase);
                        }
                    }
                }
                
                MyLogger.Log($"–ü–æ–ª—É—á–µ–Ω–æ {result.Count} –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π", MyLogger.LogCategory.Firebase);
                return result;
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {ex.Message}", MyLogger.LogCategory.Firebase);
                throw;
            }
        }

        /// <summary>
        /// –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏
        /// </summary>
        public async Task UpdateEmotionSyncStatus(string recordId, SyncStatus status)
        {
            if (!CheckAuthentication())
            {
                MyLogger.LogWarning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏", MyLogger.LogCategory.Firebase);
                return;
            }

            try
            {
                if (string.IsNullOrEmpty(recordId))
                {
                    throw new ArgumentException("ID –∑–∞–ø–∏—Å–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º", nameof(recordId));
                }
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ö–∞–Ω–∏–∑–º –±–∞—Ç—á–∏–Ω–≥–∞
                string path = $"users/{_userId}/emotionHistory/{recordId}/syncStatus";
                _batchManager.AddUpdateOperation(path, status.ToString());
                
                // –í—ã–ø–æ–ª–Ω—è–µ–º –±–∞—Ç—á –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –æ–¥–∏–Ω–æ—á–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
                await _batchManager.ExecuteBatchAsync();
                
                MyLogger.Log($"–°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏ {recordId} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {status} —á–µ—Ä–µ–∑ –º–µ—Ö–∞–Ω–∏–∑–º –±–∞—Ç—á–∏–Ω–≥–∞", MyLogger.LogCategory.Firebase);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {ex.Message}", MyLogger.LogCategory.Firebase);
                throw;
            }
        }

        /// <summary>
        /// –£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        /// </summary>
        public async Task DeleteEmotionHistoryRecord(string recordId)
        {
            if (!CheckAuthentication())
            {
                MyLogger.LogWarning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏", MyLogger.LogCategory.Firebase);
                return;
            }

            try
            {
                if (string.IsNullOrEmpty(recordId))
                {
                    throw new ArgumentException("ID –∑–∞–ø–∏—Å–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º", nameof(recordId));
                }
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ö–∞–Ω–∏–∑–º –±–∞—Ç—á–∏–Ω–≥–∞
                string path = $"users/{_userId}/emotionHistory/{recordId}";
                _batchManager.AddDeleteOperation(path);
                
                // –í—ã–ø–æ–ª–Ω—è–µ–º –±–∞—Ç—á –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
                await _batchManager.ExecuteBatchAsync();
                
                MyLogger.Log($"–ó–∞–ø–∏—Å—å {recordId} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —ç–º–æ—Ü–∏–π —á–µ—Ä–µ–∑ –º–µ—Ö–∞–Ω–∏–∑–º –±–∞—Ç—á–∏–Ω–≥–∞", MyLogger.LogCategory.Firebase);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —ç–º–æ—Ü–∏–π: {ex.Message}", MyLogger.LogCategory.Firebase);
                throw;
            }
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —ç–º–æ—Ü–∏—è–º –∑–∞ –ø–µ—Ä–∏–æ–¥
        /// </summary>
        public async Task<Dictionary<string, int>> GetEmotionStatistics(DateTime startDate, DateTime endDate)
        {
            if (!CheckAuthentication())
            {
                MyLogger.LogWarning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —ç–º–æ—Ü–∏–π", MyLogger.LogCategory.Firebase);
                return new Dictionary<string, int>();
            }

            try
            {
                var records = await GetEmotionHistory(startDate, endDate, 1000);
                var stats = new Dictionary<string, int>();
                
                foreach (var record in records)
                {
                    if (!string.IsNullOrEmpty(record.Type))
                    {
                        if (stats.ContainsKey(record.Type))
                        {
                            stats[record.Type]++;
                        }
                        else
                        {
                            stats[record.Type] = 1;
                        }
                    }
                }
                
                MyLogger.Log($"–ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–º–æ—Ü–∏–π —Å {startDate} –ø–æ {endDate}: {stats.Count} —Ç–∏–ø–æ–≤", MyLogger.LogCategory.Firebase);
                return stats;
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —ç–º–æ—Ü–∏–π: {ex.Message}", MyLogger.LogCategory.Firebase);
                throw;
            }
        }

        #endregion

        #region Sync Settings

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        /// </summary>
        public async Task<EmotionSyncSettings> GetSyncSettings()
        {
            if (!CheckAuthentication())
            {
                MyLogger.LogWarning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏", MyLogger.LogCategory.Firebase);
                return null;
            }

            try
            {
                var snapshot = await _database.Child("users").Child(_userId).Child("syncSettings").GetValueAsync();
                
                if (snapshot.Exists)
                {
                    var settings = JsonConvert.DeserializeObject<EmotionSyncSettings>(snapshot.GetRawJsonValue());
                    MyLogger.Log("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞", MyLogger.LogCategory.Firebase);
                    return settings;
                }
                
                // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
                var defaultSettings = new EmotionSyncSettings();
                await UpdateSyncSettings(defaultSettings);
                
                MyLogger.Log("–°–æ–∑–¥–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏", MyLogger.LogCategory.Firebase);
                return defaultSettings;
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {ex.Message}", MyLogger.LogCategory.Firebase);
                throw;
            }
        }

        /// <summary>
        /// –û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        /// </summary>
        public async Task UpdateSyncSettings(EmotionSyncSettings settings)
        {
            if (!CheckAuthentication())
            {
                MyLogger.LogWarning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏", MyLogger.LogCategory.Firebase);
                return;
            }

            try
            {
                if (settings == null)
                {
                    throw new ArgumentNullException(nameof(settings), "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å null");
                }
                
                // –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Å–ª–æ–≤–∞—Ä—å
                var json = JsonConvert.SerializeObject(settings);
                var dictionary = JsonConvert.DeserializeObject<Dictionary<string, object>>(json);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ Firebase
                await _database.Child("users").Child(_userId).Child("syncSettings").UpdateChildrenAsync(dictionary);
                
                MyLogger.Log("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã", MyLogger.LogCategory.Firebase);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {ex.Message}", MyLogger.LogCategory.Firebase);
                throw;
            }
        }

        #endregion

        #region Backup

        /// <summary>
        /// –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        /// </summary>
        public async Task<string> CreateBackup()
        {
            if (!CheckAuthentication())
            {
                MyLogger.LogWarning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏", MyLogger.LogCategory.Firebase);
                return null;
            }

            try
            {
                // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                var snapshot = await _database.Child("users").Child(_userId).GetValueAsync();
                
                if (!snapshot.Exists)
                {
                    throw new InvalidOperationException("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
                }
                
                // –°–æ–∑–¥–∞–µ–º ID –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
                string backupId = DateTime.UtcNow.ToString("yyyyMMdd_HHmmss");
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
                await _database.Child("backups").Child(_userId).Child(backupId).SetRawJsonValueAsync(snapshot.GetRawJsonValue());
                
                MyLogger.Log($"–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backupId}", MyLogger.LogCategory.Firebase);
                return backupId;
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {ex.Message}", MyLogger.LogCategory.Firebase);
                throw;
            }
        }

        /// <summary>
        /// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        /// </summary>
        public async Task<bool> RestoreFromBackup(string backupId)
        {
            if (!CheckAuthentication())
            {
                MyLogger.LogWarning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏", MyLogger.LogCategory.Firebase);
                return false;
            }

            try
            {
                if (string.IsNullOrEmpty(backupId))
                {
                    throw new ArgumentException("ID —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º", nameof(backupId));
                }
                
                // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
                var snapshot = await _database.Child("backups").Child(_userId).Child(backupId).GetValueAsync();
                
                if (!snapshot.Exists)
                {
                    throw new InvalidOperationException($"–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è {backupId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
                }
                
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ (–∫—Ä–æ–º–µ profile, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
                var backupData = JsonConvert.DeserializeObject<Dictionary<string, object>>(snapshot.GetRawJsonValue());
                
                // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω—É–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å
                if (backupData.ContainsKey("profile"))
                {
                    backupData.Remove("profile");
                }
                
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                await _database.Child("users").Child(_userId).UpdateChildrenAsync(backupData);
                
                MyLogger.Log($"–î–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ {backupId}", MyLogger.LogCategory.Firebase);
                return true;
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {ex.Message}", MyLogger.LogCategory.Firebase);
                return false;
            }
        }
        
        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
        /// </summary>
        public async Task<string[]> GetAvailableBackups()
        {
            if (!CheckAuthentication())
            {
                MyLogger.LogWarning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π", MyLogger.LogCategory.Firebase);
                return Array.Empty<string>();
            }

            try
            {
                var snapshot = await _database.Child("backups").Child(_userId).GetValueAsync();
                
                if (!snapshot.Exists)
                {
                    MyLogger.Log("–†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", MyLogger.LogCategory.Firebase);
                    return Array.Empty<string>();
                }
                
                List<string> backupIds = new List<string>();
                
                foreach (var child in snapshot.Children)
                {
                    backupIds.Add(child.Key);
                }
                
                MyLogger.Log($"–ù–∞–π–¥–µ–Ω–æ {backupIds.Count} —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π", MyLogger.LogCategory.Firebase);
                return backupIds.OrderByDescending(id => id).ToArray(); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –¥–∞—Ç—ã
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {ex.Message}", MyLogger.LogCategory.Firebase);
                return Array.Empty<string>();
            }
        }
        
        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        /// </summary>
        public async Task<bool> CheckConnection()
        {
            try
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, –∑–∞–ø—Ä–∞—à–∏–≤–∞—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —É–∑–µ–ª
                var connectionRef = _database.Root.Child(".info/connected");
                var snapshot = await connectionRef.GetValueAsync();
                
                bool isConnected = snapshot.Exists && snapshot.Value != null && (bool)snapshot.Value;
                
                MyLogger.Log($"–°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Firebase: {(isConnected ? "–ü–æ–¥–∫–ª—é—á–µ–Ω–æ" : "–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ", MyLogger.LogCategory.Firebase)}");
                return isConnected;
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {ex.Message}", MyLogger.LogCategory.Firebase);
                return false;
            }
        }

        #endregion

        #region EmotionDatabaseService Implementation

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ —ç–º–æ—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        /// </summary>
        public async Task<Dictionary<string, EmotionData>> GetUserEmotions()
        {
            if (!CheckAuthentication())
            {
                MyLogger.LogWarning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ—Ü–∏–π", MyLogger.LogCategory.Firebase);
                return new Dictionary<string, EmotionData>();
            }

            try
            {
                var snapshot = await _database.Child("users").Child(_userId).Child("emotions").GetValueAsync();
                
                if (!snapshot.Exists)
                {
                    MyLogger.Log("–≠–º–æ—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", MyLogger.LogCategory.Firebase);
                    return new Dictionary<string, EmotionData>();
                }
                
                var emotionsDict = new Dictionary<string, EmotionData>();
                
                foreach (var child in snapshot.Children)
                {
                    try
                    {
                        var emotion = JsonConvert.DeserializeObject<EmotionData>(child.GetRawJsonValue());
                        if (emotion != null)
                        {
                            emotionsDict[child.Key] = emotion;
                        }
                    }
                    catch (Exception ex)
                    {
                        MyLogger.LogError($"–û—à–∏–±–∫–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —ç–º–æ—Ü–∏–∏: {ex.Message}", MyLogger.LogCategory.Firebase);
                    }
                }
                
                MyLogger.Log($"–ü–æ–ª—É—á–µ–Ω–æ {emotionsDict.Count} —ç–º–æ—Ü–∏–π", MyLogger.LogCategory.Firebase);
                return emotionsDict;
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ—Ü–∏–π: {ex.Message}", MyLogger.LogCategory.Firebase);
                return new Dictionary<string, EmotionData>();
            }
        }
        
        /// <summary>
        /// –û–±–Ω–æ–≤–ª—è–µ—Ç —ç–º–æ—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        /// </summary>
        public async Task UpdateUserEmotions(Dictionary<string, EmotionData> emotions)
        {
            if (!CheckAuthentication())
            {
                MyLogger.LogWarning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–º–æ—Ü–∏–π", MyLogger.LogCategory.Firebase);
                return;
            }

            try
            {
                if (emotions == null || emotions.Count == 0)
                {
                    MyLogger.LogWarning("–ü—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å —ç–º–æ—Ü–∏–π", MyLogger.LogCategory.Firebase);
                    return;
                }
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ö–∞–Ω–∏–∑–º –±–∞—Ç—á–∏–Ω–≥–∞ –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                foreach (var kvp in emotions)
                {
                    string path = $"users/{_userId}/emotions/{kvp.Key}";
                    string json = JsonConvert.SerializeObject(kvp.Value);
                    var emotionDict = JsonConvert.DeserializeObject<Dictionary<string, object>>(json);
                    _batchManager.AddUpdateOperation(path, emotionDict);
                }
                
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ–º –±–∞—Ç—á
                await _batchManager.ExecuteBatchAsync();
                
                MyLogger.Log($"–û–±–Ω–æ–≤–ª–µ–Ω–æ {emotions.Count} —ç–º–æ—Ü–∏–π —á–µ—Ä–µ–∑ –º–µ—Ö–∞–Ω–∏–∑–º –±–∞—Ç—á–∏–Ω–≥–∞", MyLogger.LogCategory.Firebase);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–º–æ—Ü–∏–π: {ex.Message}", MyLogger.LogCategory.Firebase);
                throw;
            }
        }
        
        /// <summary>
        /// –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —ç–º–æ—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        /// </summary>
        public async Task UpdateUserEmotion(EmotionData emotion)
        {
            if (!CheckAuthentication())
            {
                MyLogger.LogWarning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–º–æ—Ü–∏–∏", MyLogger.LogCategory.Firebase);
                return;
            }

            try
            {
                if (emotion == null)
                {
                    throw new ArgumentNullException(nameof(emotion));
                }
                
                if (string.IsNullOrEmpty(emotion.Id))
                {
                    emotion.Id = Guid.NewGuid().ToString();
                }
                
                string json = JsonConvert.SerializeObject(emotion);
                var emotionDict = JsonConvert.DeserializeObject<Dictionary<string, object>>(json);
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ö–∞–Ω–∏–∑–º –±–∞—Ç—á–∏–Ω–≥–∞
                string path = $"users/{_userId}/emotions/{emotion.Id}";
                _batchManager.AddUpdateOperation(path, emotionDict);
                
                // –í—ã–ø–æ–ª–Ω—è–µ–º –±–∞—Ç—á –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –æ–¥–∏–Ω–æ—á–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
                await _batchManager.ExecuteBatchAsync();
                
                MyLogger.Log($"–≠–º–æ—Ü–∏—è {emotion.Type} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ –º–µ—Ö–∞–Ω–∏–∑–º –±–∞—Ç—á–∏–Ω–≥–∞", MyLogger.LogCategory.Firebase);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–º–æ—Ü–∏–∏: {ex.Message}", MyLogger.LogCategory.Firebase);
                throw;
            }
        }
        
        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏ —ç–º–æ—Ü–∏–π
        /// </summary>
        public async Task<List<EmotionHistoryRecord>> GetUnsyncedEmotionHistory(int limit = 50)
        {
            // –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥
            return await GetUnsyncedEmotionRecords(limit);
        }
        
        /// <summary>
        /// –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏ —ç–º–æ—Ü–∏–π
        /// </summary>
        public async Task UpdateEmotionHistoryRecordStatus(string recordId, SyncStatus status)
        {
            // –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥
            await UpdateEmotionSyncStatus(recordId, status);
        }
        
        #endregion
        
        #region UserProfileDatabaseService Implementation
        
        /// <summary>
        /// –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        /// </summary>
        public async Task CreateUserProfile(UserProfile profile, string userId = null)
        {
            string targetUserId = userId ?? _userId;

            if (string.IsNullOrEmpty(targetUserId))
            {
                MyLogger.LogWarning("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è", MyLogger.LogCategory.Firebase);
                return;
            }

            try
            {
                string json = JsonConvert.SerializeObject(profile);
                
                await _database.Child("users").Child(targetUserId).Child("profile")
                    .SetRawJsonValueAsync(json);
                
                MyLogger.Log($"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {targetUserId} —Å–æ–∑–¥–∞–Ω", MyLogger.LogCategory.Firebase);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {ex.Message}", MyLogger.LogCategory.Firebase);
                throw;
            }
        }
        
        /// <summary>
        /// –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        /// </summary>
        public async Task UpdateUserProfile(UserProfile profile, string userId = null)
        {
            string targetUserId = userId ?? _userId;

            if (string.IsNullOrEmpty(targetUserId))
            {
                MyLogger.LogWarning("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è", MyLogger.LogCategory.Firebase);
                return;
            }

            try
            {
                string json = JsonConvert.SerializeObject(profile);
                var updates = JsonConvert.DeserializeObject<Dictionary<string, object>>(json);
                
                await _database.Child("users").Child(targetUserId).Child("profile")
                    .UpdateChildrenAsync(updates);
                
                MyLogger.Log($"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {targetUserId} –æ–±–Ω–æ–≤–ª–µ–Ω", MyLogger.LogCategory.Firebase);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {ex.Message}", MyLogger.LogCategory.Firebase);
                throw;
            }
        }
        
        /// <summary>
        /// –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        /// </summary>
        public async Task UpdateUserProfileField(string field, object value, string userId = null)
        {
            string targetUserId = userId ?? _userId;

            if (string.IsNullOrEmpty(targetUserId))
            {
                MyLogger.LogWarning("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—è –ø—Ä–æ—Ñ–∏–ª—è", MyLogger.LogCategory.Firebase);
                return;
            }

            try
            {
                if (string.IsNullOrEmpty(field))
                {
                    throw new ArgumentException("–ü–æ–ª–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º", nameof(field));
                }
                
                await _database.Child("users").Child(targetUserId).Child("profile").Child(field)
                    .SetValueAsync(value);
                
                MyLogger.Log($"–ü–æ–ª–µ {field} –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {targetUserId} –æ–±–Ω–æ–≤–ª–µ–Ω–æ", MyLogger.LogCategory.Firebase);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—è –ø—Ä–æ—Ñ–∏–ª—è: {ex.Message}", MyLogger.LogCategory.Firebase);
                throw;
            }
        }
        
        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        /// </summary>
        public async Task<bool> UserProfileExists(string userId = null)
        {
            string targetUserId = userId ?? _userId;

            if (string.IsNullOrEmpty(targetUserId))
            {
                MyLogger.LogWarning("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è", MyLogger.LogCategory.Firebase);
                return false;
            }

            try
            {
                var snapshot = await _database.Child("users").Child(targetUserId).Child("profile").GetValueAsync();
                return snapshot.Exists;
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {ex.Message}", MyLogger.LogCategory.Firebase);
                return false;
            }
        }
        
        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–∏–∫–Ω–µ–π–º–∞
        /// </summary>
        public async Task<bool> NicknameExists(string nickname)
        {
            try
            {
                if (string.IsNullOrEmpty(nickname))
                {
                    throw new ArgumentException("–ù–∏–∫–Ω–µ–π–º –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º", nameof(nickname));
                }
                
                var query = _database.Child("users").OrderByChild("profile/nickname").EqualTo(nickname).LimitToFirst(1);
                var snapshot = await query.GetValueAsync();
                
                return snapshot.Exists && snapshot.ChildrenCount > 0;
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞: {ex.Message}", MyLogger.LogCategory.Firebase);
                return false;
            }
        }
        
        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –Ω–∏–∫–Ω–µ–π–º–∞
        /// </summary>
        public async Task<(bool available, string error)> CheckNicknameAvailability(string nickname)
        {
            try
            {
                if (string.IsNullOrEmpty(nickname))
                {
                    return (false, "–ù–∏–∫–Ω–µ–π–º –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
                }
                
                if (nickname.Length < 3)
                {
                    return (false, "–ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤");
                }
                
                if (nickname.Length > 20)
                {
                    return (false, "–ù–∏–∫–Ω–µ–π–º –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 20 —Å–∏–º–≤–æ–ª–æ–≤");
                }
                
                if (!System.Text.RegularExpressions.Regex.IsMatch(nickname, "^[a-zA-Z0-9_]+$"))
                {
                    return (false, "–ù–∏–∫–Ω–µ–π–º –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è");
                }
                
                bool exists = await NicknameExists(nickname);
                
                return exists ? 
                    (false, "–≠—Ç–æ—Ç –Ω–∏–∫–Ω–µ–π–º —É–∂–µ –∑–∞–Ω—è—Ç") : 
                    (true, null);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –Ω–∏–∫–Ω–µ–π–º–∞: {ex.Message}", MyLogger.LogCategory.Firebase);
                return (false, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∏–∫–Ω–µ–π–º–∞");
            }
        }
        
        #endregion

        /// <summary>
        /// –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π –æ–¥–Ω–∏–º –±–∞—Ç—á–µ–º
        /// </summary>
        public async Task UpdateEmotionSyncStatusBatch(Dictionary<string, SyncStatus> recordStatusPairs)
        {
            if (!CheckAuthentication())
            {
                MyLogger.LogWarning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏", MyLogger.LogCategory.Firebase);
                return;
            }

            try
            {
                if (recordStatusPairs == null || recordStatusPairs.Count == 0)
                {
                    MyLogger.LogWarning("–ü—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤", MyLogger.LogCategory.Firebase);
                    return;
                }
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ö–∞–Ω–∏–∑–º –±–∞—Ç—á–∏–Ω–≥–∞ –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π
                foreach (var kvp in recordStatusPairs)
                {
                    if (string.IsNullOrEmpty(kvp.Key))
                    {
                        MyLogger.LogWarning("–ü—Ä–æ–ø—É—Å–∫ –∑–∞–ø–∏—Å–∏ —Å –ø—É—Å—Ç—ã–º ID", MyLogger.LogCategory.Firebase);
                        continue;
                    }
                    
                    string path = $"users/{_userId}/emotionHistory/{kvp.Key}/syncStatus";
                    _batchManager.AddUpdateOperation(path, kvp.Value.ToString());
                }
                
                // –í—ã–ø–æ–ª–Ω—è–µ–º –±–∞—Ç—á –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
                await _batchManager.ExecuteBatchAsync();
                
                MyLogger.Log($"–û–±–Ω–æ–≤–ª–µ–Ω—ã —Å—Ç–∞—Ç—É—Å—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è {recordStatusPairs.Count} –∑–∞–ø–∏—Å–µ–π —á–µ—Ä–µ–∑ –º–µ—Ö–∞–Ω–∏–∑–º –±–∞—Ç—á–∏–Ω–≥–∞", MyLogger.LogCategory.Firebase);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"–û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {ex.Message}", MyLogger.LogCategory.Firebase);
                throw;
            }
        }

        /// <summary>
        /// –£–¥–∞–ª—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –æ–¥–Ω–∏–º –±–∞—Ç—á–µ–º
        /// </summary>
        public async Task DeleteEmotionHistoryRecordBatch(List<string> recordIds)
        {
            if (!CheckAuthentication())
            {
                MyLogger.LogWarning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π", MyLogger.LogCategory.Firebase);
                return;
            }

            try
            {
                if (recordIds == null || recordIds.Count == 0)
                {
                    MyLogger.LogWarning("–ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", MyLogger.LogCategory.Firebase);
                    return;
                }
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ö–∞–Ω–∏–∑–º –±–∞—Ç—á–∏–Ω–≥–∞ –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π
                foreach (var recordId in recordIds)
                {
                    if (string.IsNullOrEmpty(recordId))
                    {
                        MyLogger.LogWarning("–ü—Ä–æ–ø—É—Å–∫ –∑–∞–ø–∏—Å–∏ —Å –ø—É—Å—Ç—ã–º ID", MyLogger.LogCategory.Firebase);
                        continue;
                    }
                    
                    string path = $"users/{_userId}/emotionHistory/{recordId}";
                    _batchManager.AddDeleteOperation(path);
                }
                
                // –í—ã–ø–æ–ª–Ω—è–µ–º –±–∞—Ç—á –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
                await _batchManager.ExecuteBatchAsync();
                
                MyLogger.Log($"–£–¥–∞–ª–µ–Ω–æ {recordIds.Count} –∑–∞–ø–∏—Å–µ–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —ç–º–æ—Ü–∏–π —á–µ—Ä–µ–∑ –º–µ—Ö–∞–Ω–∏–∑–º –±–∞—Ç—á–∏–Ω–≥–∞", MyLogger.LogCategory.Firebase);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"–û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —ç–º–æ—Ü–∏–π: {ex.Message}", MyLogger.LogCategory.Firebase);
                throw;
            }
        }

        /// <summary>
        /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø–∏—Å—å –∏—Å—Ç–æ—Ä–∏–∏ —ç–º–æ—Ü–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        /// </summary>
        /// <param name="record">–ó–∞–ø–∏—Å—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è</param>
        /// <returns>True –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False</returns>
        public async Task<bool> SaveEmotionHistoryRecord(EmotionHistoryRecord record)
        {
            if (!CheckAuthentication())
                return false;

            if (record == null)
            {
                MyLogger.LogError("‚ùå –ó–∞–ø–∏—Å—å –∏—Å—Ç–æ—Ä–∏–∏ —ç–º–æ—Ü–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π", MyLogger.LogCategory.Firebase);
                return false;
            }
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
            if (_validationService != null && _validationService.HasValidator<EmotionHistoryRecord>())
            {
                var validationResult = _validationService.Validate<EmotionHistoryRecord>(record);
                if (!validationResult.IsValid)
                {
                    validationResult.CheckAndLogErrors("EmotionHistoryRecord");
                    MyLogger.LogError("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏ —ç–º–æ—Ü–∏–π –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞. –ó–∞–ø–∏—Å—å –Ω–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.", MyLogger.LogCategory.Firebase);
                    return false;
                }
            }

            try
            {
                var userHistoryRef = _database.Child("users").Child(_userId).Child("emotionHistory").Child(record.Id);
                await userHistoryRef.SetValueAsync(record.ToDictionary());
                
                // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
                _emotionHistoryCache.AddOrUpdateRecord(record);
                
                MyLogger.Log($"‚úÖ –ó–∞–ø–∏—Å—å –∏—Å—Ç–æ—Ä–∏–∏ —ç–º–æ—Ü–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {record.Id}, —Ç–∏–ø: {record.Type}", MyLogger.LogCategory.Firebase);
                return true;
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏ —ç–º–æ—Ü–∏–π: {ex.Message}", MyLogger.LogCategory.Firebase);
                return false;
            }
        }

        #region GameData Management

        public async Task SaveUserGameData(GameData gameData)
        {
            if (!IsAuthenticated)
            {
                MyLogger.LogError("[DatabaseService] –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å GameData: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω.", MyLogger.LogCategory.Firebase);
                return;
            }
            if (gameData == null)
            {
                MyLogger.LogError("[DatabaseService] –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å GameData: –ø–µ—Ä–µ–¥–∞–Ω null –æ–±—ä–µ–∫—Ç.", MyLogger.LogCategory.Firebase);
                return;
            }

            try
            {
                string jsonData = JsonConvert.SerializeObject(gameData, Formatting.Indented); // Formatting.Indented –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –≤ Firebase
                DatabaseReference gameDataRef = _database.Child("users").Child(_userId).Child("gameData");
                await gameDataRef.SetRawJsonValueAsync(jsonData);
                MyLogger.Log($"[DatabaseService] GameData –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {_userId} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ Firebase.", MyLogger.LogCategory.Firebase);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"[DatabaseService] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ GameData –≤ Firebase: {ex.Message}\n{ex.StackTrace}", MyLogger.LogCategory.Firebase);
                // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –∏—Å–∫–ª—é—á–µ–Ω–∏–π, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–ø—ã—Ç–∫—É –∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            }
        }

        public async Task<GameData> LoadUserGameData()
        {
            if (!IsAuthenticated)
            {
                MyLogger.LogWarning("[DatabaseService] –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å GameData: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω.", MyLogger.LogCategory.Firebase);
                return null;
            }

            try
            {
                DatabaseReference gameDataRef = _database.Child("users").Child(_userId).Child("gameData");
                DataSnapshot snapshot = await gameDataRef.GetValueAsync();

                if (snapshot.Exists)
                {
                    string jsonData = snapshot.GetRawJsonValue();
                    if (!string.IsNullOrEmpty(jsonData))
                    {
                        GameData gameData = JsonConvert.DeserializeObject<GameData>(jsonData);
                        MyLogger.Log($"[DatabaseService] GameData –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {_userId} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ Firebase.", MyLogger.LogCategory.Firebase);
                        return gameData;
                    }
                    else
                    {
                        MyLogger.LogWarning($"[DatabaseService] GameData –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {_userId} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ Firebase, –Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ.", MyLogger.LogCategory.Firebase);
                        return new GameData(); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å null
                    }
                }
                else
                {
                    MyLogger.Log($"[DatabaseService] GameData –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {_userId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ Firebase. –ë—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.", MyLogger.LogCategory.Firebase);
                    return new GameData(); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç
                }
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"[DatabaseService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ GameData –∏–∑ Firebase: {ex.Message}\n{ex.StackTrace}", MyLogger.LogCategory.Firebase);
                return new GameData(); // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
            }
        }

        #endregion
    }
}
