using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using App.Develop.CommonServices.Firebase.Common.Cache;
using App.Develop.CommonServices.Firebase.Database.Models;
using App.Develop.Utils.Logging;
using Firebase.Database;
using Newtonsoft.Json;
using UnityEngine;

namespace App.Develop.CommonServices.Firebase.Database.Services
{
    /// <summary>
    /// –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Firebase Database
    /// </summary>
    public class SessionManagementService : FirebaseDatabaseServiceBase, ISessionManagementService
    {
        #region Constructor
        /// <summary>
        /// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏
        /// </summary>
        /// <param name="database">–°—Å—ã–ª–∫–∞ –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö</param>
        /// <param name="cacheManager">–ú–µ–Ω–µ–¥–∂–µ—Ä –∫—ç—à–∞ Firebase</param>
        /// <param name="validationService">–°–µ—Ä–≤–∏—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö</param>
        public SessionManagementService(
            DatabaseReference database,
            FirebaseCacheManager cacheManager,
            DataValidationService validationService = null) 
            : base(database, cacheManager, validationService)
        {
            MyLogger.Log("‚úÖ SessionManagementService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", MyLogger.LogCategory.Firebase);
        }
        #endregion

        #region ISessionManagementService Implementation
        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        /// </summary>
        public async Task<Dictionary<string, ActiveSessionData>> GetActiveSessions()
        {
            if (!CheckAuthentication())
            {
                return new Dictionary<string, ActiveSessionData>();
            }

            try
            {
                var activeSessionsRef = _database.Child("users").Child(_userId).Child("activeSessions");
                var snapshot = await activeSessionsRef.GetValueAsync();

                if (!snapshot.Exists)
                {
                    MyLogger.Log($"üì± –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {_userId}", MyLogger.LogCategory.Firebase);
                    return new Dictionary<string, ActiveSessionData>();
                }

                var sessions = new Dictionary<string, ActiveSessionData>();
                
                foreach (var childSnapshot in snapshot.Children)
                {
                    try
                    {
                        string deviceId = childSnapshot.Key;
                        var sessionData = new ActiveSessionData
                        {
                            DeviceId = deviceId,
                            DeviceInfo = childSnapshot.Child("deviceInfo").Value?.ToString(),
                            IpAddress = childSnapshot.Child("ipAddress").Value?.ToString(),
                            LastActivityTimestamp = Convert.ToInt64(childSnapshot.Child("lastActivityTimestamp").Value ?? 0)
                        };
                        
                        sessions[deviceId] = sessionData;
                    }
                    catch (Exception ex)
                    {
                        MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–µ—Å—Å–∏–∏ {childSnapshot.Key}: {ex.Message}", MyLogger.LogCategory.Firebase);
                    }
                }
                
                MyLogger.Log($"üì± –ü–æ–ª—É—á–µ–Ω–æ {sessions.Count} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {_userId}", MyLogger.LogCategory.Firebase);
                return sessions;
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {ex.Message}", MyLogger.LogCategory.Firebase);
                return new Dictionary<string, ActiveSessionData>();
            }
        }

        /// <summary>
        /// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        /// </summary>
        public async Task<bool> RegisterActiveSession()
        {
            Debug.Log("üîç [SESSION-REGISTER-FORCE] –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏...");
            
            if (!CheckAuthentication())
            {
                Debug.Log("‚ùå [SESSION-REGISTER-FORCE] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏");
                MyLogger.LogWarning("‚ùå [SESSION-REGISTER] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏", MyLogger.LogCategory.Firebase);
                return false;
            }

            try
            {
                // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
                var sessionData = ActiveSessionData.CreateFromCurrentDevice();
                string deviceId = sessionData.DeviceId;
                
                Debug.Log($"üîç [SESSION-REGISTER-FORCE] –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞ —Å–µ—Å—Å–∏—è –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {deviceId}, –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {sessionData.DeviceInfo}");
                MyLogger.Log($"üîç [SESSION-REGISTER] –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞ —Å–µ—Å—Å–∏—è –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {deviceId}, –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {sessionData.DeviceInfo}", MyLogger.LogCategory.Firebase);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ deviceId –Ω–µ –ø—É—Å—Ç–æ–π
                if (string.IsNullOrEmpty(deviceId))
                {
                    MyLogger.LogError("‚ùå [SESSION-REGISTER] DeviceId –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏", MyLogger.LogCategory.Firebase);
                    return false;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—É—Ç—å –∫ —É–∑–ª—É activeSessions —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                var databasePath = $"users/{_userId}/activeSessions/{deviceId}";
                MyLogger.Log($"üîç [SESSION-REGISTER] –ü—É—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {databasePath}", MyLogger.LogCategory.Firebase);
                
                // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —É–∑–µ–ª activeSessions –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
                var activeSessionsRef = _database.Child("users").Child(_userId).Child("activeSessions");
                
                try
                {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
                    var testSnapshot = await activeSessionsRef.GetValueAsync();
                    MyLogger.Log($"üîç [SESSION-REGISTER] –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —É–∑–ª—É: {(testSnapshot != null ? "–£—Å–ø–µ—à–Ω–æ" : "–ù–µ —É–¥–∞–ª–æ—Å—å")}", MyLogger.LogCategory.Firebase);
                }
                catch (Exception checkEx)
                {
                    MyLogger.LogError($"‚ùå [SESSION-REGISTER] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–∞: {checkEx.Message}", MyLogger.LogCategory.Firebase);
                    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ —É–∑–µ–ª –º–æ–∂–µ—Ç –±—ã—Ç—å –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω
                }
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Firebase (–∏—Å–ø–æ–ª—å–∑—É–µ–º deviceId –∫–∞–∫ –∫–ª—é—á)
                Debug.Log($"üîç [SESSION-REGISTER-FORCE] –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Firebase –ø–æ –ø—É—Ç–∏: {databasePath}");
                var saveTask = activeSessionsRef.Child(deviceId).SetValueAsync(sessionData.ToDictionary());
                
                Debug.Log($"üîç [SESSION-REGISTER-FORCE] –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞, –Ω–∞—á–∏–Ω–∞–µ–º await...");
                
                try
                {
                    await saveTask;
                    Debug.Log($"üîç [SESSION-REGISTER-FORCE] await –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!");
                }
                catch (Exception awaitEx)
                {
                    Debug.Log($"‚ùå [SESSION-REGISTER-FORCE] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ await: {awaitEx.Message}");
                    Debug.Log($"‚ùå [SESSION-REGISTER-FORCE] StackTrace: {awaitEx.StackTrace}");
                    
                    // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –æ—à–∏–±–∫–∏ Firebase
                    if (saveTask.Exception != null)
                    {
                        Debug.Log($"‚ùå [SESSION-REGISTER-FORCE] Firebase Task Exception: {saveTask.Exception.Message}");
                        if (saveTask.Exception.InnerException != null)
                        {
                            Debug.Log($"‚ùå [SESSION-REGISTER-FORCE] Firebase Inner Exception: {saveTask.Exception.InnerException.Message}");
                            Debug.Log($"‚ùå [SESSION-REGISTER-FORCE] Firebase Inner StackTrace: {saveTask.Exception.InnerException.StackTrace}");
                        }
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
                        if (saveTask.Exception is AggregateException aggEx)
                        {
                            int level = 0;
                            foreach (var innerEx in aggEx.InnerExceptions)
                            {
                                Debug.Log($"‚ùå [SESSION-REGISTER-FORCE] AggregateException Level {level}: {innerEx.GetType().Name} - {innerEx.Message}");
                                level++;
                            }
                        }
                    }
                    
                    MyLogger.LogError($"‚ùå [SESSION-REGISTER] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ await: {awaitEx.Message}", MyLogger.LogCategory.Firebase);
                    return false;
                }
                
                Debug.Log($"üîç [SESSION-REGISTER-FORCE] –ó–∞–¥–∞—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. IsFaulted: {saveTask.IsFaulted}, IsCompleted: {saveTask.IsCompleted}, IsCanceled: {saveTask.IsCanceled}");
                
                if (saveTask.IsFaulted)
                {
                    Debug.Log($"‚ùå [SESSION-REGISTER-FORCE] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {saveTask.Exception?.Message}");
                    MyLogger.LogError($"‚ùå [SESSION-REGISTER] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {saveTask.Exception?.Message}", MyLogger.LogCategory.Firebase);
                    return false;
                }
                
                if (saveTask.IsCanceled)
                {
                    Debug.Log($"‚ùå [SESSION-REGISTER-FORCE] –ó–∞–¥–∞—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞");
                    MyLogger.LogError($"‚ùå [SESSION-REGISTER] –ó–∞–¥–∞—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", MyLogger.LogCategory.Firebase);
                    return false;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
                Debug.Log($"üîç [SESSION-REGISTER-FORCE] –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å...");
                try
                {
                    var verificationSnapshot = await activeSessionsRef.Child(deviceId).GetValueAsync();
                    if (verificationSnapshot.Exists)
                    {
                        Debug.Log($"‚úÖ [SESSION-REGISTER-FORCE] –î–∞–Ω–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –≤ Firebase!");
                        MyLogger.Log($"‚úÖ [SESSION-REGISTER] –ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {deviceId}", MyLogger.LogCategory.Firebase);
                        return true;
                    }
                    else
                    {
                        Debug.Log($"‚ùå [SESSION-REGISTER-FORCE] –î–∞–Ω–Ω—ã–µ –ù–ï –Ω–∞–π–¥–µ–Ω—ã –≤ Firebase –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!");
                        MyLogger.LogError($"‚ùå [SESSION-REGISTER] –î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –≤ Firebase", MyLogger.LogCategory.Firebase);
                        return false;
                    }
                }
                catch (Exception verifyEx)
                {
                    Debug.Log($"‚ùå [SESSION-REGISTER-FORCE] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {verifyEx.Message}");
                    MyLogger.LogError($"‚ùå [SESSION-REGISTER] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {verifyEx.Message}", MyLogger.LogCategory.Firebase);
                    return false;
                }
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå [SESSION-REGISTER] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏: {ex.Message}", MyLogger.LogCategory.Firebase);
                MyLogger.LogError($"‚ùå [SESSION-REGISTER] Stack trace: {ex.StackTrace}", MyLogger.LogCategory.Firebase);
                return false;
            }
        }

        /// <summary>
        /// –û—á–∏—â–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        /// </summary>
        public async Task<bool> ClearActiveSessions()
        {
            if (!CheckAuthentication())
            {
                return false;
            }

            try
            {
                await _database.Child("users").Child(_userId).Child("activeSessions").RemoveValueAsync();
                MyLogger.Log($"‚úÖ –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –æ—á–∏—â–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {_userId}", MyLogger.LogCategory.Firebase);
                return true;
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {ex.Message}", MyLogger.LogCategory.Firebase);
                return false;
            }
        }

        /// <summary>
        /// –û—á–∏—â–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        /// </summary>
        public async Task<bool> ClearActiveSession(string deviceId)
        {
            if (!CheckAuthentication())
            {
                return false;
            }

            if (string.IsNullOrEmpty(deviceId))
            {
                MyLogger.LogError("‚ùå DeviceId –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–µ—Å—Å–∏–∏", MyLogger.LogCategory.Firebase);
                return false;
            }

            try
            {
                await _database.Child("users").Child(_userId).Child("activeSessions").Child(deviceId).RemoveValueAsync();
                MyLogger.Log($"‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –æ—á–∏—â–µ–Ω–∞ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {deviceId}", MyLogger.LogCategory.Firebase);
                return true;
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {deviceId}: {ex.Message}", MyLogger.LogCategory.Firebase);
                return false;
            }
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ —Å –¥—Ä—É–≥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        /// </summary>
        public async Task<bool> CheckActiveSessionExists(string currentDeviceId)
        {
            Debug.Log($"üîç [SESSION-CHECK-FORCE] –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Å—Å–∏–π –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {currentDeviceId}");
            
            if (!CheckAuthentication())
            {
                Debug.Log("‚ùå [SESSION-CHECK-FORCE] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Å—Å–∏–π");
                MyLogger.LogWarning("‚ùå [SESSION-CHECK] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Å—Å–∏–π", MyLogger.LogCategory.Firebase);
                return false;
            }

            if (string.IsNullOrEmpty(currentDeviceId))
            {
                Debug.Log("‚ö†Ô∏è [SESSION-CHECK-FORCE] –¢–µ–∫—É—â–∏–π DeviceId –ø—É—Å—Ç–æ–π –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏");
                MyLogger.LogWarning("‚ö†Ô∏è [SESSION-CHECK] –¢–µ–∫—É—â–∏–π DeviceId –ø—É—Å—Ç–æ–π –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏", MyLogger.LogCategory.Firebase);
                return false;
            }

            try
            {
                Debug.Log($"üîç [SESSION-CHECK-FORCE] –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Å—Å–∏–π –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {currentDeviceId}");
                MyLogger.Log($"üîç [SESSION-CHECK] –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Å—Å–∏–π –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {currentDeviceId}", MyLogger.LogCategory.Firebase);
                
                // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
                var sessions = await GetActiveSessions();
                
                Debug.Log($"üîç [SESSION-CHECK-FORCE] –ü–æ–ª—É—á–µ–Ω–æ —Å–µ—Å—Å–∏–π: {sessions.Count}");
                MyLogger.Log($"üîç [SESSION-CHECK] –ü–æ–ª—É—á–µ–Ω–æ —Å–µ—Å—Å–∏–π: {sessions.Count}", MyLogger.LogCategory.Firebase);
                
                // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                foreach (var session in sessions)
                {
                    MyLogger.Log($"üîç [SESSION-CHECK] –°–µ—Å—Å–∏—è: DeviceId={session.Key}, " +
                        $"DeviceInfo={session.Value.DeviceInfo}, " +
                        $"LastActive={new DateTime(1970, 1, 1).AddMilliseconds(session.Value.LastActivityTimestamp)}", 
                        MyLogger.LogCategory.Firebase);
                }
                
                if (sessions.Count == 0)
                {
                    MyLogger.Log("üì± [SESSION-CHECK] –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", MyLogger.LogCategory.Firebase);
                    return false;
                }
                
                // –ò—â–µ–º —Å–µ—Å—Å–∏–∏ –¥—Ä—É–≥–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                bool otherSessionExists = sessions.Any(pair => pair.Key != currentDeviceId);
                
                if (otherSessionExists)
                {
                    Debug.Log($"‚ö†Ô∏è [SESSION-CHECK-FORCE] –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —Å –¥—Ä—É–≥–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤. –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: {sessions.Count}");
                    MyLogger.Log($"‚ö†Ô∏è [SESSION-CHECK] –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —Å –¥—Ä—É–≥–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤. –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: {sessions.Count}", MyLogger.LogCategory.Firebase);
                    
                    // –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤, –æ—Ç–ª–∏—á–Ω—ã—Ö –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ
                    var otherSessions = sessions.Where(pair => pair.Key != currentDeviceId).ToList();
                    foreach (var session in otherSessions)
                    {
                        Debug.Log($"‚ö†Ô∏è [SESSION-CHECK-FORCE] –î—Ä—É–≥–∞—è —Å–µ—Å—Å–∏—è: DeviceId={session.Key}, DeviceInfo={session.Value.DeviceInfo}");
                        MyLogger.Log($"‚ö†Ô∏è [SESSION-CHECK] –î—Ä—É–≥–∞—è —Å–µ—Å—Å–∏—è: DeviceId={session.Key}, DeviceInfo={session.Value.DeviceInfo}", 
                            MyLogger.LogCategory.Firebase);
                    }
                }
                else
                {
                    Debug.Log($"üì± [SESSION-CHECK-FORCE] –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –¥—Ä—É–≥–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã. –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: {sessions.Count}");
                    MyLogger.Log($"üì± [SESSION-CHECK] –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –¥—Ä—É–≥–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã. –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: {sessions.Count}", MyLogger.LogCategory.Firebase);
                }
                
                return otherSessionExists;
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå [SESSION-CHECK] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {ex.Message}", MyLogger.LogCategory.Firebase);
                MyLogger.LogError($"‚ùå [SESSION-CHECK] Stack trace: {ex.StackTrace}", MyLogger.LogCategory.Firebase);
                return false;
            }
        }

        /// <summary>
        /// –û–±–Ω–æ–≤–ª—è–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        /// </summary>
        public async Task<bool> UpdateActiveSession(string deviceId)
        {
            if (!CheckAuthentication())
            {
                return false;
            }

            if (string.IsNullOrEmpty(deviceId))
            {
                MyLogger.LogError("‚ùå DeviceId –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏", MyLogger.LogCategory.Firebase);
                return false;
            }

            try
            {
                var sessionData = new ActiveSessionData
                {
                    DeviceId = deviceId,
                    DeviceInfo = SystemInfo.deviceModel,
                    LastActivityTimestamp = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds()
                };

                var activeSessionsRef = _database.Child("users").Child(_userId).Child("activeSessions").Child(deviceId);
                await activeSessionsRef.SetValueAsync(sessionData.ToDictionary());
                
                MyLogger.Log($"‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {deviceId}", MyLogger.LogCategory.Firebase);
                return true;
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {deviceId}: {ex.Message}", MyLogger.LogCategory.Firebase);
                return false;
            }
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        /// </summary>
        /// <param name="userId">ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</param>
        /// <returns>True, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</returns>
        public async Task<bool> CheckUserExists(string userId)
        {
            if (string.IsNullOrEmpty(userId))
            {
                MyLogger.LogWarning("‚ùå UserId –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", MyLogger.LogCategory.Firebase);
                return false;
            }

            try
            {
                var userRef = _database.Child("users").Child(userId);
                var userSnapshot = await userRef.GetValueAsync();
                
                bool exists = userSnapshot.Exists;
                MyLogger.Log($"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {userId}: {(exists ? "—Å—É—â–µ—Å—Ç–≤—É–µ—Ç" : "–Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")}", MyLogger.LogCategory.Firebase);
                
                return exists;
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {userId}: {ex.Message}", MyLogger.LogCategory.Firebase);
                return false;
            }
        }
        #endregion
    }
} 