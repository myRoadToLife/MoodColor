using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using App.Develop.CommonServices.Firebase.Common.Cache;
using App.Develop.CommonServices.Firebase.Database.Models;
using App.Develop.Utils.Logging;
using Firebase.Database;
using Newtonsoft.Json;
using UnityEngine;
using App.Develop.CommonServices.DataManagement.DataProviders;
using App.Develop.CommonServices.Emotion;

namespace App.Develop.CommonServices.Firebase.Database.Services
{
    /// <summary>
    /// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —ç–º–æ—Ü–∏—è–º–∏ –≤ Firebase Database
    /// </summary>
    public class EmotionDatabaseService : FirebaseDatabaseServiceBase, IEmotionDatabaseService
    {
        #region Private Fields
        private readonly EmotionHistoryCache _emotionHistoryCache;
        #endregion
        
        #region Constructor
        /// <summary>
        /// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —ç–º–æ—Ü–∏–π
        /// </summary>
        /// <param name="database">–°—Å—ã–ª–∫–∞ –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö</param>
        /// <param name="cacheManager">–ú–µ–Ω–µ–¥–∂–µ—Ä –∫—ç—à–∞ Firebase</param>
        /// <param name="validationService">–°–µ—Ä–≤–∏—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö</param>
        public EmotionDatabaseService(
            DatabaseReference database,
            FirebaseCacheManager cacheManager,
            DataValidationService validationService = null) 
            : base(database, cacheManager, validationService)
        {
            _emotionHistoryCache = new EmotionHistoryCache(cacheManager);
            MyLogger.Log("‚úÖ EmotionDatabaseService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", MyLogger.LogCategory.Firebase);
        }
        #endregion

        #region IEmotionDatabaseService Implementation
        
        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —ç–º–æ—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        /// </summary>
        public async Task<Dictionary<string, EmotionData>> GetUserEmotions()
        {
            if (!CheckAuthentication())
            {
                return new Dictionary<string, EmotionData>();
            }

            try
            {
                var emotionsRef = _database.Child("users").Child(_userId).Child("emotions");
                var snapshot = await emotionsRef.GetValueAsync();

                if (!snapshot.Exists)
                {
                    MyLogger.Log($"–≠–º–æ—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {_userId}", MyLogger.LogCategory.Firebase);
                    return new Dictionary<string, EmotionData>();
                }

                var emotions = new Dictionary<string, EmotionData>();

                foreach (var child in snapshot.Children)
                {
                    try
                    {
                        string type = child.Key;
                        var data = JsonConvert.DeserializeObject<EmotionData>(child.GetRawJsonValue());
                        emotions[type] = data;
                    }
                    catch (Exception ex)
                    {
                        MyLogger.LogError($"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —ç–º–æ—Ü–∏–∏ {child.Key}: {ex.Message}", MyLogger.LogCategory.Firebase);
                    }
                }

                MyLogger.Log($"–ü–æ–ª—É—á–µ–Ω–æ {emotions.Count} —ç–º–æ—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {_userId}", MyLogger.LogCategory.Firebase);
                return emotions;
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ—Ü–∏–π: {ex.Message}", MyLogger.LogCategory.Firebase);
                return new Dictionary<string, EmotionData>();
            }
        }
        
        /// <summary>
        /// –û–±–Ω–æ–≤–ª—è–µ—Ç —ç–º–æ—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        /// </summary>
        public async Task UpdateUserEmotions(Dictionary<string, EmotionData> emotions)
        {
            if (!CheckAuthentication())
            {
                return;
            }

            try
            {
                if (emotions == null || emotions.Count == 0)
                {
                    MyLogger.LogWarning("–ü—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å —ç–º–æ—Ü–∏–π", MyLogger.LogCategory.Firebase);
                    return;
                }
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ö–∞–Ω–∏–∑–º –±–∞—Ç—á–∏–Ω–≥–∞ –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                foreach (var kvp in emotions)
                {
                    string path = $"users/{_userId}/emotions/{kvp.Key}";
                    string json = JsonConvert.SerializeObject(kvp.Value);
                    var emotionDict = JsonConvert.DeserializeObject<Dictionary<string, object>>(json);
                    _batchManager.AddUpdateOperation(path, emotionDict);
                }
                
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ–º –±–∞—Ç—á
                await _batchManager.ExecuteBatchAsync();
                
                MyLogger.Log($"–û–±–Ω–æ–≤–ª–µ–Ω–æ {emotions.Count} —ç–º–æ—Ü–∏–π —á–µ—Ä–µ–∑ –º–µ—Ö–∞–Ω–∏–∑–º –±–∞—Ç—á–∏–Ω–≥–∞", MyLogger.LogCategory.Firebase);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–º–æ—Ü–∏–π: {ex.Message}", MyLogger.LogCategory.Firebase);
                throw;
            }
        }
        
        /// <summary>
        /// –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —ç–º–æ—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        /// </summary>
        public async Task UpdateUserEmotion(EmotionData emotion)
        {
            if (!CheckAuthentication())
            {
                return;
            }

            try
            {
                if (emotion == null)
                {
                    throw new ArgumentNullException(nameof(emotion));
                }
                
                if (string.IsNullOrEmpty(emotion.Id))
                {
                    emotion.Id = Guid.NewGuid().ToString();
                }
                
                string json = JsonConvert.SerializeObject(emotion);
                var emotionDict = JsonConvert.DeserializeObject<Dictionary<string, object>>(json);
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ö–∞–Ω–∏–∑–º –±–∞—Ç—á–∏–Ω–≥–∞
                string path = $"users/{_userId}/emotions/{emotion.Id}";
                _batchManager.AddUpdateOperation(path, emotionDict);
                
                // –í—ã–ø–æ–ª–Ω—è–µ–º –±–∞—Ç—á –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –æ–¥–∏–Ω–æ—á–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
                await _batchManager.ExecuteBatchAsync();
                
                MyLogger.Log($"–≠–º–æ—Ü–∏—è {emotion.Type} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ –º–µ—Ö–∞–Ω–∏–∑–º –±–∞—Ç—á–∏–Ω–≥–∞", MyLogger.LogCategory.Firebase);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–º–æ—Ü–∏–∏: {ex.Message}", MyLogger.LogCategory.Firebase);
                throw;
            }
        }
        
        /// <summary>
        /// –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é —ç–º–æ—Ü–∏–π
        /// </summary>
        public async Task AddEmotionHistoryRecord(EmotionHistoryRecord record)
        {
            if (!CheckAuthentication())
            {
                MyLogger.LogWarning("üìù [HISTORY-RECORD] ‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é —ç–º–æ—Ü–∏–π. UserId: NULL –∏–ª–∏ –ø—É—Å—Ç–æ–π", MyLogger.LogCategory.Firebase);
                return;
            }

            if (record == null)
            {
                MyLogger.LogError("üìù [HISTORY-RECORD] ‚ùå –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å null –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é —ç–º–æ—Ü–∏–π", MyLogger.LogCategory.Firebase);
                return;
            }

            try
            {
                string path = $"users/{_userId}/emotionHistory/{record.Id}";
                MyLogger.Log($"üìù [HISTORY-RECORD] ‚ûï –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏: Path='{path}', RecordId='{record.Id}', Type='{record.Type}', UserId='{_userId}'", MyLogger.LogCategory.Firebase);
                var userHistoryRef = _database.Child("users").Child(_userId).Child("emotionHistory").Child(record.Id);
                await userHistoryRef.SetValueAsync(record.ToDictionary());
                
                // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
                _emotionHistoryCache.AddOrUpdateRecord(record);
                
                MyLogger.Log($"üìù [HISTORY-RECORD] ‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: Path='{path}'", MyLogger.LogCategory.Firebase);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"üìù [HISTORY-RECORD] ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏ —ç–º–æ—Ü–∏–π: Path='users/{_userId}/emotionHistory/{record.Id}', Error='{ex.Message}'", MyLogger.LogCategory.Firebase);
                MyLogger.LogError($"üìù [HISTORY-RECORD] ‚ùå Stack trace: {ex.StackTrace}", MyLogger.LogCategory.Firebase);
                throw;
            }
        }
        
        /// <summary>
        /// –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é —ç–º–æ—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–º–æ—Ü–∏–∏ –∏ —Å–æ–±—ã—Ç–∏—è
        /// </summary>
        public async Task AddEmotionHistoryRecord(EmotionData emotion, EmotionEventType eventType)
        {
            if (!CheckAuthentication())
            {
                MyLogger.LogWarning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é —ç–º–æ—Ü–∏–π", MyLogger.LogCategory.Firebase);
                return;
            }

            try
            {
                if (emotion == null)
                {
                    throw new ArgumentNullException(nameof(emotion), "–≠–º–æ—Ü–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null");
                }
                
                // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
                var record = new EmotionHistoryRecord(emotion, eventType);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
                await AddEmotionHistoryRecord(record);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é —ç–º–æ—Ü–∏–π: {ex.Message}", MyLogger.LogCategory.Firebase);
                throw;
            }
        }
        
        /// <summary>
        /// –ü–∞–∫–µ—Ç–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏—é
        /// </summary>
        public async Task AddEmotionHistoryBatch(List<EmotionHistoryRecord> records)
        {
            if (!CheckAuthentication())
            {
                MyLogger.LogWarning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏—é —ç–º–æ—Ü–∏–π", MyLogger.LogCategory.Firebase);
                return;
            }

            try
            {
                if (records == null || records.Count == 0)
                {
                    return;
                }
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ö–∞–Ω–∏–∑–º –±–∞—Ç—á–∏–Ω–≥–∞ –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                foreach (var record in records)
                {
                    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                    if (string.IsNullOrEmpty(record.Id))
                    {
                        record.Id = Guid.NewGuid().ToString();
                    }
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –±–∞—Ç—á
                    string path = $"users/{_userId}/emotionHistory/{record.Id}";
                    _batchManager.AddUpdateOperation(path, record.ToDictionary());
                    
                    // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
                    _emotionHistoryCache.AddOrUpdateRecord(record);
                }
                
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ–º –±–∞—Ç—á
                await _batchManager.ExecuteBatchAsync();
                
                MyLogger.Log($"–î–æ–±–∞–≤–ª–µ–Ω–æ {records.Count} –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏—é —ç–º–æ—Ü–∏–π —á–µ—Ä–µ–∑ –º–µ—Ö–∞–Ω–∏–∑–º –±–∞—Ç—á–∏–Ω–≥–∞", MyLogger.LogCategory.Firebase);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"–û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏—é —ç–º–æ—Ü–∏–π: {ex.Message}", MyLogger.LogCategory.Firebase);
                throw;
            }
        }
        
        /// <summary>
        /// –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π –æ–¥–Ω–∏–º –±–∞—Ç—á–µ–º
        /// </summary>
        public async Task UpdateEmotionSyncStatusBatch(Dictionary<string, SyncStatus> recordStatusPairs)
        {
            if (!CheckAuthentication())
            {
                MyLogger.LogWarning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏", MyLogger.LogCategory.Firebase);
                return;
            }

            try
            {
                if (recordStatusPairs == null || recordStatusPairs.Count == 0)
                {
                    MyLogger.LogWarning("–ü—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤", MyLogger.LogCategory.Firebase);
                    return;
                }
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ö–∞–Ω–∏–∑–º –±–∞—Ç—á–∏–Ω–≥–∞ –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π
                foreach (var kvp in recordStatusPairs)
                {
                    if (string.IsNullOrEmpty(kvp.Key))
                    {
                        MyLogger.LogWarning("–ü—Ä–æ–ø—É—Å–∫ –∑–∞–ø–∏—Å–∏ —Å –ø—É—Å—Ç—ã–º ID", MyLogger.LogCategory.Firebase);
                        continue;
                    }
                    
                    string path = $"users/{_userId}/emotionHistory/{kvp.Key}/syncStatus";
                    _batchManager.AddUpdateOperation(path, kvp.Value.ToString());
                }
                
                // –í—ã–ø–æ–ª–Ω—è–µ–º –±–∞—Ç—á –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
                await _batchManager.ExecuteBatchAsync();
                
                MyLogger.Log($"–û–±–Ω–æ–≤–ª–µ–Ω—ã —Å—Ç–∞—Ç—É—Å—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è {recordStatusPairs.Count} –∑–∞–ø–∏—Å–µ–π —á–µ—Ä–µ–∑ –º–µ—Ö–∞–Ω–∏–∑–º –±–∞—Ç—á–∏–Ω–≥–∞", MyLogger.LogCategory.Firebase);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"–û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {ex.Message}", MyLogger.LogCategory.Firebase);
                throw;
            }
        }
        
        /// <summary>
        /// –£–¥–∞–ª—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –æ–¥–Ω–∏–º –±–∞—Ç—á–µ–º
        /// </summary>
        public async Task DeleteEmotionHistoryRecordBatch(List<string> recordIds)
        {
            if (!CheckAuthentication())
            {
                MyLogger.LogWarning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π", MyLogger.LogCategory.Firebase);
                return;
            }

            try
            {
                if (recordIds == null || recordIds.Count == 0)
                {
                    MyLogger.LogWarning("–ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", MyLogger.LogCategory.Firebase);
                    return;
                }
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ö–∞–Ω–∏–∑–º –±–∞—Ç—á–∏–Ω–≥–∞ –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π
                foreach (var recordId in recordIds)
                {
                    if (string.IsNullOrEmpty(recordId))
                    {
                        MyLogger.LogWarning("–ü—Ä–æ–ø—É—Å–∫ –∑–∞–ø–∏—Å–∏ —Å –ø—É—Å—Ç—ã–º ID", MyLogger.LogCategory.Firebase);
                        continue;
                    }
                    
                    string path = $"users/{_userId}/emotionHistory/{recordId}";
                    _batchManager.AddDeleteOperation(path);
                }
                
                // –í—ã–ø–æ–ª–Ω—è–µ–º –±–∞—Ç—á –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
                await _batchManager.ExecuteBatchAsync();
                
                MyLogger.Log($"–£–¥–∞–ª–µ–Ω–æ {recordIds.Count} –∑–∞–ø–∏—Å–µ–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —ç–º–æ—Ü–∏–π —á–µ—Ä–µ–∑ –º–µ—Ö–∞–Ω–∏–∑–º –±–∞—Ç—á–∏–Ω–≥–∞", MyLogger.LogCategory.Firebase);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"–û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —ç–º–æ—Ü–∏–π: {ex.Message}", MyLogger.LogCategory.Firebase);
                throw;
            }
        }
        
        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —ç–º–æ—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        /// </summary>
        public async Task<List<EmotionHistoryRecord>> GetEmotionHistory(DateTime? startDate = null, DateTime? endDate = null, int limit = 100)
        {
            if (!CheckAuthentication())
            {
                MyLogger.LogWarning("‚ùå [GetEmotionHistory] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —ç–º–æ—Ü–∏–π", MyLogger.LogCategory.Firebase);
                return new List<EmotionHistoryRecord>();
            }

            try
            {
                string path = $"users/{_userId}/emotionHistory";
                MyLogger.Log($"üîç [GetEmotionHistory] –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø—É—Ç–∏: {path}", MyLogger.LogCategory.Firebase);
                
                // –ü–æ–ª—É—á–∞–µ–º –í–°–ï –¥–∞–Ω–Ω—ã–µ –±–µ–∑ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –¥–µ–ª–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
                var query = _database.Child("users").Child(_userId).Child("emotionHistory");
                
                MyLogger.Log($"‚è≥ [GetEmotionHistory] –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Firebase...", MyLogger.LogCategory.Firebase);
                var snapshot = await query.GetValueAsync();
                
                MyLogger.Log($"üìä [GetEmotionHistory] –û—Ç–≤–µ—Ç –æ—Ç Firebase: Exists={snapshot.Exists}, ChildrenCount={snapshot.ChildrenCount}", MyLogger.LogCategory.Firebase);
                
                var allRecords = new List<EmotionHistoryRecord>();
                
                if (snapshot.Exists && snapshot.ChildrenCount > 0)
                {
                    MyLogger.Log($"üìã [GetEmotionHistory] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {snapshot.ChildrenCount} –∑–∞–ø–∏—Å–µ–π...", MyLogger.LogCategory.Firebase);
                    
                    int processedCount = 0;
                    foreach (var child in snapshot.Children)
                    {
                        try
                        {
                            var record = JsonConvert.DeserializeObject<EmotionHistoryRecord>(child.GetRawJsonValue());
                            if (record != null)
                            {
                                allRecords.Add(record);
                                
                                // –ö—ç—à–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å
                                _emotionHistoryCache.AddOrUpdateRecord(record);
                            }
                            processedCount++;
                        }
                        catch (Exception ex)
                        {
                            MyLogger.LogError($"‚ùå [GetEmotionHistory] –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏ {processedCount + 1}: {ex.Message}", MyLogger.LogCategory.Firebase);
                        }
                    }
                }
                else
                {
                    MyLogger.LogWarning($"‚ö†Ô∏è [GetEmotionHistory] Firebase –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–ª–∏ snapshot –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", MyLogger.LogCategory.Firebase);
                }
                
                // –õ–æ–∫–∞–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–∞–º
                var filteredRecords = allRecords;
                
                if (startDate.HasValue || endDate.HasValue)
                {
                    MyLogger.Log($"üîç [GetEmotionHistory] –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –¥–∞—Ç–∞–º: startDate={startDate?.ToString("O")}, endDate={endDate?.ToString("O")}", MyLogger.LogCategory.Firebase);
                    
                    filteredRecords = allRecords.Where(record =>
                    {
                        if (startDate.HasValue && record.RecordTime < startDate.Value)
                            return false;
                        if (endDate.HasValue && record.RecordTime > endDate.Value)
                            return false;
                        return true;
                    }).ToList();
                    
                    MyLogger.Log($"üìä [GetEmotionHistory] –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–∞–º: {filteredRecords.Count} –∏–∑ {allRecords.Count} –∑–∞–ø–∏—Å–µ–π", MyLogger.LogCategory.Firebase);
                }
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–∏–º–∏—Ç –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                var result = filteredRecords.OrderByDescending(r => r.RecordTime).Take(limit).ToList();
                
                MyLogger.Log($"üéØ [GetEmotionHistory] –ò—Ç–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ {result.Count} –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ —ç–º–æ—Ü–∏–π (–ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤)", MyLogger.LogCategory.Firebase);
                return result;
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå [GetEmotionHistory] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —ç–º–æ—Ü–∏–π: {ex.Message}", MyLogger.LogCategory.Firebase);
                MyLogger.LogError($"‚ùå [GetEmotionHistory] Stack trace: {ex.StackTrace}", MyLogger.LogCategory.Firebase);
                throw;
            }
        }
        
        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏ —ç–º–æ—Ü–∏–π
        /// </summary>
        public async Task<List<EmotionHistoryRecord>> GetUnsyncedEmotionHistory(int limit = 50)
        {
            if (!CheckAuthentication())
            {
                MyLogger.LogWarning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π", MyLogger.LogCategory.Firebase);
                return new List<EmotionHistoryRecord>();
            }

            try
            {
                var query = _database.Child("users").Child(_userId).Child("emotionHistory")
                    .OrderByChild("syncStatus")
                    .EqualTo(SyncStatus.NotSynced.ToString())
                    .LimitToFirst(limit);
                
                var snapshot = await query.GetValueAsync();
                var result = new List<EmotionHistoryRecord>();
                
                if (snapshot.Exists && snapshot.ChildrenCount > 0)
                {
                    foreach (var child in snapshot.Children)
                    {
                        try
                        {
                            var record = JsonConvert.DeserializeObject<EmotionHistoryRecord>(child.GetRawJsonValue());
                            if (record != null)
                            {
                                result.Add(record);
                                
                                // –ö—ç—à–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å
                                _emotionHistoryCache.AddOrUpdateRecord(record);
                            }
                        }
                        catch (Exception ex)
                        {
                            MyLogger.LogError($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏: {ex.Message}", MyLogger.LogCategory.Firebase);
                        }
                    }
                }
                
                MyLogger.Log($"–ü–æ–ª—É—á–µ–Ω–æ {result.Count} –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π", MyLogger.LogCategory.Firebase);
                return result;
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {ex.Message}", MyLogger.LogCategory.Firebase);
                throw;
            }
        }
        
        /// <summary>
        /// –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏ —ç–º–æ—Ü–∏–π
        /// </summary>
        public async Task UpdateEmotionHistoryRecordStatus(string recordId, SyncStatus status)
        {
            if (!CheckAuthentication())
            {
                MyLogger.LogWarning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏", MyLogger.LogCategory.Firebase);
                return;
            }

            try
            {
                if (string.IsNullOrEmpty(recordId))
                {
                    throw new ArgumentException("ID –∑–∞–ø–∏—Å–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º", nameof(recordId));
                }
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ö–∞–Ω–∏–∑–º –±–∞—Ç—á–∏–Ω–≥–∞
                string path = $"users/{_userId}/emotionHistory/{recordId}/syncStatus";
                _batchManager.AddUpdateOperation(path, status.ToString());
                
                // –í—ã–ø–æ–ª–Ω—è–µ–º –±–∞—Ç—á –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –æ–¥–∏–Ω–æ—á–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
                await _batchManager.ExecuteBatchAsync();
                
                MyLogger.Log($"–°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏ {recordId} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {status} —á–µ—Ä–µ–∑ –º–µ—Ö–∞–Ω–∏–∑–º –±–∞—Ç—á–∏–Ω–≥–∞", MyLogger.LogCategory.Firebase);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {ex.Message}", MyLogger.LogCategory.Firebase);
                throw;
            }
        }
        
        /// <summary>
        /// –£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —ç–º–æ—Ü–∏–π
        /// </summary>
        public async Task DeleteEmotionHistoryRecord(string recordId)
        {
            if (!CheckAuthentication())
            {
                MyLogger.LogWarning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏", MyLogger.LogCategory.Firebase);
                return;
            }

            try
            {
                if (string.IsNullOrEmpty(recordId))
                {
                    throw new ArgumentException("ID –∑–∞–ø–∏—Å–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º", nameof(recordId));
                }
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ö–∞–Ω–∏–∑–º –±–∞—Ç—á–∏–Ω–≥–∞
                string path = $"users/{_userId}/emotionHistory/{recordId}";
                _batchManager.AddDeleteOperation(path);
                
                // –í—ã–ø–æ–ª–Ω—è–µ–º –±–∞—Ç—á –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
                await _batchManager.ExecuteBatchAsync();
                
                MyLogger.Log($"–ó–∞–ø–∏—Å—å {recordId} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —ç–º–æ—Ü–∏–π —á–µ—Ä–µ–∑ –º–µ—Ö–∞–Ω–∏–∑–º –±–∞—Ç—á–∏–Ω–≥–∞", MyLogger.LogCategory.Firebase);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —ç–º–æ—Ü–∏–π: {ex.Message}", MyLogger.LogCategory.Firebase);
                throw;
            }
        }
        
        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —ç–º–æ—Ü–∏—è–º –∑–∞ –ø–µ—Ä–∏–æ–¥
        /// </summary>
        public async Task<Dictionary<string, int>> GetEmotionStatistics(DateTime startDate, DateTime endDate)
        {
            if (!CheckAuthentication())
            {
                MyLogger.LogWarning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —ç–º–æ—Ü–∏–π", MyLogger.LogCategory.Firebase);
                return new Dictionary<string, int>();
            }

            try
            {
                var records = await GetEmotionHistory(startDate, endDate, 1000);
                var stats = new Dictionary<string, int>();
                
                foreach (var record in records)
                {
                    if (!string.IsNullOrEmpty(record.Type))
                    {
                        if (stats.ContainsKey(record.Type))
                        {
                            stats[record.Type]++;
                        }
                        else
                        {
                            stats[record.Type] = 1;
                        }
                    }
                }
                
                MyLogger.Log($"–ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–º–æ—Ü–∏–π —Å {startDate} –ø–æ {endDate}: {stats.Count} —Ç–∏–ø–æ–≤", MyLogger.LogCategory.Firebase);
                return stats;
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —ç–º–æ—Ü–∏–π: {ex.Message}", MyLogger.LogCategory.Firebase);
                throw;
            }
        }
        
        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        /// </summary>
        public async Task<EmotionSyncSettings> GetSyncSettings()
        {
            if (!CheckAuthentication())
            {
                MyLogger.LogWarning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏", MyLogger.LogCategory.Firebase);
                return null;
            }

            try
            {
                var snapshot = await _database.Child("users").Child(_userId).Child("syncSettings").GetValueAsync();
                
                if (snapshot.Exists)
                {
                    var settings = JsonConvert.DeserializeObject<EmotionSyncSettings>(snapshot.GetRawJsonValue());
                    MyLogger.Log("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞", MyLogger.LogCategory.Firebase);
                    return settings;
                }
                
                // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
                var defaultSettings = new EmotionSyncSettings();
                await UpdateSyncSettings(defaultSettings);
                
                MyLogger.Log("–°–æ–∑–¥–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏", MyLogger.LogCategory.Firebase);
                return defaultSettings;
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {ex.Message}", MyLogger.LogCategory.Firebase);
                throw;
            }
        }
        
        /// <summary>
        /// –û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        /// </summary>
        public async Task UpdateSyncSettings(EmotionSyncSettings settings)
        {
            if (!CheckAuthentication())
            {
                MyLogger.LogWarning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏", MyLogger.LogCategory.Firebase);
                return;
            }

            try
            {
                if (settings == null)
                {
                    throw new ArgumentNullException(nameof(settings), "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å null");
                }
                
                // –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Å–ª–æ–≤–∞—Ä—å
                var json = JsonConvert.SerializeObject(settings);
                var dictionary = JsonConvert.DeserializeObject<Dictionary<string, object>>(json);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ Firebase
                await _database.Child("users").Child(_userId).Child("syncSettings").UpdateChildrenAsync(dictionary);
                
                MyLogger.Log("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã", MyLogger.LogCategory.Firebase);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {ex.Message}", MyLogger.LogCategory.Firebase);
                throw;
            }
        }
        
        /// <summary>
        /// –û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —ç–º–æ—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        /// </summary>
        public async Task ClearEmotionHistory()
        {
            if (!CheckAuthentication())
            {
                MyLogger.LogWarning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —ç–º–æ—Ü–∏–π", MyLogger.LogCategory.Firebase);
                return;
            }

            try
            {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ö–∞–Ω–∏–∑–º –±–∞—Ç—á–∏–Ω–≥–∞
                string path = $"users/{_userId}/emotionHistory";
                _batchManager.AddDeleteOperation(path);
                
                // –í—ã–ø–æ–ª–Ω—è–µ–º –±–∞—Ç—á –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
                await _batchManager.ExecuteBatchAsync();
                
                MyLogger.Log("–ò—Å—Ç–æ—Ä–∏—è —ç–º–æ—Ü–∏–π –æ—á–∏—â–µ–Ω–∞ —á–µ—Ä–µ–∑ –º–µ—Ö–∞–Ω–∏–∑–º –±–∞—Ç—á–∏–Ω–≥–∞", MyLogger.LogCategory.Firebase);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —ç–º–æ—Ü–∏–π: {ex.Message}", MyLogger.LogCategory.Firebase);
                throw;
            }
        }
        
        #endregion
    }
} 