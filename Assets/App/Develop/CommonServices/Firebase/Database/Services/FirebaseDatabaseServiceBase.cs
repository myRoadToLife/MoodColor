using System;
using System.Collections.Generic;
using Firebase.Database;
using App.Develop.CommonServices.Firebase.Common.Cache;
using App.Develop.CommonServices.Firebase.Common.Helpers;
using App.Develop.Utils.Logging;
using Newtonsoft.Json;

namespace App.Develop.CommonServices.Firebase.Database.Services
{
    /// <summary>
    /// –ë–∞–∑–æ–≤—ã–π –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤ Firebase Database
    /// </summary>
    public abstract class FirebaseDatabaseServiceBase : IDisposable
    {
        #region Protected Fields
        /// <summary>
        /// –°—Å—ã–ª–∫–∞ –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        /// </summary>
        protected readonly DatabaseReference _database;
        
        /// <summary>
        /// –ú–µ–Ω–µ–¥–∂–µ—Ä –∫—ç—à–∞ Firebase
        /// </summary>
        protected readonly FirebaseCacheManager _cacheManager;
        
        /// <summary>
        /// –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–∫–µ—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        /// </summary>
        protected readonly FirebaseBatchManager _batchManager;
        
        /// <summary>
        /// –°–µ—Ä–≤–∏—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
        /// </summary>
        protected readonly DataValidationService _validationService;
        
        /// <summary>
        /// ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        /// </summary>
        protected string _userId;
        
        /// <summary>
        /// –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏
        /// </summary>
        protected readonly List<DatabaseReference> _activeListeners = new List<DatabaseReference>();
        
        /// <summary>
        /// –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Ç–ø–∏—Å–∫–∏
        /// </summary>
        protected readonly Dictionary<DatabaseReference, EventHandler<ValueChangedEventArgs>> _eventHandlers =
            new Dictionary<DatabaseReference, EventHandler<ValueChangedEventArgs>>();
            
        /// <summary>
        /// –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, —á—Ç–æ —Å–µ–π—á–∞—Å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UserId, 
        /// —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –≤—ã–∑–æ–≤–æ–≤
        /// </summary>
        protected bool _isUpdatingUserId = false;
        #endregion

        #region Events
        /// <summary>
        /// –°–æ–±—ã—Ç–∏–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        /// </summary>
        public event Action<string> UserIdChanged;
        #endregion

        #region Properties
        /// <summary>
        /// –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ—Ä–µ–Ω—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        /// </summary>
        public DatabaseReference RootReference => _database;
        
        /// <summary>
        /// ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        /// </summary>
        public string UserId => _userId;

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        /// </summary>
        public bool IsAuthenticated => !string.IsNullOrEmpty(UserId);
        
        /// <summary>
        /// –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–∫–µ—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        /// </summary>
        public FirebaseBatchManager BatchManager => _batchManager;
        #endregion

        #region Constructor
        /// <summary>
        /// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        /// </summary>
        /// <param name="database">–°—Å—ã–ª–∫–∞ –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö</param>
        /// <param name="cacheManager">–ú–µ–Ω–µ–¥–∂–µ—Ä –∫—ç—à–∞ Firebase</param>
        /// <param name="validationService">–°–µ—Ä–≤–∏—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö</param>
        protected FirebaseDatabaseServiceBase(
            DatabaseReference database, 
            FirebaseCacheManager cacheManager,
            DataValidationService validationService = null)
        {
            _database = database ?? throw new ArgumentNullException(nameof(database));
            _cacheManager = cacheManager ?? throw new ArgumentNullException(nameof(cacheManager));
            _validationService = validationService; // –ú–æ–∂–µ—Ç –±—ã—Ç—å null
            _batchManager = new FirebaseBatchManager(_database);
            
            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–∞—Ç—á–∞
            _batchManager.OnBatchCompleted += OnBatchCompleted;
            
            MyLogger.Log("‚úÖ Firebase Database Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", MyLogger.LogCategory.Firebase);
        }
        
        private void OnBatchCompleted(bool success, string message)
        {
            if (success)
            {
                MyLogger.Log($"‚úÖ –ë–∞—Ç—á —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω: {message}", MyLogger.LogCategory.Firebase);
            }
            else
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞—Ç—á–∞: {message}", MyLogger.LogCategory.Firebase);
            }
        }
        #endregion

        /// <summary>
        /// –û–±–Ω–æ–≤–ª—è–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        /// </summary>
        public virtual void UpdateUserId(string userId)
        {
            // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –≤—ã–∑–æ–≤–æ–≤
            if (_isUpdatingUserId)
            {
                MyLogger.LogWarning("üîÑ [DATABASE-AUTH] –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –≤—ã–∑–æ–≤ UpdateUserId", MyLogger.LogCategory.Firebase);
                return;
            }
            
            _isUpdatingUserId = true;
            
            try
            {
                if (string.IsNullOrEmpty(userId))
                {
                    MyLogger.LogWarning("üîë [DATABASE-AUTH] ‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—É—Å—Ç–æ–π UserId", MyLogger.LogCategory.Firebase);
                    _userId = string.Empty;
                    
                    // –í—ã–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ ID –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è
                    MyLogger.Log($"üîë [DATABASE-AUTH] üì¢ –í—ã–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ UserIdChanged —Å –ø—É—Å—Ç—ã–º ID", MyLogger.LogCategory.Firebase);
                    UserIdChanged?.Invoke(_userId);
                    
                    return;
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
                bool hasChanged = _userId != userId;
                
                if (hasChanged)
                {
                    _userId = userId;
                    
                    MyLogger.Log($"üîë [DATABASE-AUTH] üîÑ UserId –æ–±–Ω–æ–≤–ª–µ–Ω: {_userId.Substring(0, Math.Min(8, _userId.Length))}...", MyLogger.LogCategory.Firebase);
                    MyLogger.Log($"üîë [DATABASE-AUTH] üì¢ –í—ã–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ UserIdChanged —Å –Ω–æ–≤—ã–º ID", MyLogger.LogCategory.Firebase);
                    UserIdChanged?.Invoke(_userId);
                }
                else
                {
                    MyLogger.Log($"üîë [DATABASE-AUTH] ‚ÑπÔ∏è UserId –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, —Å–æ–±—ã—Ç–∏–µ –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è", MyLogger.LogCategory.Firebase);
                }
            }
            finally
            {
                _isUpdatingUserId = false;
            }
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ _userId)
        /// </summary>
        protected bool CheckAuthentication()
        {
            if (string.IsNullOrEmpty(_userId))
            {
                MyLogger.LogWarning("‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", MyLogger.LogCategory.Firebase);
                return false;
            }

            return true;
        }

        /// <summary>
        /// –ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è ValueChanged
        /// </summary>
        protected void SubscribeToData<T>(DatabaseReference reference, Action<T> onUpdate)
        {
            if (_eventHandlers.ContainsKey(reference))
            {
                MyLogger.LogWarning($"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {reference.Key}", MyLogger.LogCategory.Firebase);
                return; // –£–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã
            }

            _activeListeners.Add(reference);

            EventHandler<ValueChangedEventArgs> handler = (sender, args) =>
            {
                if (args.DatabaseError != null)
                {
                    MyLogger.LogError($"–û—à–∏–±–∫–∞ Firebase –ø—Ä–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–∏ {reference.Key}: {args.DatabaseError.Message}", MyLogger.LogCategory.Firebase);
                    return;
                }

                if (args.Snapshot?.Exists == true && args.Snapshot.Value != null)
                {
                    try
                    {
                        // –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é Newtonsoft.Json
                        var json = JsonConvert.SerializeObject(args.Snapshot.Value);
                        var data = JsonConvert.DeserializeObject<T>(json);
                        onUpdate?.Invoke(data);
                    }
                    catch (Exception ex)
                    {
                        MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {reference.Key}: {ex.Message}\n{ex.StackTrace}", MyLogger.LogCategory.Firebase);
                    }
                }
                else
                {
                    MyLogger.Log($"–î–∞–Ω–Ω—ã–µ –¥–ª—è {reference.Key} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –ø—É—Å—Ç—ã.", MyLogger.LogCategory.Firebase);
                    // –í—ã–∑—ã–≤–∞–µ–º onUpdate —Å default(T), —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–ª—É—á–∞–π –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥–∞–Ω–Ω—ã—Ö
                    onUpdate?.Invoke(default(T));
                }
            };

            _eventHandlers[reference] = handler; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            reference.ValueChanged += handler; // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è
            MyLogger.Log($"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {reference.Key} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.", MyLogger.LogCategory.Firebase);
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        /// </summary>
        public async System.Threading.Tasks.Task<bool> CheckConnection()
        {
            try
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, –∑–∞–ø—Ä–∞—à–∏–≤–∞—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —É–∑–µ–ª
                var connectionRef = _database.Root.Child(".info/connected");
                var snapshot = await connectionRef.GetValueAsync();
                
                bool isConnected = snapshot.Exists && snapshot.Value != null && (bool)snapshot.Value;
                
                MyLogger.Log($"–°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Firebase: {(isConnected ? "–ü–æ–¥–∫–ª—é—á–µ–Ω–æ" : "–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ", MyLogger.LogCategory.Firebase)}");
                return isConnected;
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {ex.Message}", MyLogger.LogCategory.Firebase);
                return false;
            }
        }

        /// <summary>
        /// –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã (–æ—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏–π)
        /// </summary>
        public virtual void Dispose()
        {
            try
            {
                MyLogger.Log($"Disposing FirebaseDatabaseServiceBase. –û—Ç–ø–∏—Å–∫–∞ –æ—Ç {_eventHandlers.Count} —Å–ª—É—à–∞—Ç–µ–ª–µ–π...", MyLogger.LogCategory.Firebase);
                
                // –û–±—Ö–æ–¥–∏–º –∫–æ–ø–∏—é –∫–ª—é—á–µ–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–ª–æ–≤–∞—Ä—è –≤–æ –≤—Ä–µ–º—è –∏—Ç–µ—Ä–∞—Ü–∏–∏
                var referencesToUnsubscribe = new List<DatabaseReference>(_eventHandlers.Keys);

                foreach (var reference in referencesToUnsubscribe)
                {
                    if (_eventHandlers.TryGetValue(reference, out var handler))
                    {
                        reference.ValueChanged -= handler; // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è
                        MyLogger.Log($"–û—Ç–ø–∏—Å–∫–∞ –æ—Ç {reference.Key} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.", MyLogger.LogCategory.Firebase);
                    }
                }

                _eventHandlers.Clear(); // –û—á–∏—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
                _activeListeners.Clear(); // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
                
                // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π FirebaseBatchManager
                if (_batchManager != null)
                {
                    _batchManager.OnBatchCompleted -= OnBatchCompleted;
                    
                    // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –±–∞—Ç—á–∏–Ω–≥–∞, –≤—ã–ø–æ–ª–Ω—è–µ–º –∏—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
                    int pendingCount = _batchManager.GetPendingOperationsCount();
                    if (pendingCount > 0)
                    {
                        MyLogger.Log($"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ {pendingCount} –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –±–∞—Ç—á–∏–Ω–≥–∞ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º...", MyLogger.LogCategory.Firebase);
                        try
                        {
                            // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–∞–Ω–Ω—ã–µ
                            _batchManager.ExecuteBatchAsync().GetAwaiter().GetResult();
                        }
                        catch (Exception ex)
                        {
                            MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –±–∞—Ç—á–∏–Ω–≥–∞: {ex.Message}", MyLogger.LogCategory.Firebase);
                        }
                    }
                }
                
                MyLogger.Log("‚úÖ FirebaseDatabaseServiceBase: –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —É–¥–∞–ª–µ–Ω—ã –∏ —Ä–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã.", MyLogger.LogCategory.Firebase);
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ FirebaseDatabaseServiceBase: {ex.Message}\n{ex.StackTrace}", MyLogger.LogCategory.Firebase);
            }
        }
    }
} 