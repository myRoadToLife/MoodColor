using System;
using System.Collections.Generic;
using UnityEngine;
using App.Develop.Utils.Logging;

namespace App.Develop.CommonServices.Firebase.Database.Models
{
    /// <summary>
    /// –ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    /// </summary>
    public class ActiveSessionData
    {
        /// <summary>
        /// –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        /// </summary>
        public string DeviceId { get; set; }
        
        /// <summary>
        /// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ (–º–æ–¥–µ–ª—å, –û–° –∏ —Ç.–¥.)
        /// </summary>
        public string DeviceInfo { get; set; }
        
        /// <summary>
        /// IP-–∞–¥—Ä–µ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
        /// </summary>
        public string IpAddress { get; set; }
        
        /// <summary>
        /// –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö —Å –Ω–∞—á–∞–ª–∞ —ç–ø–æ—Ö–∏)
        /// </summary>
        public long LastActivityTimestamp { get; set; }
        
        /// <summary>
        /// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ–±—ä–µ–∫—Ç –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è Firebase
        /// </summary>
        public Dictionary<string, object> ToDictionary()
        {
            return new Dictionary<string, object>
            {
                ["deviceId"] = DeviceId ?? "",
                ["deviceInfo"] = DeviceInfo ?? "",
                ["ipAddress"] = IpAddress ?? "",
                ["lastActivityTimestamp"] = LastActivityTimestamp
            };
        }
        
        /// <summary>
        /// –°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å–µ—Å—Å–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç–µ–∫—É—â–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        /// </summary>
        public static ActiveSessionData CreateFromCurrentDevice()
        {
            string deviceId = SystemInfo.deviceUniqueIdentifier;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ deviceId –Ω–µ –ø—É—Å—Ç–æ–π
            if (string.IsNullOrEmpty(deviceId))
            {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ deviceUniqueIdentifier –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                deviceId = GenerateDeviceId();
                MyLogger.LogWarning($"‚ö†Ô∏è SystemInfo.deviceUniqueIdentifier –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID: {deviceId}", MyLogger.LogCategory.Firebase);
            }
            
            return new ActiveSessionData
            {
                DeviceId = deviceId,
                DeviceInfo = $"{SystemInfo.deviceModel}, {SystemInfo.operatingSystem}",
                IpAddress = "unknown", // –í Unity —Å–ª–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å IP –∫–ª–∏–µ–Ω—Ç–∞
                LastActivityTimestamp = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds()
            };
        }
        
        /// <summary>
        /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        /// </summary>
        private static string GenerateDeviceId()
        {
            // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –±–æ–ª—å—à–µ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            string combinedInfo = $"{SystemInfo.deviceModel}_{SystemInfo.deviceName}_{SystemInfo.operatingSystem}_{SystemInfo.processorType}";
            
            // –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã, –¥–æ–±–∞–≤–ª—è–µ–º –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
            if (!string.IsNullOrEmpty(SystemInfo.deviceModel))
                combinedInfo += "_" + SystemInfo.deviceModel;
                
            // –°–æ–∑–¥–∞–µ–º —Ö–µ—à –∏–∑ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            using (var md5 = System.Security.Cryptography.MD5.Create())
            {
                byte[] inputBytes = System.Text.Encoding.UTF8.GetBytes(combinedInfo);
                byte[] hashBytes = md5.ComputeHash(inputBytes);
                
                // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ö–µ—à –≤ —Å—Ç—Ä–æ–∫—É
                var sb = new System.Text.StringBuilder();
                for (int i = 0; i < hashBytes.Length; i++)
                {
                    sb.Append(hashBytes[i].ToString("x2"));
                }
                
                return sb.ToString();
            }
        }
        
        /// <summary>
        /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π deviceId
        /// </summary>
        public static string GetCurrentDeviceId()
        {
            string deviceId = SystemInfo.deviceUniqueIdentifier;
            
            MyLogger.Log($"üîç [DEVICE-ID] –ü–æ–ª—É—á–µ–Ω DeviceId –∏–∑ SystemInfo: '{deviceId}' (–¥–ª–∏–Ω–∞: {deviceId?.Length ?? 0})", MyLogger.LogCategory.Firebase);
            MyLogger.Log($"üîç [DEVICE-ID] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ: Model='{SystemInfo.deviceModel}', Name='{SystemInfo.deviceName}', OS='{SystemInfo.operatingSystem}'", MyLogger.LogCategory.Firebase);
            
            if (string.IsNullOrEmpty(deviceId))
            {
                deviceId = GenerateDeviceId();
                MyLogger.Log($"üîç [DEVICE-ID] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π DeviceId: '{deviceId}' (–¥–ª–∏–Ω–∞: {deviceId.Length})", MyLogger.LogCategory.Firebase);
            }
            else
            {
                MyLogger.Log($"üîç [DEVICE-ID] –ò—Å–ø–æ–ª—å–∑—É–µ–º DeviceId –∏–∑ SystemInfo: '{deviceId}' (–¥–ª–∏–Ω–∞: {deviceId.Length})", MyLogger.LogCategory.Firebase);
            }
            
            return deviceId;
        }
    }
} 