using System;
using System.Collections.Generic;
using App.Develop.CommonServices.AssetManagement;
using App.Develop.DI;
using UnityEngine;

namespace App.Develop.CommonServices.UI
{
    public class PanelManager : IDisposable
    {
        private readonly Dictionary<string, GameObject> _activePanels = new();
        private readonly ResourcesAssetLoader _assetLoader;
        private readonly MonoFactory _factory;

        public PanelManager(ResourcesAssetLoader assetLoader, MonoFactory factory)
        {
            _assetLoader = assetLoader ?? throw new ArgumentNullException(nameof(assetLoader));
            _factory = factory ?? throw new ArgumentNullException(nameof(factory));
        }

        public T ShowPanel<T>(string panelPath) where T : MonoBehaviour
        {
            // –ï—Å–ª–∏ –ø–∞–Ω–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –µ—ë
            if (_activePanels.TryGetValue(panelPath, out var existingPanel))
            {
                bool isActive = existingPanel.activeSelf;
                existingPanel.SetActive(!isActive);
                Debug.Log(isActive ? $"üîΩ –ü–∞–Ω–µ–ª—å {panelPath} —Å–∫—Ä—ã—Ç–∞" : $"üîº –ü–∞–Ω–µ–ª—å {panelPath} –ø–æ–∫–∞–∑–∞–Ω–∞");
                return existingPanel.GetComponent<T>();
            }

            Debug.Log($"‚öôÔ∏è –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å {panelPath}");

            var prefab = _assetLoader.LoadResource<GameObject>(panelPath);
            if (prefab == null)
            {
                Debug.LogError($"‚ùå –ü—Ä–µ—Ñ–∞–± {panelPath} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Resources");
                return null;
            }

            var instance = UnityEngine.Object.Instantiate(prefab);
            _activePanels[panelPath] = instance;

            var component = instance.GetComponentInChildren<T>();
            if (component == null)
            {
                Debug.LogError($"‚ùå –ö–æ–º–ø–æ–Ω–µ–Ω—Ç {typeof(T).Name} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –ø—Ä–µ—Ñ–∞–±–µ {panelPath}");
                UnityEngine.Object.Destroy(instance);
                _activePanels.Remove(panelPath);
                return null;
            }

            _factory.CreateOn<T>(component.gameObject);
            return component;
        }

        public void HidePanel(string panelPath)
        {
            if (_activePanels.TryGetValue(panelPath, out var panel))
            {
                panel.SetActive(false);
                Debug.Log($"üîΩ –ü–∞–Ω–µ–ª—å {panelPath} —Å–∫—Ä—ã—Ç–∞");
            }
        }

        public void HideAllPanels()
        {
            foreach (var panel in _activePanels.Values)
            {
                panel.SetActive(false);
            }
            Debug.Log("üîΩ –í—Å–µ –ø–∞–Ω–µ–ª–∏ —Å–∫—Ä—ã—Ç—ã");
        }

        public void Dispose()
        {
            foreach (var panel in _activePanels.Values)
            {
                if (panel != null)
                {
                    UnityEngine.Object.Destroy(panel);
                }
            }
            _activePanels.Clear();
        }
    }
} 