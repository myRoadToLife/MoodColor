using System;
using System.Collections.Generic;
using App.Develop.CommonServices.AssetManagement;
using App.Develop.DI;
using App.Develop.Utils.Logging;
using UnityEngine;
using System.Threading.Tasks;
using UnityEngine.AddressableAssets;
using Logger = App.Develop.Utils.Logging.Logger;

namespace App.Develop.CommonServices.UI
{
    public class PanelManager : IDisposable
    {
        private readonly Dictionary<string, GameObject> _activePanels = new();
        private readonly IAssetLoader _assetLoader;
        private readonly MonoFactory _factory;

        public PanelManager(IAssetLoader assetLoader, MonoFactory factory)
        {
            _assetLoader = assetLoader ?? throw new ArgumentNullException(nameof(assetLoader));
            _factory = factory ?? throw new ArgumentNullException(nameof(factory));
        }

        public async Task<T> ShowPanelAsync<T>(string addressableKey) where T : MonoBehaviour
        {
            if (_activePanels.TryGetValue(addressableKey, out var existingPanel))
            {
                if (existingPanel == null)
                {
                    Logger.LogWarning($"üßπ –û–±—ä–µ–∫—Ç –ø–∞–Ω–µ–ª–∏ {addressableKey} —É–Ω–∏—á—Ç–æ–∂–µ–Ω. –£–¥–∞–ª—è—é –∏–∑ —Å–ª–æ–≤–∞—Ä—è.");
                    _activePanels.Remove(addressableKey);
                }
                else
                {
                    existingPanel.SetActive(true);
                    return existingPanel.GetComponent<T>();
                }
            }

            GameObject instance = await _assetLoader.InstantiateAsync(addressableKey);
            if (instance == null)
            {
                Logger.LogError($"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–∞–Ω–µ–ª–∏ –∏–∑ Addressable: {addressableKey}");
                return null;
            }

            var component = instance.GetComponentInChildren<T>();
            if (component == null)
            {
                Logger.LogError($"‚ùå –ö–æ–º–ø–æ–Ω–µ–Ω—Ç {typeof(T).Name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –ø—Ä–µ—Ñ–∞–±–∞ {addressableKey} (–ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ GetComponentInChildren)");
                Addressables.ReleaseInstance(instance);
                return null;
            }

            _factory.InjectDependencies(component);
            
            _activePanels[addressableKey] = instance;
            instance.SetActive(true);

            return component;
        }

        public async Task<bool> TogglePanelAsync<T>(string addressableKey) where T : MonoBehaviour
        {
            Logger.Log($"[PanelManager] TogglePanelAsync –≤—ã–∑–≤–∞–Ω –¥–ª—è –∫–ª—é—á–∞: {addressableKey}, —Ç–∏–ø: {typeof(T).Name}");
            if (_activePanels.TryGetValue(addressableKey, out var panel))
            {
                Logger.Log($"[PanelManager] –ü–∞–Ω–µ–ª—å {addressableKey} –Ω–∞–π–¥–µ–Ω–∞ –≤ _activePanels.");
                if (panel == null)
                {
                    Logger.LogWarning($"[PanelManager] üßπ –ü–∞–Ω–µ–ª—å {addressableKey} –±—ã–ª–∞ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞ (null). –£–¥–∞–ª—è–µ–º —Å—Å—ã–ª–∫—É –∏ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–Ω–æ–≤–æ.");
                    _activePanels.Remove(addressableKey);
                    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–Ω–æ–≤–æ, —Ç–∞–∫ –∫–∞–∫ —Å—Å—ã–ª–∫–∞ –±—ã–ª–∞ —É—Ç–µ—Ä—è–Ω–∞
                    var newPanelComponent = await ShowPanelAsync<T>(addressableKey);
                    return newPanelComponent != null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true, –µ—Å–ª–∏ –ø–∞–Ω–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∞–∑–∞–Ω–∞ (—Å—Ç–∞–ª–∞ –∞–∫—Ç–∏–≤–Ω–æ–π)
                }

                bool isActive = panel.activeSelf;
                Logger.Log($"[PanelManager] –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ {addressableKey}: {(isActive ? "–ê–∫—Ç–∏–≤–Ω–∞" : "–ù–µ–∞–∫—Ç–∏–≤–Ω–∞")}. –ú–µ–Ω—è–µ–º –Ω–∞: {(!isActive ? "–ê–∫—Ç–∏–≤–Ω–∞" : "–ù–µ–∞–∫—Ç–∏–≤–Ω–∞")}");
                panel.SetActive(!isActive);
                return !isActive; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (true –µ—Å–ª–∏ —Å—Ç–∞–ª–∞ –∞–∫—Ç–∏–≤–Ω–æ–π, false –µ—Å–ª–∏ —Å—Ç–∞–ª–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π)
            }
            else
            {
                Logger.Log($"[PanelManager] –ü–∞–Ω–µ–ª—å {addressableKey} –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ _activePanels. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é.");
                // –ü–∞–Ω–µ–ª–∏ –Ω–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ, –∑–Ω–∞—á–∏—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–µ
                var panelComponent = await ShowPanelAsync<T>(addressableKey);
                return panelComponent != null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true, –µ—Å–ª–∏ –ø–∞–Ω–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∞–∑–∞–Ω–∞ (—Å—Ç–∞–ª–∞ –∞–∫—Ç–∏–≤–Ω–æ–π)
            }
        }

        public void HidePanel(string panelPath)
        {
            if (_activePanels.TryGetValue(panelPath, out var panel) && panel != null)
            {
                panel.SetActive(false);
            }
        }

        public void HideAllPanels()
        {
            foreach (var panel in _activePanels.Values)
            {
                if (panel != null)
                {
                    panel.SetActive(false);
                }
            }
        }

        public void Dispose()
        {
            foreach (var panelGo in _activePanels.Values)
            {
                if (panelGo != null)
                {
                    _assetLoader.ReleaseAsset(panelGo);
                }
            }
            _activePanels.Clear();
        }
    }
}
