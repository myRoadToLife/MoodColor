using System;
using System.Threading.Tasks;
using App.Develop.CommonServices.Firebase.Database.Services;
using App.Develop.Utils.Logging;
using UnityEngine;

namespace App.Develop.CommonServices.DataManagement.DataProviders
{
    public class CloudSyncService : ICloudSyncService
    {
        private const string SyncStatusKey = "cloud_sync_status";
        
        private readonly ISaveLoadService _saveLoadService;
        private readonly IDatabaseService _databaseService;
        private SyncStatusData _syncStatus;
        private bool _isSyncInProgress = false;
        
        public CloudSyncService(ISaveLoadService saveLoadService, IDatabaseService databaseService)
        {
            _saveLoadService = saveLoadService;
            _databaseService = databaseService;
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
            if (!_saveLoadService.TryLoad(out _syncStatus))
            {
                _syncStatus = new SyncStatusData();
                // –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º IsLastSyncSuccessful –≤ true,
                // —á—Ç–æ–±—ã –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å –∏–∑ –æ–±–ª–∞–∫–∞
                _syncStatus.IsLastSyncSuccessful = true;
                _saveLoadService.Save(_syncStatus);
            }
            
            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            Application.quitting += OnApplicationQuitting;
            Application.focusChanged += OnApplicationFocusChanged;
            
            // –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±–ª–∞–∫–∞
            CheckAndLoadFromCloud();
        }
        
        private void OnApplicationQuitting()
        {
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å –æ–±–ª–∞–∫–æ–º –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            // –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è
            SyncDataToCloudSync();
        }
        
        private void OnApplicationFocusChanged(bool hasFocus)
        {
            if (!hasFocus)
            {
                // –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ç–µ—Ä—è–µ—Ç —Ñ–æ–∫—É—Å - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –æ–±–ª–∞–∫–æ–º
                SyncToCloudAsync().ConfigureAwait(false);
            }
            else
            {
                // –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–∞–µ—Ç —Ñ–æ–∫—É—Å - –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
                CheckAndLoadFromCloud();
            }
        }
        
        private async void CheckAndLoadFromCloud()
        {
            var syncStatus = GetLastSyncStatus();
            
            if (syncStatus.IsLastSyncSuccessful)
            {
                                // MyLogger.Log("üîÑ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ–π. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±–ª–∞–∫–∞...",
                // MyLogger.LogCategory.Sync);
                
                bool loadSuccess = await LoadDataFromCloud();
                
                MyLogger.Log($"üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ–±–ª–∞–∫–∞: {(loadSuccess ? "‚úÖ –£—Å–ø–µ—à–Ω–æ" : "‚ùå –ù–µ—É–¥–∞—á–Ω–æ")}",
                    MyLogger.LogCategory.Sync);
            }
            else
            {
                MyLogger.LogWarning($"‚ö†Ô∏è –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ–π: {syncStatus.SyncErrorMessage}. " +
                                   "–ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.",
                    MyLogger.LogCategory.Sync);
            }
        }
        
        public async Task<bool> SyncDataToCloud()
        {
            if (_isSyncInProgress)
                return false;
                
            _isSyncInProgress = true;
            
            try
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Firebase
                bool isConnected = await _databaseService.CheckConnection();
                if (!isConnected)
                {
                    MyLogger.LogWarning("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Firebase –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö", 
                        MyLogger.LogCategory.Sync);
                    _isSyncInProgress = false;
                    return false;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                if (!_databaseService.IsAuthenticated)
                {
                    MyLogger.LogWarning("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö", 
                        MyLogger.LogCategory.Sync);
                    _isSyncInProgress = false;
                    return false;
                }
                
                // –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å
                if (!_saveLoadService.TryLoad(out GameData gameData))
                {
                    MyLogger.LogWarning("‚ö†Ô∏è –ù–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏", 
                        MyLogger.LogCategory.Sync);
                    _isSyncInProgress = false;
                    return false;
                }
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –æ–±–ª–∞–∫–æ
                await _databaseService.SaveUserGameData(gameData);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                _syncStatus.LastSyncTimestamp = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds();
                _syncStatus.IsLastSyncSuccessful = true;
                _syncStatus.SyncErrorMessage = string.Empty;
                _saveLoadService.Save(_syncStatus);
                
                MyLogger.Log("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å –æ–±–ª–∞–∫–æ–º", 
                    MyLogger.LogCategory.Sync);
                
                _isSyncInProgress = false;
                return true;
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å –æ–±–ª–∞–∫–æ–º: {ex.Message}", 
                    MyLogger.LogCategory.Sync);
                SaveSyncStatus(false, $"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {ex.Message}");
                _isSyncInProgress = false;
                return false;
            }
        }
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–∑–æ–≤–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        private void SyncDataToCloudSync()
        {
            try
            {
                MyLogger.Log("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –æ–±–ª–∞–∫–æ–º –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...", 
                    MyLogger.LogCategory.Sync);
                
                // –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å
                if (!_saveLoadService.TryLoad(out GameData gameData))
                {
                    MyLogger.LogWarning("‚ö†Ô∏è –ù–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏", 
                        MyLogger.LogCategory.Sync);
                    return;
                }
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –æ–±–ª–∞–∫–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏)
                // –ë–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è
                Task.Run(async () => 
                {
                    try
                    {
                        if (_databaseService.IsAuthenticated)
                        {
                            await _databaseService.SaveUserGameData(gameData);
                            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                            _syncStatus.LastSyncTimestamp = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds();
                            _syncStatus.IsLastSyncSuccessful = true;
                            _syncStatus.SyncErrorMessage = string.Empty;
                            _saveLoadService.Save(_syncStatus);
                            MyLogger.Log("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å –æ–±–ª–∞–∫–æ–º –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏", 
                                MyLogger.LogCategory.Sync);
                        }
                    }
                    catch (Exception ex)
                    {
                        MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏: {ex.Message}", 
                            MyLogger.LogCategory.Sync);
                        SaveSyncStatus(false, $"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏: {ex.Message}");
                    }
                }).GetAwaiter().GetResult();
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏: {ex.Message}", 
                    MyLogger.LogCategory.Sync);
            }
        }
        
        private async Task SyncToCloudAsync()
        {
            if (_isSyncInProgress)
                return;
                
            _isSyncInProgress = true;
            
            try
            {
                MyLogger.Log("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –æ–±–ª–∞–∫–æ–º...", MyLogger.LogCategory.Sync);
                
                bool syncSuccess = await SyncDataToCloud();
                
                MyLogger.Log($"üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –æ–±–ª–∞–∫–æ–º: {(syncSuccess ? "‚úÖ –£—Å–ø–µ—à–Ω–æ" : "‚ùå –ù–µ—É–¥–∞—á–Ω–æ")}",
                    MyLogger.LogCategory.Sync);
            }
            finally
            {
                _isSyncInProgress = false;
            }
        }
        
        public async Task<bool> LoadDataFromCloud()
        {
            if (_isSyncInProgress)
                return false;
                
            _isSyncInProgress = true;
            
            try
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π
                if (!_syncStatus.IsLastSyncSuccessful)
                {
                    MyLogger.LogWarning("‚ö†Ô∏è –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ–π. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑ –æ–±–ª–∞–∫–∞", 
                        MyLogger.LogCategory.Sync);
                    _isSyncInProgress = false;
                    return false;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Firebase
                bool isConnected = await _databaseService.CheckConnection();
                if (!isConnected)
                {
                    MyLogger.LogWarning("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Firebase –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö", 
                        MyLogger.LogCategory.Sync);
                    _isSyncInProgress = false;
                    return false;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                if (!_databaseService.IsAuthenticated)
                {
                    MyLogger.LogWarning("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö", 
                        MyLogger.LogCategory.Sync);
                    _isSyncInProgress = false;
                    return false;
                }
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±–ª–∞–∫–∞
                GameData gameData = await _databaseService.LoadUserGameData();
                
                // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö –ª–æ–∫–∞–ª—å–Ω–æ
                if (gameData != null)
                {
                    _saveLoadService.Save(gameData);
                    
                    MyLogger.Log("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –æ–±–ª–∞–∫–∞", 
                        MyLogger.LogCategory.Sync);
                    
                    _isSyncInProgress = false;
                    return true;
                }
                
                MyLogger.LogWarning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ–±–ª–∞–∫–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏", 
                    MyLogger.LogCategory.Sync);
                _isSyncInProgress = false;
                return false;
            }
            catch (Exception ex)
            {
                MyLogger.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ–±–ª–∞–∫–∞: {ex.Message}", 
                    MyLogger.LogCategory.Sync);
                _isSyncInProgress = false;
                return false;
            }
        }
        
        public SyncStatusData GetLastSyncStatus()
        {
            return _syncStatus;
        }
        
        public void SaveSyncStatus(bool isSuccessful, string errorMessage = "")
        {
            _syncStatus.IsLastSyncSuccessful = isSuccessful;
            _syncStatus.LastSyncTimestamp = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds();
            _syncStatus.SyncErrorMessage = errorMessage;
            
            _saveLoadService.Save(_syncStatus);
            
            MyLogger.Log($"üíæ –°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {(isSuccessful ? "‚úÖ –£—Å–ø–µ—à–Ω–æ" : $"‚ùå –ù–µ—É–¥–∞—á–Ω–æ: {errorMessage}")}", 
                MyLogger.LogCategory.Sync);
        }
        
        public void Dispose()
        {
            // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–∞
            Application.quitting -= OnApplicationQuitting;
            Application.focusChanged -= OnApplicationFocusChanged;
        }
    }
} 